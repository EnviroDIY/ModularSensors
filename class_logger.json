{
  "version": "1.12.0",
  "compound": {
    "kind": "class",
    "id": "class_logger",
    "name": "Logger",
    "url_base": "class_logger",
    "url": "class_logger.html",
    "include": [
      "&lt;src/LoggerBase.h&gt;",
      "_logger_base_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The &quot;Logger&quot; Class handles low power sleep for the main processor, interfacing with the real-time clock and modem, writing to the SD card, and passing data on to the data publishers.",
    "description": "<p>A logger is a device that can control all functions of the modem sensors and that are attached to it and save the values of all variables measured by those sensors to an attached SD card. It must also work with a real-time clock to give timestamps to values. It may also work with a <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> for internet connection and send out data over the internet through one or more data publishers.</p><p>In this library, all loggers are Arduino-style small processor circuit boards.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_logger.html",
        "id": "aa243f5d0cbb1783de8c73ca262ab270d",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "Logger",
        "brief": "Construct a new <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "loggerID",
            "type": "const char*",
            "type_name": "const char* loggerID",
            "default": null,
            "description": "A name for the logger - unless otherwise specified, files saved to the SD card will be named with the logger id and the date the file was started.",
            "direction": ""
          },
          {
            "name": "loggingIntervalMinutes",
            "type": "uint16_t",
            "type_name": "uint16_t loggingIntervalMinutes",
            "default": null,
            "description": "The frequency in minutes at which data should be logged",
            "direction": ""
          },
          {
            "name": "SDCardSSPin",
            "type": "int8_t",
            "type_name": "int8_t SDCardSSPin",
            "default": null,
            "description": "The pin of the chip select/slave select for the SPI connection to the SD card",
            "direction": ""
          },
          {
            "name": "mcuWakePin",
            "type": "int8_t",
            "type_name": "int8_t mcuWakePin",
            "default": null,
            "description": "The pin used to wake the logger from deep sleep - expected to be attached to an alarm pin of the real-time clock. Use a value of -1 to prevent the board from sleeping.",
            "direction": ""
          },
          {
            "name": "inputArray",
            "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
            "type_name": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>* inputArray",
            "default": null,
            "description": "A pointer to a variableArray object instance providing data to be logged. This is NOT an array of variables, but an object of the variable array class.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_logger.html",
        "id": "af9481b3c381aa7373cd8139a846ac184",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "Logger",
        "brief": "Construct a new <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "loggerID",
            "type": "const char*",
            "type_name": "const char* loggerID",
            "default": null,
            "description": "A name for the logger - unless otherwise specified, files saved to the SD card will be named with the logger id and the date the file was started.",
            "direction": ""
          },
          {
            "name": "loggingIntervalMinutes",
            "type": "uint16_t",
            "type_name": "uint16_t loggingIntervalMinutes",
            "default": null,
            "description": "The frequency in minutes at which data should be logged",
            "direction": ""
          },
          {
            "name": "inputArray",
            "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
            "type_name": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>* inputArray",
            "default": null,
            "description": "A variableArray object instance providing data to be logged. This is NOT an array of variables, but an object of the variable array class.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_logger.html",
        "id": "abc41bfb031d896170c7675fa96a6b30c",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "Logger",
        "brief": "Construct a new <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The logger ID and logging interval must be specified before the logger object can be used.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_logger.html",
        "id": "acb668a9e186a25fbaad2e4af6d1ed00a",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~Logger",
        "brief": "Destroy the <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> object - takes no action.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Basic Logging Parameters",
        "id": "basic-logging-parameters",
        "description": "<p><a name=\"logger_basic_parameters\"></a> Public functions to get and set basic logging paramters</p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a35f366ba16bbbf20b76f4d35111b42b6",
              "include": null,
              "has_details": false,
              "type": "const char*",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_loggerID",
              "brief": "The logger id.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a5b52d33b8568a25b14fe376610d02d05",
              "include": null,
              "has_details": false,
              "type": "uint16_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_loggingIntervalMinutes",
              "brief": "The logging interval in minutes.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a8b89c411e844726f731ad83e3170dece",
              "include": null,
              "has_details": false,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_initialShortIntervals",
              "brief": "The initial number of samples to log at an interval of 1 minute for fast field verification.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a4c2e39dba376c4d943e1fb5c945228d0",
              "include": null,
              "has_details": false,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_SDCardSSPin",
              "brief": "Digital pin number on the mcu controlling the SD card slave select.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a03b3ed7db530304059d5f04884b42560",
              "include": null,
              "has_details": false,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_SDCardPowerPin",
              "brief": "Digital pin number on the mcu controlling SD card power.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a77c536c07049e5717ee7dc5d31899341",
              "include": null,
              "has_details": false,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_mcuWakePin",
              "brief": "Digital pin number on the mcu receiving interrupts to wake from deep-sleep.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a48ae587c7f04f1ed1d619faa36f9a0e0",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_wakePinMode",
              "brief": "The pin mode used for wake up on the clock alert pin.",
              "description": "<p>Must be either <code>INPUT</code> OR <code>INPUT_PULLUP</code> with an AVR board. On a SAM/D board <code>INPUT_PULLDOWN</code> is also an option. Optional with a default value of <code>INPUT_PULLUP</code>. The DS3231 has an active low interrupt, so the pull-up resistors should be enabled.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a84a289bec9cc6f542e403427fab1ec59",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_ledPin",
              "brief": "Digital pin number on the mcu used to output an alert that the logger is measuring.",
              "description": "<p>Expected to be connected to a LED.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "af42ccf041608f3d0f4728195aabcb7cc",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_buttonPin",
              "brief": "Digital pin number on the mcu receiving interrupts to enter testing mode.",
              "description": "<p>Expected to be connected to a user button.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "ac557c92cb4c07344ee9c9ab68e3b0526",
              "include": null,
              "has_details": false,
              "type": "const char*",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_samplingFeatureUUID",
              "brief": "The sampling feature UUID.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a6c5bffad49a23a2b4592250fdd999175",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setLoggerID",
              "brief": "Set the <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> ID.",
              "description": "<p>Unless otherwise specified, files saved to the SD card will be named with the logger id and the date the file was started.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "loggerID",
                  "type": "const char*",
                  "type_name": "const char* loggerID",
                  "default": null,
                  "description": "A pointer to the logger ID",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a48223721ea321687a1d7b3e79e64330e",
              "include": null,
              "has_details": true,
              "type": "const char*",
              "name": "getLoggerID",
              "brief": "Get the <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> ID.",
              "description": "",
              "return_value": "A pointer to the logger ID",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a507bbc2e985fe693a8ef453d6058426c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setLoggingInterval",
              "brief": "Set the logging interval in minutes.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "loggingIntervalMinutes",
                  "type": "uint16_t",
                  "type_name": "uint16_t loggingIntervalMinutes",
                  "default": null,
                  "description": "The frequency with which to update sensor values and write data to the SD card.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a4d953af109233fb875b3ee5aa4ed98c5",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "getLoggingInterval",
              "brief": "Get the Logging Interval.",
              "description": "",
              "return_value": "The logging interval in minutes",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a9a37a6c56e42de993eb7e77ce8578ab1",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSamplingFeatureUUID",
              "brief": "Set the universally unique identifier (UUID or GUID) of the sampling feature.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "samplingFeatureUUID",
                  "type": "const char*",
                  "type_name": "const char* samplingFeatureUUID",
                  "default": null,
                  "description": "A pointer to the sampling feature UUID",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a5e6163211c3b7204166aaa619074ce82",
              "include": null,
              "has_details": true,
              "type": "const char*",
              "name": "getSamplingFeatureUUID",
              "brief": "Get the Sampling Feature UUID.",
              "description": "",
              "return_value": "The sampling feature UUID",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a2521d1ea3009d87ffc05413d54844c24",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSDCardPwr",
              "brief": "Set a digital pin number (on the mcu) to use to control power to the SD card and activate it as an output pin.",
              "description": "<p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>This functionality is not tested!</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "SDCardPowerPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardPowerPin",
                  "default": null,
                  "description": "A digital pin number on the mcu controlling power to the SD card.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ad44ea6d82dcf0634f8d5814e5b1e5e29",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "turnOnSDcard",
              "brief": "Send power to the SD card by setting the SDCardPowerPin <code>HIGH</code>.",
              "description": "<p>Optionally waits for the card to &quot;settle.&quot; Has no effect if a pin has not been set to control power to the SD card.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "waitToSettle",
                  "type": "bool",
                  "type_name": "bool waitToSettle",
                  "default": "true",
                  "description": "True to add a short (6ms) delay between powering on the card and beginning initialization. Defaults to true.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a72c4cd3d510016ba209b208eb994c284",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "turnOffSDcard",
              "brief": "Cut power to the SD card by setting the SDCardPowerPin <code>LOW</code>.",
              "description": "<p>Optionally waits for the card to do &quot;housekeeping&quot; before cutting the power. Has o effect if a pin has not been set to control power to the SD card.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "waitForHousekeeping",
                  "type": "bool",
                  "type_name": "bool waitForHousekeeping",
                  "default": "true",
                  "description": "True to add a 1 second delay between to allow any on-chip writing to complete before cutting power. Defaults to true.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a2b1e437123936f3e7edd5fab8ec14c4c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSDCardSS",
              "brief": "Set a digital pin number for the slave select (chip select) of the SD card and activate it as an output pin.",
              "description": "<p>This over-writes the value (if any) given in the constructor. The pin mode of this pin will be set as <code>OUTPUT</code>.</p><p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "SDCardSSPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardSSPin",
                  "default": null,
                  "description": "The pin on the mcu connected to the slave select of the SD card.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a2dc67efee173cd909da71222218bb928",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setSDCardPins",
              "brief": "Set both pin numbers related to the SD card and activate them as output pins.",
              "description": "<p>These over-write the values (if any) given in the constructor. The pin mode of these pins will be set as <code>OUTPUT</code>.</p><p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "SDCardSSPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardSSPin",
                  "default": null,
                  "description": "The pin on the mcu connected to the slave select of the SD card.",
                  "direction": ""
                },
                {
                  "name": "SDCardPowerPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardPowerPin",
                  "default": null,
                  "description": "A digital pin number on the mcu controlling power to the SD card.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a21715a2882bf44ae142c2b8b27701b34",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setRTCWakePin",
              "brief": "Set digital pin number for the wake up pin used as an RTC interrupt and activate it in the given pin mode.",
              "description": "<p>This over-writes the value (if any) given in the constructor. Use a value of -1 to prevent the board from attempting to sleep. If using a SAMD board with the internal RTC, the value of the pin is irrelevant as long as it is positive.</p><p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This sets the pin mode but does NOT enable the interrupt!</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "mcuWakePin",
                  "type": "int8_t",
                  "type_name": "int8_t mcuWakePin",
                  "default": null,
                  "description": "The pin on the mcu to be used to wake the mcu from deep sleep.",
                  "direction": ""
                },
                {
                  "name": "wakePinMode",
                  "type": "uint8_t",
                  "type_name": "uint8_t wakePinMode",
                  "default": "INPUT_PULLUP",
                  "description": "The pin mode to be used for wake up on the clock alert pin. Must be either <code>INPUT</code> OR <code>INPUT_PULLUP</code>. Optional with a default value of <code>INPUT_PULLUP</code>. The DS3231 has an active low interrupt, so the pull-up resistors should be enabled.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a0dc4d4617505a104180c092b97a778f3",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setAlertPin",
              "brief": "Set the digital pin number to put out an alert that a measurement is being logged and activate it as an output pin.",
              "description": "<p>The pin mode of this pin will be set as <code>OUTPUT</code>. This is intended to be a pin with a LED on it so you can see the light come on when a measurement is being taken.</p><p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "ledPin",
                  "type": "int8_t",
                  "type_name": "int8_t ledPin",
                  "default": null,
                  "description": "The pin on the mcu to be held <code>HIGH</code> while sensor data is being collected and logged.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a45f88f29462d825f442cae07490672c7",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "alertOn",
              "brief": "Set the alert pin high.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a99301116348489ffd36d1002f1cf25b6",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "alertOff",
              "brief": "Set the alert pin low.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a09be7e2d452ae70f6296dcf90e5451c8",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setTestingModePin",
              "brief": "Set the digital pin number for an interrupt pin used to enter testing mode, activate that pin as the given input type, <strong>and</strong> attach the testing interrupt to it.",
              "description": "<p>Intended to be used for a pin attached to a button or other manual interrupt source.</p><p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p><p>Once in testing mode, the logger will attempt to connect the the internet and take 25 measurements spaced at 5 second intervals writing the results to the main output destination (ie, Serial). Testing mode cannot be entered while the logger is taking a scheduled measureemnt. No data is written to the SD card in testing mode.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "buttonPin",
                  "type": "int8_t",
                  "type_name": "int8_t buttonPin",
                  "default": null,
                  "description": "The pin on the mcu to listen to for a value-change interrupt.",
                  "direction": ""
                },
                {
                  "name": "buttonPinMode",
                  "type": "uint8_t",
                  "type_name": "uint8_t buttonPinMode",
                  "default": "INPUT",
                  "description": "The pin mode to be used for the button pin. Must be either <code>INPUT</code> OR <code>INPUT_PULLUP</code>. Optional with a default value of <code>INPUT</code>. Using <code>INPUT_PULLUP</code> will enable processor input resistors, while using <code>INPUT</code> will explicitly disable them. If your pin is externally pulled down or the button is a normally open (NO) switch with common (COM) connected to Vcc, like the EnviroDIY Mayfly), you should use the <code>INPUT</code> pin mode. Coversely, if your button connect to ground when activated, you should enable the processor pull-up resistors using <code>INPUT_PULLUP</code>.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a5f11ba8186ee9ee073c52bb4047176b2",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setLoggerPins",
              "brief": "Set the digital pin numbers and activate pin modes for the five pins of interest for the logger.",
              "description": "<p>Because this sets the pin mode, this function should only be called during the <code>setup()</code> or <code>loop()</code> portion of an Arduino program.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "mcuWakePin",
                  "type": "int8_t",
                  "type_name": "int8_t mcuWakePin",
                  "default": null,
                  "description": "The pin on the mcu to listen to for a value-change interrupt to wake from deep sleep. The mode of this pin will be set to <code>wakePinMode</code>.",
                  "direction": ""
                },
                {
                  "name": "SDCardSSPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardSSPin",
                  "default": null,
                  "description": "The pin on the mcu connected to the slave select of the SD card. The pin mode of this pin will be set as <code>OUTPUT</code>.",
                  "direction": ""
                },
                {
                  "name": "SDCardPowerPin",
                  "type": "int8_t",
                  "type_name": "int8_t SDCardPowerPin",
                  "default": null,
                  "description": "A digital pin number on the mcu controlling power to the SD card. The pin mode of this pin will be set as <code>OUTPUT</code>.",
                  "direction": ""
                },
                {
                  "name": "buttonPin",
                  "type": "int8_t",
                  "type_name": "int8_t buttonPin",
                  "default": null,
                  "description": "The pin on the mcu to listen to for a value-change interrupt to enter testing mode. The mode of this pin will be set to <code>buttonPinMode</code>.",
                  "direction": ""
                },
                {
                  "name": "ledPin",
                  "type": "int8_t",
                  "type_name": "int8_t ledPin",
                  "default": null,
                  "description": "The pin on the mcu to be held <code>HIGH</code> while sensor data is being collected and logged. The pin mode of this pin will be set as <code>OUTPUT</code>.",
                  "direction": ""
                },
                {
                  "name": "wakePinMode",
                  "type": "uint8_t",
                  "type_name": "uint8_t wakePinMode",
                  "default": "INPUT_PULLUP",
                  "description": "The pin mode to be used for wake up on the <code>mcuWakePin</code> (clock alert) pin. Must be either <code>INPUT</code> OR <code>INPUT_PULLUP</code>. Optional with a default value of <code>INPUT_PULLUP</code>. The DS3231 has an active low interrupt, so the pull-up resistors should be enabled.",
                  "direction": ""
                },
                {
                  "name": "buttonPinMode",
                  "type": "uint8_t",
                  "type_name": "uint8_t buttonPinMode",
                  "default": "INPUT",
                  "description": "The pin mode to be used for the button pin. Must be either <code>INPUT</code> OR <code>INPUT_PULLUP</code>. Optional with a default value of <code>INPUT</code>. Using <code>INPUT_PULLUP</code> will enable processor input resistors, while using <code>INPUT</code> will explicitly disable them. If your pin is externally pulled down or the button is a normally open (NO) switch with common (COM) connected to Vcc, like the EnviroDIY Mayfly), you should use the <code>INPUT</code> pin mode. Coversely, if your button is active when connected to ground, you should enable the processor pull-up resistors using <code>INPUT_PULLUP</code>.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Attached Variable Array Functions",
        "id": "attached-variable-array-functions",
        "description": "<p><a name=\"logger_internal_array\"></a> Public functions to get information about the attached variable array</p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a69469ecbce459f835d0d4b6aa838081d",
              "include": null,
              "has_details": false,
              "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_internalArray",
              "brief": "A pointer to the internal variable array instance.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a3c24b4a2b4f1b0ce2e7868692453da48",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setVariableArray",
              "brief": "Set the variable array object.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inputArray",
                  "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
                  "type_name": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>* inputArray",
                  "default": null,
                  "description": "A pointer to a variable array object instance. This is NOT an array of variables, but an object of the variable array class.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a76fc3bdbefe9ce63e46f5ab20487aadd",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "name": "getArrayVarCount",
              "brief": "Get the number of variables in the internal variable array object.",
              "description": "",
              "return_value": "The number of variables in the internal variable array object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aa61203408145be6ae33b82279f189db1",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getParentSensorNameAtI",
              "brief": "Get the name of the parent sensor of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The name of the parent sensor of that variable, if applicable.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "acdaf1859ec94a747f94cc4ca275b1ff5",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getParentSensorNameAndLocationAtI",
              "brief": "Get the name and pin location of the parent sensor of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The concatenated name and pin location of the parent sensor of that variable, if applicable.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a922e5fab8b42fa66a7117d4e4add85e8",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getVarNameAtI",
              "brief": "Get the name of the variable at the given position in the internal variable array object.",
              "description": "<p><a href=\"class_variable.html\" class=\"m-doc\">Variable</a> names must follow the controlled vocabulary documented here: <a href=\"http://vocabulary.odm2.org/variablename/\">http:/<wbr />/<wbr />vocabulary.odm2.org/<wbr />variablename/<wbr /></a></p>",
              "return_value": "The variable name",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ac129ac4015ac295d77f7f4d92d0e962c",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getVarUnitAtI",
              "brief": "Get the unit of the variable at the given position in the internal variable array object.",
              "description": "<p><a href=\"class_variable.html\" class=\"m-doc\">Variable</a> units must follow the controlled vocabulary documented here: <a href=\"http://vocabulary.odm2.org/units/\">http:/<wbr />/<wbr />vocabulary.odm2.org/<wbr />units/<wbr /></a></p>",
              "return_value": "The variable unit",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a1bacbc447501972bfc9974a1efabcedb",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getVarCodeAtI",
              "brief": "Get the customized code of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The variable code",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a0283acee6302155d26900ab17ab90bbc",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getVarUUIDAtI",
              "brief": "Get the UUID of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The variable UUID",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a3ed24ddc52a2acac3356ed562a88db5e",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getValueAtI",
              "brief": "Get the most recent value of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The value of the variable as a float.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aa237dc90d957020c48a14302ddc84ccd",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getValueStringAtI",
              "brief": "Get the most recent value of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The value of the variable as a string with the correct number of significant figures.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a8a629df1e90d6f0ef7b118f78b09eb01",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "formatValueStringAtI",
              "brief": "Get the string representing a particular value of the variable at the given position in the internal variable array object.",
              "description": "",
              "return_value": "The given value as a string with the correct number of significant figures.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "position_i",
                  "type": "uint8_t",
                  "type_name": "uint8_t position_i",
                  "default": null,
                  "description": "The position of the variable in the array.",
                  "direction": ""
                },
                {
                  "name": "value",
                  "type": "float",
                  "type_name": "float value",
                  "default": null,
                  "description": "The value to format.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Internet and Publisher Functions",
        "id": "internet-and-publisher-functions",
        "description": "<p><a name=\"logger_internet\"></a> Public functions for internet and dataPublishers</p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a5a0d6486e5e2ee68825c741122d3a47e",
              "include": null,
              "has_details": true,
              "type": "<a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a>*",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_logModem",
              "brief": "The internal modem instance.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The internal <a href=\"#a5a0d6486e5e2ee68825c741122d3a47e\" class=\"m-doc\">_<wbr />logModem</a> must be a POINTER not a reference because it is possible for no modem to be attached (and thus the pointer could be null). It is not possible to have a null reference.</p></aside>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a614e93c010b1263b40c74bf2ddd2017e",
              "include": null,
              "has_details": false,
              "type": "<a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a>*",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "dataPublishers",
              "brief": "An array of all of the attached data publishers.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a6c34020f1d197c679c4bbc842b1e2e27",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "attachModem",
              "brief": "Attach a <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> to the logger to provide internet access.",
              "description": "<p>See <a href=\"group__the__modems.html\" class=\"m-doc\">Modem and Internet Functions</a> for more information on how the modem must be set up before it is attached to the logger. You must include an ampersand to tie in the already created modem! If you do not attach a modem, no action will be taken to publish data.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "modem",
                  "type": "<a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a>&amp;",
                  "type_name": "<a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a>&amp; modem",
                  "default": null,
                  "description": "An instance of the <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> class",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ad2aebf45674c3c5e47aa303db7c52cd6",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "syncRTC",
              "brief": "Use the attahed <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> to synchronize the real-time clock with NIST time servers.",
              "description": "",
              "return_value": "True if clock synchronization was successful",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aa2d6df378ba7a9f7afac20ff7eeaf70e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "registerDataPublisher",
              "brief": "Register a data publisher object to receive data from the logger.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "publisher",
                  "type": "<a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a>*",
                  "type_name": "<a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a>* publisher",
                  "default": null,
                  "description": "A <a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a> object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ab657579e57f29ebe614ba73bc6ab112d",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "publishDataToRemotes",
              "brief": "Publish data to all registered data publishers.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a8eb8f6d36a30b7f4d4e80b0a133192e2",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendDataToRemotes",
              "brief": "Retained for backwards compatibility, use <a href=\"#ab657579e57f29ebe614ba73bc6ab112d\" class=\"m-doc\">publishDataToRemotes()</a> in new code.",
              "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000003\" class=\"m-doc\">Deprecated in v0.22.5</a></h4></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": "deprecated in v0.22.5",
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "SD Cards and Saving Data",
        "id": "sd-cards-and-saving-data",
        "description": "<p><a name=\"logger_sdcard\"></a> Public functions for logging data to an SD card</p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a35cb09421eab3122c0489cd88e57f8d6",
              "include": null,
              "has_details": false,
              "type": "SdFat",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "sd",
              "brief": "An internal reference to SdFat for SD card control.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a01618684d05a39696dc155566eba0a4e",
              "include": null,
              "has_details": false,
              "type": "File",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "logFile",
              "brief": "An internal reference to an SdFat file instance.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a9e86ced1966319d94334276f61d41b53",
              "include": null,
              "has_details": false,
              "type": "String",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_fileName",
              "brief": "An internal reference to the current filename.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a245218fa18260292c0ed47e77a342b5a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setFileName",
              "brief": "Set the file name, if you want to decide on it in advance.",
              "description": "<p>If the file name is set using this function, the same file name will be used for every single file created by the logger.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "fileName",
                  "type": "const char*",
                  "type_name": "const char* fileName",
                  "default": null,
                  "description": "The file name",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a0396c4ed48cf8c72211c8fca8f5683a8",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setFileName",
              "brief": "Set the file name, if you want to decide on it in advance.",
              "description": "<p>If the file name is set using this function, the same file name will be used for every single file created by the logger.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "fileName",
                  "type": "String&amp;",
                  "type_name": "String&amp; fileName",
                  "default": null,
                  "description": "The file name",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ab7b8db13230d88ef2382a5f8b2452ca5",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getFileName",
              "brief": "Get the current filename.",
              "description": "<p>This may be a single filename set using the setFileName(name) function or an auto-generated filename which is a concatenation of the logger id and the date when the file was started.</p>",
              "return_value": "The name of the file data is currently being saved to.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a4de271d0622bfd4b38acef2607c8aa64",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "printFileHeader",
              "brief": "Print a header out to a stream.",
              "description": "<p>This removes need to pass around very long string objects which can crash the logger</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream instance - expected to be an SdFat file - but could also be the &quot;main&quot; Serial port for debugging.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a9d6a8598a0ec7fff1e09836b75409fcb",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "printSensorDataCSV",
              "brief": "Print a comma separated list of volues of sensor data - including the time in the logging timezone - out over an Arduino stream.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream instance - expected to be an SdFat file - but could also be the &quot;main&quot; Serial port for debugging.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a3fda4b6a89c97789653af166fbf09d2c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "createLogFile",
              "brief": "Create a file on the SD card and set the created, modified, and accessed timestamps in that file.",
              "description": "<p>The filename will be the value specified in the function. If desired, a header will also be written to the file based on the variable information from the variable array. This can be used to force a logger to create a file with a secondary file name.</p>",
              "return_value": "True if the file was successfully created.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "filename",
                  "type": "String&amp;",
                  "type_name": "String&amp; filename",
                  "default": null,
                  "description": "The name of the file to create",
                  "direction": ""
                },
                {
                  "name": "writeDefaultHeader",
                  "type": "bool",
                  "type_name": "bool writeDefaultHeader",
                  "default": "false",
                  "description": "True to write a header to the file, default is false",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a88b4b9247c72d389653985a679067b74",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "createLogFile",
              "brief": "Create a file on the SD card and set the created, modified, and accessed timestamps in that file.",
              "description": "<p>The filename will be the one set by setFileName(String) or generated using the logger id and the date. If desired, a header will also be written to the file based on the variable information from the variable array.</p>",
              "return_value": "True if the file was successfully created.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "writeDefaultHeader",
                  "type": "bool",
                  "type_name": "bool writeDefaultHeader",
                  "default": "false",
                  "description": "True to write a header to the file, default is false",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a453249138181eb007a79a04b245fae6d",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "logToSD",
              "brief": "Open a file with the given name on the SD card and append the given line to the bottom of it.",
              "description": "<p>If a file with the specified name does not already exist, attempt to create the file and add a header to it. Set the modified and accessed timestamps of the file to the current time.</p>",
              "return_value": "True if the file was successfully accessed or created <em>and</em> data appended to it.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "filename",
                  "type": "String&amp;",
                  "type_name": "String&amp; filename",
                  "default": null,
                  "description": "The name of the file to write to",
                  "direction": ""
                },
                {
                  "name": "rec",
                  "type": "String&amp;",
                  "type_name": "String&amp; rec",
                  "default": null,
                  "description": "The line to be written to the file",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a898b5c598b90086303569c677e3ca2c3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "logToSD",
              "brief": "Open a file named with the current internal filename value and append the given line to the bottom of it.",
              "description": "<p>If a file with the with the intenal filename does not already exist, attempt to create a file with that name and add a header to it. Set the modified and accessed timestamps of the file to the current time.</p>",
              "return_value": "True if the file was successfully accessed or created <em>and</em> data appended to it.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "rec",
                  "type": "String&amp;",
                  "type_name": "String&amp; rec",
                  "default": null,
                  "description": "The line to be written to the file",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aada7ed61575988e4a2a45eaff25ccfb1",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "logToSD",
              "brief": "Open a file named with the current internal filename value and append a line to the bottom of it with the most recent values of all variables in the variable array as a comma separated list.",
              "description": "<p>If a file with the with the intenal filename does not already exist, attempt to create the file and add a header to it. Set the modified and accessed timestamps of the file to the current time.</p>",
              "return_value": "True if the file was successfully accessed or created <em>and</em> data appended to it.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a8761ee67d7c49d4c9acd2b42ec230b47",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "initializeSDCard",
              "brief": "Check if the SD card is available and ready to write to.",
              "description": "<p>We run this check before every communication with the SD card to prevent hanging.</p>",
              "return_value": "True if the SD card is ready",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a7f5510d561305dc1ac113d68201948d4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "generateAutoFileName",
              "brief": "Generate a file name from the logger id and the current date.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This cannot be called until <em>after</em> the RTC is started</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a1332f38090bfd732fd792ac7240451b9",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setFileTimestamp",
              "brief": "Set a timestamp on a file.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "fileToStamp",
                  "type": "File&amp;",
                  "type_name": "File&amp; fileToStamp",
                  "default": null,
                  "description": "The filename to change the timestamp of",
                  "direction": ""
                },
                {
                  "name": "stampFlag",
                  "type": "uint8_t",
                  "type_name": "uint8_t stampFlag",
                  "default": null,
                  "description": "The &quot;flag&quot; of the timestamp to change - should be T_CREATE, T_WRITE, or T_ACCESS",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a7521b29cde2c5848d895d7d9210c1249",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "openFile",
              "brief": "Open or creates a file, converting a string file name to a character file name.",
              "description": "",
              "return_value": "True if a file was successfully opened or created.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "filename",
                  "type": "String&amp;",
                  "type_name": "String&amp; filename",
                  "default": null,
                  "description": "The name of the file to open",
                  "direction": ""
                },
                {
                  "name": "createFile",
                  "type": "bool",
                  "type_name": "bool createFile",
                  "default": null,
                  "description": "True to create the file if it did not already exist",
                  "direction": ""
                },
                {
                  "name": "writeDefaultHeader",
                  "type": "bool",
                  "type_name": "bool writeDefaultHeader",
                  "default": null,
                  "description": "True to add a header to the file if it is created",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Clock and Timezones",
        "id": "clock-and-timezones",
        "description": "<p><a name=\"logger_sleep\"></a> Public Functions for sleeping the logger</p><h4 id=\"avr-sleep-modes\">AVR Sleep modes</h4><p>In the avr/sleep.h file, the call names of these 5 sleep modes are: SLEEP_MODE_IDLE - the least power savings SLEEP_MODE_ADC SLEEP_MODE_PWR_SAVE SLEEP_MODE_STANDBY SLEEP_MODE_PWR_DOWN - the most power savings</p><h4 id=\"samd21-sleep-modes\">SAMD21 Sleep Modes</h4><blockquote><p>The SAM D21/DA1 have two software-selectable sleep modes, Idle and Stand-by. In Idle mode, the CPU is stopped while all other functions can be kept running. In Stand-by mode, all clocks and functions are stopped, expect those selected to continue running. The device supports SleepWalking. This feature allows the peripheral to wake up from sleep based on predefined conditions, and thus allows the CPU to wake up only when needed, e.g., when a threshold is crossed or a result is ready. The Event System supports synchronous and asynchronous events, allowing peripherals to receive, react to and send events even in Stand-by mode.</p></blockquote><h4 id=\"samd51-sleep-modes\">SAMD51 Sleep Modes</h4><blockquote><p>The device can be set in a sleep mode. In sleep mode, the CPU is stopped and the peripherals are either active or idle, according to the sleep mode depth:</p><ul><li>Idle sleep mode:<ul><li>The CPU is stopped.</li><li>Synchronous clocks are stopped except when requested.</li><li>The logic is retained.</li></ul></li><li>Standby sleep mode:<ul><li>The CPU is stopped as well as the peripherals.</li><li>The logic is retained, and power domain gating can be used to fully or partially turn off the PDSYSRAM power domain.</li></ul></li><li>Hibernate sleep mode:<ul><li>PDCORESW power domain is turned OFF.</li><li>The backup power domain is kept powered to allow few features to run (RTC, 32KHz clock sources, and wake-up from external pins).</li><li>The PDSYSRAM power domain can be retained according to software configuration.</li></ul></li><li>Backup sleep mode:<ul><li>Only the backup domain is kept powered to allow few features to run (RTC, 32KHz clock sources, and wake-up from external pins).</li><li>The PDBKUPRAM power domain can be retained according to software configuration.</li></ul></li><li>Off sleep mode:<ul><li>The entire device is powered off.</li></ul></li></ul></blockquote><h5 id=\"bit-settings\">Bit Settings</h5><table class=\"m-table m-fullwidth m-flat\"><thead><tr><th>Value</th><th>Name</th><th>Definition</th></tr></thead><tbody><tr><td>0x0</td><td>Reserved</td><td>-</td></tr><tr><td>0x1</td><td>Reserved</td><td>-</td></tr><tr><td>0x2</td><td>IDLE</td><td>CPU, AHBx, and APBx clocks are OFF</td></tr><tr><td>0x3</td><td>Reserved</td><td>Reserved</td></tr><tr><td>0x4</td><td>STANDBY</td><td>All Clocks are OFF</td></tr><tr><td>0x5</td><td>HIBERNATE</td><td>Backup domain is ON as well as some PDRAMs</td></tr><tr><td>0x6</td><td>BACKUP</td><td>Only Backup domain is powered ON</td></tr><tr><td>0x7</td><td>OFF</td><td>All power domains are powered OFF</td></tr></tbody></table><aside class=\"m-note m-info\"><h4>Note</h4><p>For the SAMD51, hibernate, backup, and off modes cause a full system reset on wake. Because we don&#x27;t want to fully reset the device (and go back to the setup) on wake, the lowest power mode we can use is standby.</p></aside>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "affd5dfd55b3fd2b2473d13cf83226db5",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_loggerTimeZone",
              "brief": "The static timezone data is being logged in.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>All logger objects, if multiple are used, will be in the same timezone.</p></aside>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "ae23ccf6e15aed5e91b200beb06c59dc6",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_loggerRTCOffset",
              "brief": "The static difference between the timezone of the RTC and the timezone data is being logged in.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>All logger objects, if multiple are used, will be will have the same offset.</p></aside>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a3adb5f6b1c2b3ac98a6a829b7b4cfbab",
              "include": null,
              "has_details": false,
              "type": "<a href=\"classextended_watch_dog_a_v_r.html\" class=\"m-doc\">extendedWatchDogAVR</a>",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": false,
              "is_private": false,
              "name": "watchDogTimer",
              "brief": "A watch-dog implementation to use to reboot the system in case of lock-ups.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a03aa67e62a92ee47afb5f28a6d4d28c3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setRTClock",
              "brief": "Veify that the input value is sane and if so sets the real time clock to the given time.",
              "description": "",
              "return_value": "True if the input timestamp passes sanity checks <strong>and</strong> the clock has been successfully set.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "UTCEpochSeconds",
                  "type": "uint32_t",
                  "type_name": "uint32_t UTCEpochSeconds",
                  "default": null,
                  "description": "The number of seconds since 1970 in UTC.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a6a97d7cad5296f467f15fef37e026ad5",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "checkInterval",
              "brief": "Check if the CURRENT time is an even interval of the logging rate.",
              "description": "",
              "return_value": "True if the current time on the RTC is an even interval of the logging rate.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ac4836d098cb01be4ff7800304643e12b",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "checkMarkedInterval",
              "brief": "Check if the MARKED time is an even interval of the logging rate - That is the value saved in the static variable markedLocalEpochTime.",
              "description": "<p>This should be used in conjunction with <a href=\"#a93cb6cb163ca22b8089ad8d9794d6ff7\" class=\"m-doc\">markTime()</a> to ensure that all data outputs from a single data update session (SD, EnviroDIY, serial printing, etc) have the same timestamp even though the update routine may take several (or many) seconds.</p>",
              "return_value": "True if the marked time is an even interval of the logging rate.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ace2bea5c224cd938cc1d113cba9db108",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "systemSleep",
              "brief": "Put the mcu to sleep to conserve battery life and handle post-interrupt wake actions.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This DOES NOT sleep or wake the sensors!!</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a0e3f69559c6058e56edf2e8e5bb3e759",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setLoggerTimeZone",
              "brief": "Set the static timezone that the data will be logged in.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This must be set.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeZone",
                  "type": "int8_t",
                  "type_name": "int8_t timeZone",
                  "default": null,
                  "description": "The timezone data shold be saved to the SD card in. This need not be the same as the timezone of the real time clock.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aafcb44fb0b07f1b1bc2eadc77878d299",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getLoggerTimeZone",
              "brief": "Get the <a href=\"class_logger.html\" class=\"m-doc\">Logger</a> Time Zone.",
              "description": "",
              "return_value": "The timezone data is be saved to the SD card in. This is not be the same as the timezone of the real time clock.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a79aa89573ae15d30e41d145963f46cab",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setTimeZone",
              "brief": "Retained for backwards compatibility; use <a href=\"#a0e3f69559c6058e56edf2e8e5bb3e759\" class=\"m-doc\">setLoggerTimeZone(int8_<wbr />t\ntimeZone)</a> in new code.",
              "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000004\" class=\"m-doc\">Deprecated in v0.22.4</a></h4></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": "deprecated in v0.22.4",
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeZone",
                  "type": "int8_t",
                  "type_name": "int8_t timeZone",
                  "default": null,
                  "description": "The timezone data shold be saved to the SD card in. This need not be the same as the timezone of the real time clock.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a326286ce66995057d3fc4d2af942fe36",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getTimeZone",
              "brief": "Retained for backwards compatibility; use <a href=\"#aafcb44fb0b07f1b1bc2eadc77878d299\" class=\"m-doc\">getLoggerTimeZone()</a> in new code.",
              "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000005\" class=\"m-doc\">Deprecated in v0.22.4</a></h4></aside>",
              "return_value": "The timezone data is be saved to the SD card in. This is not be the same as the timezone of the real time clock.",
              "return_values": [],
              "exceptions": [],
              "deprecated": "deprecated in v0.22.4",
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a621cf4e0ac6e586a386446044624cd1b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setRTCTimeZone",
              "brief": "Set the static timezone that the RTC is programmed in.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>I VERY, VERY STRONGLY RECOMMEND SETTING THE RTC IN UTC</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "timeZone",
                  "type": "int8_t",
                  "type_name": "int8_t timeZone",
                  "default": null,
                  "description": "The timezone of the real-time clock (RTC)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a9764b9c516d10425a338c4f6ffccebc3",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getRTCTimeZone",
              "brief": "Get the timezone of the real-time clock (RTC).",
              "description": "",
              "return_value": "The timezone of the real-time clock (RTC)",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "afcee1baf5ec52fcc1793132e22ab11f3",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setTZOffset",
              "brief": "Set the offset between the built-in clock and the time zone where the data is being recorded.",
              "description": "<p>If your RTC is set in UTC and your logging timezone is EST, this should be -5. If your RTC is set in EST and your timezone is EST this does not need to be called.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "offset",
                  "type": "int8_t",
                  "type_name": "int8_t offset",
                  "default": null,
                  "description": "The difference between the timezone of the RTC and the saved data",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "af9806369ac3eb092b88544b5594860c5",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getTZOffset",
              "brief": "Get the offset between the built-in clock and the time zone where the data is being recorded.",
              "description": "",
              "return_value": "The offset between the built-in clock and the time zone where the data is being recorded.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a112543aafab41c7c5541d2403794e7f6",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getNowEpoch",
              "brief": "Get the current epoch time from the RTC (unix time, ie, the number of seconds from January 1, 1970 00:00:00) and correct it to the logging time zone.",
              "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000006\" class=\"m-doc\">Deprecated in v0.33.0</a></h4></aside>",
              "return_value": "The number of seconds from January 1, 1970 in the logging time zone.",
              "return_values": [],
              "exceptions": [],
              "deprecated": "deprecated in v0.33.0",
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a1a2fc7c1f28341ea476d9dd36dca2ce7",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getNowLocalEpoch",
              "brief": "Get the current epoch time from the RTC (unix time, ie, the number of seconds from January 1, 1970 00:00:00) and correct it to the logging time zone.",
              "description": "",
              "return_value": "The number of seconds from January 1, 1970 in the logging time zone.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a5154efeaacc708d891db98bbe95db7c2",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getNowUTCEpoch",
              "brief": "Get the current Universal Coordinated Time (UTC) epoch time from the RTC (unix time, ie, the number of seconds from January 1, 1970 00:00:00 UTC)",
              "description": "",
              "return_value": "The number of seconds from 1970-01-01T00:00:00Z0000",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a4a4084747cb541534776348f8991cce4",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setNowUTCEpoch",
              "brief": "Set the real time clock to the given number of seconds from January 1, 1970.",
              "description": "<p>The validity of the timestamp is not checked in any way! In practice, setRTClock(ts) should be used to avoid setting the clock to an obviously invalid value. The input value should be <em>in the timezone of the RTC.</em></p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "ts",
                  "type": "uint32_t",
                  "type_name": "uint32_t ts",
                  "default": null,
                  "description": "The number of seconds since 1970.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a8781623acb07ce4afb684308c52670b6",
              "include": null,
              "has_details": true,
              "type": "DateTime",
              "name": "dtFromEpoch",
              "brief": "Convert the number of seconds from January 1, 1970 to a DateTime object instance.",
              "description": "",
              "return_value": "The equivalent DateTime",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "epochTime",
                  "type": "uint32_t",
                  "type_name": "uint32_t epochTime",
                  "default": null,
                  "description": "The number of seconds since 1970.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a540c984bbd2ec0e456b5904192e856dc",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "formatDateTime_ISO8601",
              "brief": "Convert a date-time object into a ISO8601 formatted string.",
              "description": "<p>This assumes the supplied date/time is in the LOGGER&#x27;s timezone and adds the LOGGER&#x27;s offset as the time zone offset in the string.</p>",
              "return_value": "An ISO8601 formatted String.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "dt",
                  "type": "DateTime&amp;",
                  "type_name": "DateTime&amp; dt",
                  "default": null,
                  "description": "A DateTime object to convert",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ad8a51a4d38cce1c3d2405f38e996c8fa",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "formatDateTime_ISO8601",
              "brief": "Convert an epoch time (unix time) into a ISO8601 formatted string.",
              "description": "<p>This assumes the supplied date/time is in the LOGGER&#x27;s timezone and adds the LOGGER&#x27;s offset as the time zone offset in the string.</p>",
              "return_value": "An ISO8601 formatted String.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "epochTime",
                  "type": "uint32_t",
                  "type_name": "uint32_t epochTime",
                  "default": null,
                  "description": "The number of seconds since 1970.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a32614ef014dac3d16463b0f60173b94c",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isRTCSane",
              "brief": "Check that the current time on the RTC is within a &quot;sane&quot; range.",
              "description": "<p>To be sane the clock must be between 2020 and 2030.</p>",
              "return_value": "True if the current time on the RTC passes sanity range checking",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a4e8a32a9062f2afeecb0551315507430",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isRTCSane",
              "brief": "Check that a given epoch time (seconds since 1970) is within a &quot;sane&quot; range.",
              "description": "<p>To be sane the clock must be between 2020 and 2025.</p>",
              "return_value": "True if the given time passes sanity range checking.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "epochTime",
                  "type": "uint32_t",
                  "type_name": "uint32_t epochTime",
                  "default": null,
                  "description": "The epoch time to be checked.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a93cb6cb163ca22b8089ad8d9794d6ff7",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "markTime",
              "brief": "Set static variables for the date/time.",
              "description": "<p>This is needed so that all data outputs (SD, EnviroDIY, serial printing, etc) print the same time for updating the sensors - even though the routines to update the sensors and to output the data may take several seconds. It is not currently possible to output the instantaneous time an individual sensor was updated, just a single marked time. By custom, this should be called before updating the sensors, not after.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a668dc984eaef9d90a274555a9605bf9e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "wakeISR",
              "brief": "Set up the Interrupt Service Request for waking.",
              "description": "<p>In this case, we&#x27;re doing nothing, we just want the processor to wake. This must be a static function (which means it can only call other static functions.)</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Do-It-All Convience Functions",
        "id": "do-it-all-convience-functions",
        "description": "<p><a name=\"logger_conv\"></a> Convience functions to call several of the above functions</p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "ac2978f467ea7d56c644ce0df5476f704",
              "include": null,
              "has_details": false,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "markedLocalEpochTime",
              "brief": "The static &quot;marked&quot; epoch time for the local timezone.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a1cf0797f7f57883fe7e3c58d25d3e110",
              "include": null,
              "has_details": false,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "markedUTCEpochTime",
              "brief": "The static &quot;marked&quot; epoch time for UTC.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a9ec3dd21d0eb0350293dc0373b1d902e",
              "include": null,
              "has_details": false,
              "type": "volatile bool",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "isLoggingNow",
              "brief": "Internal flag set to true when logger is currently updating sensors or writing to the SD card.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "a64fdfb6c9a71b21aaefac691393b607a",
              "include": null,
              "has_details": false,
              "type": "volatile bool",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "isTestingNow",
              "brief": "Internal flag set to true when the logger is going through the &quot;testing mode&quot; routine.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_logger.html",
              "id": "ade9ad57a3cf5c7f7d22fabc743ece17f",
              "include": null,
              "has_details": false,
              "type": "volatile bool",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": false,
              "name": "startTesting",
              "brief": "Internal flag set to true with then logger should begin the &quot;testing mode&quot; routine when it finishes other operations.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "acfb1b3bbf1a197fd28e9f968ee30785a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "begin",
              "brief": "Set all pin levels and does initial communication with the real-time clock and SD card to prepare the logger for full functionality.",
              "description": "<p>This is used for operations that cannot happen in the logger constructor</p><ul><li>they must happen at run time, not at compile time.</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "loggerID",
                  "type": "const char*",
                  "type_name": "const char* loggerID",
                  "default": null,
                  "description": "An ID for the logger - will be used to auto-generate file names. Supplying a logger ID here will override any value given in the constructor.",
                  "direction": ""
                },
                {
                  "name": "loggingIntervalMinutes",
                  "type": "uint16_t",
                  "type_name": "uint16_t loggingIntervalMinutes",
                  "default": null,
                  "description": "The interval in minutes at which to log data. Supplying an interval here will override any value given in the constructor.",
                  "direction": ""
                },
                {
                  "name": "inputArray",
                  "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
                  "type_name": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>* inputArray",
                  "default": null,
                  "description": "A variableArray object instance providing data to be logged. This is NOT an array of variables, but an object of the variable array class. Supplying a variableArray object here will override any value given in the constructor.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ae06fedef09176ddc023e02927c30a6d7",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "begin",
              "brief": "Set all pin levels and does initial communication with the real-time clock and SD card to prepare the logger for full functionality.",
              "description": "<p>This is used for operations that cannot happen in the logger constructor</p><ul><li>they must happen at run time, not at compile time.</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "inputArray",
                  "type": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>*",
                  "type_name": "<a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a>* inputArray",
                  "default": null,
                  "description": "A variableArray object instance providing data to be logged. This is NOT an array of variables, but an object of the variable array class. Supplying a variableArray object here will override any value given in the constructor.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "aad628291154b62e38901798e39558839",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "begin",
              "brief": "Set all pin levels and does initial communication with the real-time clock and SD card to prepare the logger for full functionality.",
              "description": "<p>This is used for operations that cannot happen in the logger constructor</p><ul><li>they must happen at run time, not at compile time.</li></ul>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ae0b0964cea5a95b8af9eeac7e56db290",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "logData",
              "brief": "This is a one-and-done to log data.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If sleepBeforeReturning is set to false, the logger WILL NOT sleep between readings.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "sleepBeforeReturning",
                  "type": "bool",
                  "type_name": "bool sleepBeforeReturning",
                  "default": "true",
                  "description": "True to put the logger to sleep before returning from the function; optional with a default value of true.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "ae5b17bd6c05ab5fcbdce7db50c10716b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "logDataAndPublish",
              "brief": "This is a one-and-done to log data and publish the results to any associated publishers.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If sleepBeforeReturning is set to false, the logger WILL NOT sleep between readings.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "sleepBeforeReturning",
                  "type": "bool",
                  "type_name": "bool sleepBeforeReturning",
                  "default": "true",
                  "description": "True to put the logger to sleep before returning from the function; optional with a default value of true.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Sensor Testing Mode",
        "id": "sensor-testing-mode",
        "description": "<p><a name=\"logger_testing\"></a> Public functions for a &quot;sensor testing&quot; mode</p>",
        "members": [
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "a44bb5009d7022788d3d881075f98950c",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "testingMode",
              "brief": "Execute testing mode.",
              "description": "<p>In testing mode, the logger uses the <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a>, if attached, to connect to the internet. It then powers up all sensors tied to variable in the internal variable array. The logger then updates readings from all sensors 25 times with a 5 second wait in between. All results are output to the &quot;main&quot; output - ie Serial - and NOT to the SD card. After 25 measurements, the sensors are put to sleep, the modem is disconnected from the internet, and the logger goes back to sleep.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "sleepBeforeReturning",
                  "type": "bool",
                  "type_name": "bool sleepBeforeReturning",
                  "default": "true",
                  "description": "True to put the logger to sleep before returning from the function; optional with a default value of true.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_logger.html",
              "id": "abbadc1060ed23e55afc30473e672a8e3",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "testingISR",
              "brief": "The interrupt sevice routine called when an iterrupt is detected on the pin assigned for &quot;testing&quot; mode.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Logger",
        "class_logger.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Primary Object Classes",
        "group__base__classes.html"
      ],
      [
        "Logger",
        "class_logger.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "Logger::<wbr />"
  }
}