{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_a_n_bp_h",
    "name": "ANBpH",
    "url_base": "class_a_n_bp_h",
    "url": "class_a_n_bp_h.html",
    "include": [
      "&lt;src/sensors/ANBpH.h&gt;",
      "_a_n_bp_h_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__anb__ph.html\" class=\"m-doc\">ANB pH sensors</a>.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a5629ec136ed9fff6576c682a94c2f935",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "ANBpH",
        "brief": "Construct a new ANB pH object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>An RS485 adapter with integrated flow control is strongly recommended.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modbusAddress",
            "type": "byte",
            "type_name": "byte modbusAddress",
            "default": null,
            "description": "The modbus address of the sensor.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "An Arduino data stream for modbus communication. See <a href=\"page_arduino_streams.html\" class=\"m-doc\">notes</a> for more information on what streams can be used.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the ANB pH sensor. Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "powerPin2",
            "type": "int8_t",
            "type_name": "int8_t powerPin2",
            "default": null,
            "description": "The pin on the mcu controlling power to the RS485 adapter, if it is different from that used to power the sensor. Use -1 or omit if not applicable.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int8_t",
            "type_name": "int8_t enablePin",
            "default": "-1",
            "description": "The pin on the mcu controlling the direction enable on the RS485 adapter, if necessary; use -1 or omit if not applicable.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a64e1563677d5414cd38d6cd33837195b",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "ANBpH",
        "brief": "Construct a new ANB pH object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>An RS485 adapter with integrated flow control is strongly recommended.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modbusAddress",
            "type": "byte",
            "type_name": "byte modbusAddress",
            "default": null,
            "description": "The modbus address of the sensor.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "An Arduino data stream for modbus communication. See <a href=\"page_arduino_streams.html\" class=\"m-doc\">notes</a> for more information on what streams can be used.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the ANB pH sensor. Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "powerPin2",
            "type": "int8_t",
            "type_name": "int8_t powerPin2",
            "default": null,
            "description": "The pin on the mcu controlling power to the RS485 adapter, if it is different from that used to power the sensor. Use -1 or omit if not applicable.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int8_t",
            "type_name": "int8_t enablePin",
            "default": "-1",
            "description": "The pin on the mcu controlling the direction enable on the RS485 adapter, if necessary; use -1 or omit if not applicable.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a4f0477ab3b56b659ed92186b4d708c5b",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~ANBpH",
        "brief": "Destroy the ANB pH object - no action taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "ab7bc9209ec0ebd9e730ab85cee9a8e0c",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a5ce4690a856a1d14b3a8d259d7a2038a",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This sets pin modes on the <a href=\"class_sensor.html#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a>, adapter power, and adapter enable pins. It also sets the expected stream timeout for modbus and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. No sensor power is required. This will always return true.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "af22233b2cb08d9ec07fe7e8b70e93f92",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "wake",
        "brief": "Wake the sensor up, if necessary. Do whatever it takes to get a sensor in the proper state to begin a measurement.",
        "description": "<p>Verifies that the power is on and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. This also sets the <a href=\"class_sensor.html#a86541c88432508d6bc81a8fb41746e2e\" class=\"m-doc\">_<wbr />millisSensorActivated</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT include any wait for sensor readiness.</p></aside>",
        "return_value": "True if the wake function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a97c0c9250c60958233386d90ded28767",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "sleep",
        "brief": "Puts the sensor to sleep, if necessary.",
        "description": "<p>Does not take any action if not necessary.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT power down the sensor!</p></aside>",
        "return_value": "True if the sleep function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a65c8a1e4df9662c4c8fc55b4e1dd1dc0",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "startSingleMeasurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "True if the start measurement function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a2694040bc708513e411f3d9b8ea1aaa3",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a19811305878eabd0a06725647d1efabb",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "powerUp",
        "brief": "Turn on the sensor power, if applicable.",
        "description": "<p>Generally this is done by setting the <a href=\"class_sensor.html#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> <code>HIGH</code>. Also sets the <a href=\"class_sensor.html#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> timestamp and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "af96deafbb849a683f81e4a4bc1e9c565",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "powerDown",
        "brief": "Turn off the sensor power, if applicable.",
        "description": "<p>Generally this is done by setting the <a href=\"class_sensor.html#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> <code>LOW</code>. Also un-sets the <a href=\"class_sensor.html#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> timestamp (sets <a href=\"class_sensor.html#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "ae38d8428179a9ce3f1b598ccd2955c14",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isWarmedUp",
        "brief": "Check whether or not enough time has passed between the sensor receiving power and being ready to respond to logger commands.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>A true response does <em>NOT</em> indicate that the sensor will respond to commands, merely that the specified time for wake has passed.</p></aside><p>For the ANB pH sensor, this waits for both the power-on warm up and for a valid response from the sensor to a Modbus command.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The timing here is probably not very variable.</p></aside>",
        "return_value": "True indicates that enough time has passed that the sensor should be ready to respond to commands.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a4b2b34cc0afd3283f326ab8ab3dab285",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isStable",
        "brief": "Check whether or not enough time has passed between the sensor responding to any modbus command to giving a valid status code - which indicates that it&#x27;s ready to take a measurement.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The timing here is probably not very variable.</p></aside>",
        "return_value": "True indicates that enough time has passed that the sensor is ready to take a measurement.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a6bfd9dd04cc3057a9858dda055bac8e0",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isMeasurementComplete",
        "brief": "Check whether or not the pH sensor has completed a measurement.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>We override the default function because the amount of time required depends on the salinity, power &quot;style&quot; and the immersion sensor.</p></aside>",
        "return_value": "True indicates that the pH sensor has completed a measurement.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a1beab1b59276610c7dd23a3f13837788",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setSalinityMode",
        "brief": "Set the sensor salinity mode.",
        "description": "<p>Change this value to any of the following valid values: ANBSalinityMode::LOW_SALINITY, ANBSalinityMode::HIGH_SALINITY</p><aside class=\"m-note m-info\"><h4>Note</h4><p>Before scanning set the expected salinity.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>The salinity mode is set to low salinity by default.</p></aside>",
        "return_value": "True if the salinity mode was successfully set, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "newSalinityMode",
            "type": "ANBSalinityMode",
            "type_name": "ANBSalinityMode newSalinityMode",
            "default": null,
            "description": "The new salinity mode to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_n_bp_h.html",
        "id": "a3640299c8613f31da611ff7beb52c745",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "enableImmersionSensor",
        "brief": "Enable or disable the immersion sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The new immersion sensor status (immersion rule) is effective immediately. When power cycled, the immersion sensor defaults to enabled and the sensor goes into a low power mode.</p></aside><aside class=\"m-note m-default\"><h4>Remark</h4><p>The immersion sensor is enabled by default.</p></aside>",
        "return_value": "True if the immersion sensor status was successfully set, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "enable",
            "type": "bool",
            "type_name": "bool enable",
            "default": "true",
            "description": "True to enable the immersion sensor, false to disable",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "ANBpH",
        "class_a_n_bp_h.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "ANB pH Sensors",
        "group__sensor__anb__ph.html"
      ],
      [
        "ANBpH",
        "class_a_n_bp_h.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "ANBpH::<wbr />"
  }
}