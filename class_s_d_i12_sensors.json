{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_s_d_i12_sensors",
    "name": "SDI12Sensors",
    "url_base": "class_s_d_i12_sensors",
    "url": "class_s_d_i12_sensors.html",
    "include": [
      "&lt;src/sensors/SDI12Sensors.h&gt;",
      "_s_d_i12_sensors_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The main class for SDI-12 Sensors.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [
      {
        "kind": "class",
        "url": "class_campbell_clari_v_u_e10.html",
        "name": "CampbellClariVUE10",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__clarivue.html\" class=\"m-doc\">Campbell ClariVUE10 turbidity sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_campbell_rain_v_u_e10.html",
        "name": "CampbellRainVUE10",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__rainvue.html\" class=\"m-doc\">Campbell RainVUE10 precipitation sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_decagon5_t_m.html",
        "name": "Decagon5TM",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__fivetm.html\" class=\"m-doc\">Meter ECH2O soil moisture sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_decagon_c_t_d.html",
        "name": "DecagonCTD",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__decagon__ctd.html\" class=\"m-doc\">Decagon CTD-10 conductivity, temperature, and depth sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_decagon_e_s2.html",
        "name": "DecagonES2",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__es2.html\" class=\"m-doc\">Decagon ES-2 sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_in_situ_r_d_o.html",
        "name": "InSituRDO",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__insitu__rdo.html\" class=\"m-doc\">In-Situ RDO PRO-X dissolved oxygen sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_in_situ_troll_sdi12a.html",
        "name": "InSituTrollSdi12a",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__insitu__troll.html\" class=\"m-doc\">Insitu Level/Aqua TROLL pressure, temperature, and depth sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_meter_hydros21.html",
        "name": "MeterHydros21",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__hydros21.html\" class=\"m-doc\">Meter Hydros 21 conductivity, temperature, and depth sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_meter_teros11.html",
        "name": "MeterTeros11",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__teros11.html\" class=\"m-doc\">Meter Teros 11 sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_vega_puls21.html",
        "name": "VegaPuls21",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__vega__puls21.html\" class=\"m-doc\">VEGAPULS C 21 radar level sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_zebra_tech_d_opto.html",
        "name": "ZebraTechDOpto",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__dopto.html\" class=\"m-doc\">Zebra-Tech D-Opto dissolved oxygen sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      }
    ],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a03e43da6c2a26a6920f9ab9f38e3a02d",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "SDI12Sensors",
        "brief": "Construct a new SDI 12 Sensors object. This is only intended to be used within this library.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "SDI12address",
            "type": "char",
            "type_name": "char SDI12address",
            "default": null,
            "description": "The SDI-12 address of the sensor; can be a char, char*, or int.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the sensor Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "dataPin",
            "type": "int8_t",
            "type_name": "int8_t dataPin",
            "default": null,
            "description": "The pin on the mcu connected to the data line of the SDI-12 circuit.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;SDI12-Sensor&quot;",
            "description": "The name of the sensor. Defaults to &quot;SDI12-Sensor&quot;.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The number of variable results returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor is powered on and when it is ready to receive a wake command. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor receives a wake command and when it is able to return stable values. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time in ms between when a measurement is started and when the result value is available. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "extraWakeTime",
            "type": "int8_t",
            "type_name": "int8_t extraWakeTime",
            "default": "0",
            "description": "Any extra time needed by the sensor between the start of the break and when the sensor is ready to accept commands. This will be between 0 and 100ms per SDI-12 protocol.",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a4b4d71fd2eb14064548fc048ad6e9e97",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "SDI12Sensors",
        "brief": "Construct a new SDI 12 Sensors object. This is only intended to be used within this library.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "SDI12address",
            "type": "char*",
            "type_name": "char* SDI12address",
            "default": null,
            "description": "The SDI-12 address of the sensor; can be a char, char*, or int.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the sensor Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "dataPin",
            "type": "int8_t",
            "type_name": "int8_t dataPin",
            "default": null,
            "description": "The pin on the mcu connected to the data line of the SDI-12 circuit.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;SDI12-Sensor&quot;",
            "description": "The name of the sensor. Defaults to &quot;SDI12-Sensor&quot;.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The number of variable results returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor is powered on and when it is ready to receive a wake command. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor receives a wake command and when it is able to return stable values. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time in ms between when a measurement is started and when the result value is available. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "extraWakeTime",
            "type": "int8_t",
            "type_name": "int8_t extraWakeTime",
            "default": "0",
            "description": "Any extra time needed by the sensor between the start of the break and when the sensor is ready to accept commands. This will be between 0 and 100ms per SDI-12 protocol.",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a19395cc1ba78129e6ca4ab10711a47f7",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "SDI12Sensors",
        "brief": "Construct a new SDI 12 Sensors object. This is only intended to be used within this library.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "SDI12address",
            "type": "int",
            "type_name": "int SDI12address",
            "default": null,
            "description": "The SDI-12 address of the sensor; can be a char, char*, or int.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the sensor Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "dataPin",
            "type": "int8_t",
            "type_name": "int8_t dataPin",
            "default": null,
            "description": "The pin on the mcu connected to the data line of the SDI-12 circuit.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;SDI12-Sensor&quot;",
            "description": "The name of the sensor. Defaults to &quot;SDI12-Sensor&quot;.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The number of variable results returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor is powered on and when it is ready to receive a wake command. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor receives a wake command and when it is able to return stable values. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time in ms between when a measurement is started and when the result value is available. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "extraWakeTime",
            "type": "int8_t",
            "type_name": "int8_t extraWakeTime",
            "default": "0",
            "description": "Any extra time needed by the sensor between the start of the break and when the sensor is ready to accept commands. This will be between 0 and 100ms per SDI-12 protocol.",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a7f192b5650094867eedeb3f2cbb60513",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~SDI12Sensors",
        "brief": "Destroy the <a href=\"class_s_d_i12_sensors.html\" class=\"m-doc\">SDI12Sensors</a> object - no action taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a2cfae37b59f3419f5f4fc550e74ba6ae",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorVendor",
        "brief": "Get the stored sensor vendor name returned by a previously called SDI-12 get sensor information (aI!) command.",
        "description": "",
        "return_value": "The name of the sensor vendor as reported by the sensor itself.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a576264cf8b13c0f69fd29006b811d934",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorModel",
        "brief": "Get the stored sensor model name returned by a previously called SDI-12 get sensor information (aI!) command.",
        "description": "",
        "return_value": "The name of the sensor model as reported by the sensor itself.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "aac6c5aaadc225c66ac76cb8c6faa1c58",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorVersion",
        "brief": "Get the stored sensor version returned by a previously called SDI-12 get sensor information (aI!) command.",
        "description": "",
        "return_value": "The version of the sensor as reported by the sensor itself.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "adacdd954762334288fc53d38f972b37a",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorSerialNumber",
        "brief": "Get the stored sensor serial number returned by a previously called SDI-12 get sensor information (aI!) command.",
        "description": "",
        "return_value": "The serial number of the sensor as reported by the sensor itself.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a986f9a62f33702a55ef054904e49d526",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside><p>For SDI-12 sensors this returns a concatenation of the data pin number and the SDI-12 address.</p>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "aeae8e959ebbbe8d9430483fcbc2a0665",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "activate",
        "brief": "Calls the begin for the SDI-12 object to set all of the pre-scalers and timers.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "acd250a174a2c64c850e128368e4b18b5",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "deactivate",
        "brief": "Empties the SDI-12 object buffer and then ends it. The end function unsets all timer pre-scalers and <strong>&ndash;crucially&ndash;</strong> disables the interrupts on the SDI-12 data pin.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a61e6e45c5385550cc4f962fcc999d661",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This sets the pin modes for the data and power pin, sets the stream timeout time and value, and sets the status bit. This also sets the mcu&#x27;s timer prescaler values to clock the serial communication. After setting the pins and prescaler, the setup tests for a response from the sensor and calls the <a href=\"#a88cace021d28ce7824e892d0a06e9f16\" class=\"m-doc\">getSensorInfo()</a> function. <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> power <strong>is</strong> required.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "ad08877b1895e8805612ccce2077c3c7e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "startSingleMeasurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "True if the start measurement function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a4f031d54c802ccff01f8cef630ff6fa4",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a7f2df35554b4ea236b333f015cbc17ec",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "requestSensorAcknowledgement",
        "brief": "Send the SDI-12 &#x27;acknowledge active&#x27; command [address][!] to a sensor and confirm that the correct sensor responded.",
        "description": "",
        "return_value": "True if the correct SDI-12 sensor replied to the command.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a88cace021d28ce7824e892d0a06e9f16",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getSensorInfo",
        "brief": "Send the SDI-12 &#x27;info&#x27; command [address][I][!] to a sensor and parse the result into the vendor, model, version, and serial number.",
        "description": "",
        "return_value": "True if all expected information fields returned by the sensor.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a3173ed5cabc5e5b08560c739dda869e2",
        "include": null,
        "has_details": true,
        "type": "int8_t",
        "name": "startSDI12Measurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "The length of time the measurement is expected to take.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "isConcurrent",
            "type": "bool",
            "type_name": "bool isConcurrent",
            "default": "true",
            "description": "Whether to start a concurrent or standard measurement. Defaults to &#x27;true&#x27; for a concurrent measurement.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a27124d1ab864b50f643fdc4c7752d073",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getResults",
        "brief": "Gets the results of either a standard or a concurrent measurement.",
        "description": "",
        "return_value": "True if the full number of expected results was returned.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "verify_crc",
            "type": "bool",
            "type_name": "bool verify_crc",
            "default": null,
            "description": "True to verify the CRC of the results",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "ac62051c0d9551dc3bd0692634aaccfac",
        "include": null,
        "has_details": false,
        "type": "SDI12",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_SDI12Internal",
        "brief": "Internal reference to the SDI-12 object.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a15c553ed0cb9fa5b5f20234276cc0021",
        "include": null,
        "has_details": false,
        "type": "char",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_SDI12address",
        "brief": "Internal reference to the SDI-12 address.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s_d_i12_sensors.html",
        "id": "a218492deba7296d8d1bb99176b135e1b",
        "include": null,
        "has_details": false,
        "type": "int8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_extraWakeTime",
        "brief": "Extra wake time required for an SDI-12 sensor between the &quot;break&quot; and the time the command is sent.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "SDI12Sensors",
        "class_s_d_i12_sensors.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "SDI12Sensors",
        "class_s_d_i12_sensors.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "SDI12Sensors::<wbr />"
  }
}