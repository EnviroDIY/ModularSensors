{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_espressif_e_s_p32",
    "name": "EspressifESP32",
    "url_base": "class_espressif_e_s_p32",
    "url": "class_espressif_e_s_p32.html",
    "include": [
      "&lt;src/modems/EspressifESP32.h&gt;",
      "_espressif_e_s_p32_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for any breakout of the <a href=\"group__modem__esp32.html\" class=\"m-doc\">Espressif ESP32</a> wifi chip or ESP32 wifi/bluetooth chip that has been flashed with <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a>&#x27;s AT command firmware.",
    "description": "<aside class=\"m-note m-danger\"><h4>Warning</h4><p>Light sleep modes on the ESP32 may not function as expected (or at all).</p></aside>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_espressif.html",
        "name": "Espressif",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for almost any <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a> wifi or wifi/bluetooth chip that has been flashed with <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a>&#x27;s AT command firmware.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a100c014e40e3f2242450f334efa4edca",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "EspressifESP32",
        "brief": "Construct a new <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a> ESP32 object.",
        "description": "<p>The constructor initializes all of the provided member variables, constructs a <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> parent class with the appropriate timing for the module, calls the constructor for a TinyGSM modem on the provided modemStream, and creates a TinyGSM Client linked to the modem.</p><p>Should be set to a negative number if the modem should be continuously powered or the power cannot be controlled by the MCU.    \nShould be set to a negative number if the modem reset pin is not connected to the MCU.    This is the ESP&#x27;s <code>RSTB/DIO16</code> pin.</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"classlogger_modem.html#a207f7d1690cab74f5279f13b6efcd71d\" class=\"m-doc\">loggerModem::<wbr />loggerModem</a></p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modemStream",
            "type": "Stream*",
            "type_name": "Stream* modemStream",
            "default": null,
            "description": "The Arduino stream instance for serial communication.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The digital pin number of the mcu pin controlling power to the modem (active <code>HIGH</code>).",
            "direction": ""
          },
          {
            "name": "modemResetPin",
            "type": "int8_t",
            "type_name": "int8_t modemResetPin",
            "default": null,
            "description": "The digital pin number of the pin on the mcu attached the the hard or panic reset pin of the modem.",
            "direction": ""
          },
          {
            "name": "ssid",
            "type": "const char*",
            "type_name": "const char* ssid",
            "default": null,
            "description": "The wifi network ID.",
            "direction": ""
          },
          {
            "name": "pwd",
            "type": "const char*",
            "type_name": "const char* pwd",
            "default": null,
            "description": "The wifi network password, <strong>assuming WPA2</strong>.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "ab1d7ef7b410243830074c52fda55dfc2",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~EspressifESP32",
        "brief": "Destroy the <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a> ESP32 object - no action taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "aae78dabead01935243c04a79c95e2cc0",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemWake",
        "brief": "Wake up the modem.",
        "description": "<p>This sets pin modes, powers up the modem if necessary, sets time stamps, runs the specific modem&#x27;s wake function, tests for responsiveness to AT commands, and then re-runs the TinyGSM init() if necessary. If the modem fails to respond, this attempts a &quot;hard&quot; pin reset if possible.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#a93dc4dd4e9fce78c3a17e35e683092eb\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />WAKE</a> macro.</p><p>Set-up pin modes. Because the modem calls wake BEFORE the first setup, we must set the pin modes in the wake function.</p><p>Run the specific <a href=\"class_espressif.html#a3780681c28859cb9acfec5b71a0ee10c\" class=\"m-doc\">modemWakeFxn()</a>.</p><p>Check that the modem is responding to AT commands.</p><p>Hard reset is there&#x27;s no AT response.</p><p>Exit if we can&#x27;t hard reset.</p><p>Clean any junk out of the modem buffer.</p><p>Re-run the modem init, or setup if necessary. This will turn off echo, which often turns itself back on after a reset/power loss. This also checks the SIM card state.</p><p>If we run setup, take success value entirely from that.</p>",
        "return_value": "True if the modem is responsive and ready for action.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a8acde6aafce8c117e897130e99a852f0",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "connectInternet",
        "brief": "Wait for the modem to successfully register on the cellular network and then request that it establish either EPS or GPRS data connection.",
        "description": "<p>Power up, if necessary</p><p>Check if the modem was awake, wake it if not</p><p>wait</p>",
        "return_value": "True if EPS or GPRS data connection has been established. False if the modem was unresponsive, unable to register with the cellular network, or unable to establish a EPS or GPRS connection.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "maxConnectionTime",
            "type": "uint32_t",
            "type_name": "uint32_t maxConnectionTime",
            "default": "50000L",
            "description": "The maximum length of time in milliseconds to wait for network registration and data sconnection. Defaults to 50,000ms (50s).",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a32918df94634e3d4133d9d7cfa4fcc4f",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "disconnectInternet",
        "brief": "Detach from EPS or GPRS data connection and then deregister from the cellular network.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "aab6b14ad900a3e5ae92b3c176c06b126",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createClient",
        "brief": "Create a new client object using the default socket number.",
        "description": "",
        "return_value": "A new client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "aa452972c8c6936d8509939c3c5cb3dc5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteClient",
        "brief": "Attempts to delete a created TinyGsmClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a993493431a361662dc53857f0fa41e5b",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a7f0780d0c0117a48232193a66e759d99",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteSecureClient",
        "brief": "Attempts to delete a created TinyGsmSecureClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a59acad093eee6e86e9179652978207be",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "sslAuthMode",
            "type": "SSLAuthMode",
            "type_name": "SSLAuthMode sslAuthMode",
            "default": null,
            "description": "The SSL authentication mode to use",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          },
          {
            "name": "CAcertName",
            "type": "const char*",
            "type_name": "const char* CAcertName",
            "default": "nullptr",
            "description": "The name of the CA certificate to use",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": "nullptr",
            "description": "The name of the client certificate to use",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": "nullptr",
            "description": "The name of the client key to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a71be1b8dbe14a65dbadbb3bb752c030f",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "pskIdent",
            "type": "const char*",
            "type_name": "const char* pskIdent",
            "default": null,
            "description": "The pre-shared key identity",
            "direction": ""
          },
          {
            "name": "psKey",
            "type": "const char*",
            "type_name": "const char* psKey",
            "default": null,
            "description": "The pre-shared key",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a859a1a5e0ccef0380f997ed8aa2d968c",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "pskTableName",
            "type": "const char*",
            "type_name": "const char* pskTableName",
            "default": null,
            "description": "The pre-shared key table name - for modems that require PSK&#x27;s in a &quot;table&quot; format",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a3c840656b34a6d594b7f5af869686893",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "name": "getNISTTime",
        "brief": "Get the time from NIST via TIME protocol (rfc868).",
        "description": "<p>This would be much more efficient if done over UDP, but I&#x27;m doing it over TCP because I don&#x27;t have a UDP library for all the modems.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The return is the number of seconds since Jan 1, 1970 IN UTC</p></aside><p>Check for and bail if not connected to the internet.</p><p>Try up to 12 times to get a timestamp from NIST.</p><p>Make TCP connection.</p><p>Wait up to 5 seconds for a response.</p>",
        "return_value": "The number of seconds since Jan 1, 1970 IN UTC",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "acb2115ccc7cd86de40c6e1866039f9fc",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getModemSignalQuality",
        "brief": "Query the modem for the current signal quality and write the results to the supplied non-constant references.",
        "description": "",
        "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "rssi",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; rssi",
            "default": null,
            "description": "A reference to an int16_t which will be set with the received signal strength indicator",
            "direction": ""
          },
          {
            "name": "percent",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; percent",
            "default": null,
            "description": "A reference to an int16_t which will be set with the &quot;percent&quot; signal strength",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a3e689283cbb86617e92edd54f832a1d8",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getModemBatteryStats",
        "brief": "Query the modem for battery information and write the values to the supplied non-constant references.",
        "description": "",
        "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "chargeState",
            "type": "int8_t&amp;",
            "type_name": "int8_t&amp; chargeState",
            "default": null,
            "description": "A reference to an uint8_t which will be set with the current charge state (significance of value varies)",
            "direction": ""
          },
          {
            "name": "percent",
            "type": "int8_t&amp;",
            "type_name": "int8_t&amp; percent",
            "default": null,
            "description": "A reference to an int8_t which will be set with the current charge percent - this may or may not be a valid value depending on the module and breakout.",
            "direction": ""
          },
          {
            "name": "milliVolts",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; milliVolts",
            "default": null,
            "description": "A reference to an uint16_t which will be set with the current battery voltage in mV - this may or may not be a valid value depending on the module and breakout.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a44d34d82b74acd79b89c354363f99a21",
        "include": null,
        "has_details": true,
        "type": "float",
        "name": "getModemChipTemperature",
        "brief": "Get the current temperature provided by the modem module.",
        "description": "",
        "return_value": "The temperature in degrees Celsius",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a3c2058cebda58af9a58cdc820e5bc691",
        "include": null,
        "has_details": false,
        "type": "TinyGsm",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": false,
        "is_private": false,
        "name": "gsmModem",
        "brief": "Public reference to the TinyGSM modem.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a8f1ecb776a0b202f329c86279399eef3",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isInternetAvailable",
        "brief": "Check whether there is an active internet connection available.",
        "description": "",
        "return_value": "True if there is an active data connection to the internet.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "a9d48962483bf3f3fe0c9e960685c1725",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemSleepFxn",
        "brief": "Perform the parts of the modem sleep process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
        "description": "",
        "return_value": "True if the unique part of the sleep function ran successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "ada3e564275186f8ed20fd78ddd2f466b",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "extraModemSetup",
        "brief": "Perform the parts of the modem set up process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
        "description": "<p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#ace5bab37413b7bcc6954068b5c9db9e5\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />EXTRA_<wbr />SETUP</a> macro which runs the TinyGSM modem init() and client init() functions.</p>",
        "return_value": "True if the extra setup succeeded.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_espressif_e_s_p32.html",
        "id": "adc9d900e4a4596e85f1cde554a7f6e78",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isModemAwake",
        "brief": "Check if the modem was awake using all possible means.",
        "description": "<p>If possible, we always want to check if the modem was awake before attempting to wake it up. Most cellular modules are woken and put to sleep by identical pulses on a sleep or &quot;power&quot; pin. We don&#x27;t want to accidentally pulse an already on modem to off.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#af020f54b6e4a3bcaaf834107d37d8e2e\" class=\"m-doc\">MS_<wbr />IS_<wbr />MODEM_<wbr />AWAKE</a> macro.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>It&#x27;s possible that the status pin is on, but the modem is actually mid-shutdown. In that case, we&#x27;ll mistakenly skip re-waking it. This only applies to modules with a pulse wake (ie, non-zero wake time). For all modules that do pulse on, where possible I&#x27;ve selected a pulse time that is sufficient to wake but not quite long enough to put it to sleep and am using AT commands to sleep. This <em>should</em> keep everything lined up.</p></aside><p>If the wake up is one where a pin is held (0 wake time) and * that pin is defined, then we&#x27;re going to check the level of the * held pin as the indication of whether attempts were made to * wake the modem before entering the setup function.</p><p>If there&#x27;s a status pin, use that to determine if the modem is * awake.</p><p>If we can&#x27;t determine status by pin level, try checking if the * modem responds to AT commands.</p>",
        "return_value": "True if the modem is already awake.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "loggerModem",
        "classlogger_modem.html"
      ],
      [
        "Espressif",
        "class_espressif.html"
      ],
      [
        "EspressifESP32",
        "class_espressif_e_s_p32.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Espressif ESP32 and variants",
        "group__modem__esp32.html"
      ],
      [
        "EspressifESP32",
        "class_espressif_e_s_p32.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "EspressifESP32::<wbr />"
  }
}