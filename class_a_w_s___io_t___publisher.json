{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_a_w_s___io_t___publisher",
    "name": "AWS_IoT_Publisher",
    "url_base": "class_a_w_s___io_t___publisher",
    "url": "class_a_w_s___io_t___publisher.html",
    "include": [
      "&lt;src/publishers/AWS_IoT_Publisher.h&gt;",
      "_a_w_s___io_t___publisher_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_a_w_s___io_t___publisher.html\" class=\"m-doc\">AWS_<wbr />IoT_<wbr />Publisher</a> subclass of <a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a> for publishing data to AWS IoT Core using the MQTT protocol.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "classdata_publisher.html",
        "name": "dataPublisher",
        "brief": "The <a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a> class is a virtual class used by other publishers to distribute data online.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a7570efb9882236dc5f788bb6204f7f3b",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object with no members initialized.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a504084903383ac47fc59d40b3d230afe",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If a client is never specified, the publisher will attempt to create and use a client on a LoggerModem instance tied to the attached logger.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": true,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ae45540d11d430136258076b6b6278657",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ac0b0db5a84166093b4744536c490b261",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The inputs to this are the <strong>NAMES</strong> of the certificate <strong>files</strong> as they are stored on you modem module, not the content of the certificates.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file",
            "direction": ""
          },
          {
            "name": "samplingFeatureUUID",
            "type": "const char*",
            "type_name": "const char* samplingFeatureUUID",
            "default": null,
            "description": "The sampling feature UUID for the site on the Monitor My Watershed data portal.",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a02b752a9f84c603bf9e809d76a625190",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The inputs to this are the <strong>NAMES</strong> of the certificate <strong>files</strong> as they are stored on you modem module, not the content of the certificates.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a453df3685a902acdc33ea9e9bbe29f07",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AWS_IoT_Publisher",
        "brief": "Construct a new AWS IoT Core Publisher object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "samplingFeatureUUID",
            "type": "const char*",
            "type_name": "const char* samplingFeatureUUID",
            "default": null,
            "description": "The sampling feature UUID for the site on the Monitor My Watershed data portal.",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ada6be6c392a21d59307d1f704c70ca12",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~AWS_IoT_Publisher",
        "brief": "Destroy the AWS IoT Core Publisher object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a882f47dd9f20810fe61434efa0841646",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getEndpoint",
        "brief": "Get the destination for published data - generally the host name of the data receiver.",
        "description": "",
        "return_value": "The URL or HOST to receive published data",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ad7e7f026864c110332c729ad2911c35a",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setEndpoint",
        "brief": "Set the endpoint for your AWS IoT instance.",
        "description": "<p>Get the broker host/endpoint from AWS IoT Core &gt; Connect &gt; Domain Configurations. The endpoint will be something like &quot;xxx-ats.iot.your-region.amazonaws.com&quot;.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a4d08d6a3aa37baafcd442ec25e885049",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setCACertName",
        "brief": "Set the name of your certificate authority certificate file.",
        "description": "<p>You MUST have already uploaded your certificate to your modem. This will most likely be the Amazon Root CA 1 (RSA 2048 bit key) certificate. You can find Amazon&#x27;s current CA certificates here: <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/server-authentication.html\">https:/<wbr />/<wbr />docs.aws.amazon.com/<wbr />iot/<wbr />latest/<wbr />developerguide/<wbr />server-authentication.html</a>. Depending on your module, you may instead need a certificate chain file or to use Amazon&#x27;s older top-chain certificate (Starfield Services Root Certificate Authority - G2).</p><p>This is exactly the same CA certificate as you would use to upload to S3 (ie, the S3 Presigned Publisher). For supported modules you can use the AWS_IOT_SetCertificates sketch in the extras folder to upload your certificate.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a971eead5151f71c91dce77d5ceda46d3",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setClientCertName",
        "brief": "Set the name of your client certificate file.",
        "description": "<p>You MUST have already uploaded your certificate to your modem. You must download the certificate when you create it. Your certificate should be tied to a security policy that allows connection, publishing, and subscribing by thing name.</p><p>For supported modules you can use the AWS_IOT_SetCertificates sketch in the extras folder to upload your certificate.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "aca0d7d27a2913e976e58b4d28939b349",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setClientKeyName",
        "brief": "Set the name of your client private key file.",
        "description": "<p>You MUST have have already uploaded your certificate to your modem. You must download the certificate when you create it. Your certificate should be tied to a security policy that allows connection, publishing, and subscribing by thing name.</p><p>For supported modules you can use the AWS_IOT_SetCertificates sketch in the extras folder to upload your certificate.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a7a20da6606347471adf7fb61bdaa64a3",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setAWSIoTParams",
        "brief": "Sets all of the AWS IoT Core parameters.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a2d85d587a06c714a7a1e484c41b2e898",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setDataPublishTopic",
        "brief": "Set the topic to use for publishing data.",
        "description": "<p>If not specified, the topic &quot;{LoggerID}/{SamplingFeatureUUID}&quot; will be used.</p><p>Make sure you have IAM policies set up to allow your device to publish to the specified topic!</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ae9bd9ec3b9ec5885a1a488ebaa0727b5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setMetadataPublishTopic",
        "brief": "Set the topic to use for publishing metadata.",
        "description": "<p>If not specified, the topic &quot;{LoggerID}/metadata&quot; will be used for the main logger metadata. For each variable, the variable number will be appended to the topic (ie, &quot;{LoggerID}/metadata/variable01&quot;).</p><p>Make sure you have IAM policies set up to allow your device to publish to the specified topics!</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "abbffbf11fcbfea51f4fdf92fc3ccf9ac",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "addSubTopic",
        "brief": "Adds a topic to subscribe to.",
        "description": "<p>When publishing data, the publisher will subscribe to the topic.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>This is <strong>ABSOLUTELY NOT</strong> intended for handling any messages except those received over a very brief connection. The MQTT client only stays open briefly while publishing messages! (Until you call <a href=\"#aef8cff5600af465bc99388ac11533473\" class=\"m-doc\">AWS_IoT_Publisher::<wbr />closeConnection()</a> or until the time has exceeded <a href=\"_mod_sensor_config_8h.html#ae5a5d4f2ec4419d8e6e3fc38b4109029\" class=\"m-doc\">MS_<wbr />AWS_<wbr />IOT_<wbr />MAX_<wbr />CONNECTION_<wbr />TIME</a>, whichever comes first). This publisher will completely <strong>BLOCK</strong> all further action while waiting for messages. The connection is closed at all other times and the board is in deep sleep. This will only be good for receiving <em>retained</em> messages on topics (that would come through immediately after subscribing) or for receiving messages that are published as an immediate reaction to publishing data.</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>The publisher will only subscribe to up to <a href=\"_mod_sensor_config_8h.html#aa7d06086fa60efbe1574808c8c6df29d\" class=\"m-doc\">MS_<wbr />AWS_<wbr />IOT_<wbr />PUBLISHER_<wbr />SUB_<wbr />COUNT</a> topics.</p><p>The publisher will not directly unsubscribe from topics, but all subscriptions are cleared at disconnect because we use a clean session.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic to subscribe to",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a980986e386e03191609c041cdc95fb67",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "removeSubTopic",
        "brief": "Removes a topic from the subscription list.",
        "description": "<p>I don&#x27;t expect this to be used, but I&#x27;m adding it just in case.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The publisher will not directly unsubscribe from topics, but all subscriptions are cleared at disconnect because we use a clean session.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic to remove from the subscription list",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a58b2dede45a7db7dffeffd6b5b7bf97c",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "addPublishRequest",
        "brief": "Adds a topic to subscribe to.",
        "description": "<p>When publishing data, the publisher will subscribe to the topic.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>This is <strong>ABSOLUTELY NOT</strong> intended for handling any messages except those received over a very brief connection. The MQTT client only stays open briefly while publishing messages! (Until you call <a href=\"#aef8cff5600af465bc99388ac11533473\" class=\"m-doc\">AWS_IoT_Publisher::<wbr />closeConnection()</a> or until the time has exceeded <a href=\"_mod_sensor_config_8h.html#ae5a5d4f2ec4419d8e6e3fc38b4109029\" class=\"m-doc\">MS_<wbr />AWS_<wbr />IOT_<wbr />MAX_<wbr />CONNECTION_<wbr />TIME</a>, whichever comes first). This publisher will completely <strong>BLOCK</strong> all further action while waiting for messages. The connection is closed at all other times and the board is in deep sleep. This will only be good for receiving <em>retained</em> messages on topics (that would come through immediately after subscribing) or for receiving messages that are published as an immediate reaction to publishing data.</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>The publisher will only subscribe to up to <a href=\"_mod_sensor_config_8h.html#aa7d06086fa60efbe1574808c8c6df29d\" class=\"m-doc\">MS_<wbr />AWS_<wbr />IOT_<wbr />PUBLISHER_<wbr />SUB_<wbr />COUNT</a> topics.</p><p>The publisher will not directly unsubscribe from topics, but all subscriptions are cleared at disconnect because we use a clean session.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic to publish to. This should be a static value. If you wish to change the topic, remove the old topic and add a new one.",
            "direction": ""
          },
          {
            "name": "contentGetrFxn",
            "type": "String(*)(void)",
            "type_name": "String(*)(void) contentGetrFxn",
            "default": null,
            "description": "A function to call to get the content to publish. The function should return a pointer to a char array.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a4224ab29f4960d6ef66d87e008dfc50f",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "removePublishRequest",
        "brief": "Removes a topic from the publish list.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "topic",
            "type": "const char*",
            "type_name": "const char* topic",
            "default": null,
            "description": "The topic to remove from the publish list",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "aaa6a6a625f1d50cc069995bc2216c8f0",
        "include": null,
        "has_details": true,
        "type": "PubSubClient&amp;",
        "name": "setCallback",
        "brief": "A passthrough to the PubSubClient setCallback function; sets a function to call back when data is received on any of the subscribed topics.",
        "description": "<p>This must be a static or main level function! It <strong>cannot</strong> be a member function of a class! Your callback function should call this publishers <a href=\"#aef8cff5600af465bc99388ac11533473\" class=\"m-doc\">AWS_IoT_Publisher::<wbr />closeConnection()</a> method immediately after getting your desired response to stop the publisher from waiting for more messages.</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>This is <strong>ABSOLUTELY NOT</strong> intended for handling any messages except those received over a very brief connection. The MQTT client only stays open briefly while publishing messages! (Until you call <a href=\"#aef8cff5600af465bc99388ac11533473\" class=\"m-doc\">AWS_IoT_Publisher::<wbr />closeConnection()</a> or until the time has exceeded <a href=\"_mod_sensor_config_8h.html#ae5a5d4f2ec4419d8e6e3fc38b4109029\" class=\"m-doc\">MS_<wbr />AWS_<wbr />IOT_<wbr />MAX_<wbr />CONNECTION_<wbr />TIME</a>, whichever comes first). This publisher will completely <strong>BLOCK</strong> all further action while waiting for messages. The connection is closed at all other times and the board is in deep sleep. This will only be good for receiving <em>retained</em> messages on topics (that would come through immediately after subscribing) or for receiving messages that are published as an immediate reaction to publishing data.</p></aside>",
        "return_value": "A reference to the underlying pubsubclient instance; can be used to chain actions.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "MQTT_CALLBACK_SIGNATURE",
            "type_name": "MQTT_CALLBACK_SIGNATURE",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "aef8cff5600af465bc99388ac11533473",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "closeConnection",
        "brief": "Calling this function tells the AWS IoT Publisher to immediately close its connection.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a36eebc5d96599826726016f8fd83fd7d",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the client and logger.",
        "description": "<p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "samplingFeatureUUID",
            "type": "const char*",
            "type_name": "const char* samplingFeatureUUID",
            "default": null,
            "description": "The sampling feature UUID for the site on the Monitor My Watershed data portal.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "aeb972ebcf4aeb7287b2db2309f0d2edc",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the client and logger.",
        "description": "<p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a41c55527f5a6b5aaaa37720f671f2141",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the logger but not attaching a client.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If a client is never specified, the publisher will attempt to create and use a client on a LoggerModem instance tied to the attached logger.</p></aside><p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file",
            "direction": ""
          },
          {
            "name": "samplingFeatureUUID",
            "type": "const char*",
            "type_name": "const char* samplingFeatureUUID",
            "default": null,
            "description": "The sampling feature UUID for the site on the Monitor My Watershed data portal.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a81efba013b47745a73f6a39a9f7992a5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the logger but not attaching a client.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If a client is never specified, the publisher will attempt to create and use a client on a LoggerModem instance tied to the attached logger.</p></aside><p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "awsIoTEndpoint",
            "type": "const char*",
            "type_name": "const char* awsIoTEndpoint",
            "default": null,
            "description": "The endpoint for your AWS IoT instance",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": null,
            "description": "The name of your client certificate file",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": null,
            "description": "The name of your client private key file",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "ab095dd8ca38044aba7c6700829d43b0d",
        "include": null,
        "has_details": true,
        "type": "int16_t",
        "name": "publishData",
        "brief": "Utilize an attached modem to open a SSL connection to AWS IoT Core and publish data over that connection.",
        "description": "<p>This depends on an internet connection already having been made and a client being available.</p>",
        "return_value": "The PubSubClient status code of the response.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "outClient",
            "type": "Client*",
            "type_name": "Client* outClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "forceFlush",
            "type": "bool",
            "type_name": "bool forceFlush",
            "default": "false",
            "description": "Ask the publisher to flush buffered data immediately.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a02145ca895f5b784663b6a02541d5386",
        "include": null,
        "has_details": true,
        "type": "int16_t",
        "name": "publishMetadata",
        "brief": "Open a socket to the correct receiver and send out <em>metadata</em> about the current logger setup.",
        "description": "<p>This is to be used only when the logger is starting up! As the metadata doesn&#x27;t generally change after start up, there&#x27;s no reason to call this function any other time. There is no sensor data included in this metadata! If there is metadata that has to be included with each data post, that should be included in the publishData function. Because there is no sensor data included in this metadata and it&#x27;s only to be called at boot, there&#x27;s no <code>forceFlush</code> option for this function.</p><p>This depends on an internet connection already having been made and a client being available.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does <em>not</em> have to be implemented for each publisher! If it is not implemented, it will return 0.</p></aside>",
        "return_value": "The result of publishing data. May be an http response code or a result code from PubSubClient.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "outClient",
            "type": "Client*",
            "type_name": "Client* outClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a771a9bb250ffea8fcc0033a1a7436874",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createClient",
        "brief": "Use the connected base logger&#x27;s logger modem and underlying TinyGSM instance to create a new client for the publisher.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This does <em>NOT</em> override any client set by the constructor/begin/setClient functions. If you set an external client by any of those methods, this function should not be called. It is protected to prevent being called by external code.</p><p>The default implementation of this function creates an insecure client. Publishers that require SSL must re-implement this function.</p></aside>",
        "return_value": "A pointer to an Arduino client instance",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a9b82c4bb577232445f8526ae216eafc7",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteClient",
        "brief": "Delete a created client. We need to pass this through to avoid a memory leak because we cannot delete from the pointer because the destructor for a client in the Arduino core isn&#x27;t virtual.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a94fa499064beedd90a5bdf12adbc802d",
        "include": null,
        "has_details": false,
        "type": "const int",
        "is_constexpr": false,
        "is_static": true,
        "is_protected": true,
        "is_private": false,
        "name": "mqttPort",
        "brief": "The MQTT port; this is always 8883 for AWS IoT Core MQTT connections.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a32e2f2158f7f28de04db97800ff16fda",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": true,
        "is_protected": true,
        "is_private": false,
        "name": "samplingFeatureTag",
        "brief": "The JSON feature UUID tag.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_a_w_s___io_t___publisher.html",
        "id": "a8007ac4e6d887534d88743d8cb51ab52",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": true,
        "is_protected": true,
        "is_private": false,
        "name": "timestampTag",
        "brief": "The JSON feature timestamp tag.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "dataPublisher",
        "classdata_publisher.html"
      ],
      [
        "AWS_IoT_Publisher",
        "class_a_w_s___io_t___publisher.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Supported Data Endpoints",
        "group__the__publishers.html"
      ],
      [
        "AWS_IoT_Publisher",
        "class_a_w_s___io_t___publisher.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "AWS_<wbr />IoT_<wbr />Publisher::<wbr />"
  }
}