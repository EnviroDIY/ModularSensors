{
  "version": "1.12.0",
  "compound": {
    "kind": "class",
    "id": "class_sensirion_s_h_t4x",
    "name": "SensirionSHT4x",
    "url_base": "class_sensirion_s_h_t4x",
    "url": "class_sensirion_s_h_t4x.html",
    "include": [
      "&lt;src/sensors/SensirionSHT4x.h&gt;",
      "_sensirion_s_h_t4x_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__sht4x.html\" class=\"m-doc\">Sensirion SHT4x</a>.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "aeb3d3f532654f1ded85f8325b25dabb2",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "SensirionSHT4x",
        "brief": "Construct a new <a href=\"class_sensirion_s_h_t4x.html\" class=\"m-doc\">SensirionSHT4x</a> object using a secondary <em>hardware</em> I2C instance.",
        "description": "<p>This is only applicable to SAMD boards that are able to have multiple hardware I2C ports in use via SERCOMs.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>It is only possible to connect <em>one</em> SHT4x at a time on a single I2C bus. Only the 0x44 addressed version is supported.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "theI2C",
            "type": "TwoWire*",
            "type_name": "TwoWire* theI2C",
            "default": null,
            "description": "A TwoWire instance for I2C communication. Due to the limitations of the Arduino core, only a hardware I2C instance can be used. For an AVR board, there is only one I2C instance possible and this form of the constructor should not be used. For a SAMD board, this can be used if a secondary I2C port is created on one of the extra SERCOMs.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "<p>The pin on the mcu controlling power to the Sensirion SHT4x. Use -1 if it is continuously powered.</p><ul><li>The SHT4x requires a 3.3V power source</li></ul>",
            "direction": ""
          },
          {
            "name": "useHeater",
            "type": "bool",
            "type_name": "bool useHeater",
            "default": "true",
            "description": "Whether or not to run the internal heater of the SHT4x when shutting down the sensor; optional with a default value of true. The internal heater is designed to remove condensed water from the sensor - which will make the sensor stop responding to air humidity changes - and to allow creep-free operation in high humidity environments. The longest the internal heater can run at a time is 1s and the maximum duty load is 5%. Running only 1s per measurment cycle probably isn&#x27;t enough to help with more than very minimal condensation, but it&#x27;s probably the best we can easily do.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "a1cfd1e1e9743827b1d373c7e8ad0d393",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "SensirionSHT4x",
        "brief": "Construct a new <a href=\"class_sensirion_s_h_t4x.html\" class=\"m-doc\">SensirionSHT4x</a> object using the primary hardware I2C instance.",
        "description": "<p>Because this is I2C and has only 1 possible address (0x44), we only need the power pin.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>It is only possible to connect <em>one</em> SHT4x at a time on a single I2C bus. Only the 0x44 addressed version is supported.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": true,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "<p>The pin on the mcu controlling power to the Sensirion SHT4x. Use -1 if it is continuously powered.</p><ul><li>The SHT4x requires a 3.3V power source</li></ul>",
            "direction": ""
          },
          {
            "name": "useHeater",
            "type": "bool",
            "type_name": "bool useHeater",
            "default": "true",
            "description": "Whether or not to run the internal heater of the SHT4x when shutting down the sensor; optional with a default value of true. The internal heater is designed to remove condensed water from the sensor - which will make the sensor stop responding to air humidity changes - and to allow creep-free operation in high humidity environments. The longest the internal heater can run at a time is 1s and the maximum duty load is 5%. Running only 1s per measurment cycle probably isn&#x27;t enough to help with more than very minimal condensation, but it&#x27;s probably the best we can easily do.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "afb548d016a1d2853b548ba4f1690c5d9",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~SensirionSHT4x",
        "brief": "Destroy the <a href=\"class_sensirion_s_h_t4x.html\" class=\"m-doc\">SensirionSHT4x</a> object - no action needed.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "a27c037d13a413f99a677128d5f80493a",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Report the I2C address of the SHT4x - which is always 0x44.",
        "description": "",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "a00b64e6b77df9f77446252f658746544",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This sets the <a href=\"class_sensor.html#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> mode, begins the Wire library (sets pin levels and modes for I2C), and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. No sensor power is required.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "aa5beb8b2e79a6c39ad4a4adab7be181e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensirion_s_h_t4x.html",
        "id": "aefd38f9592e741da3077dcf9c06a5ac2",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "sleep",
        "brief": "Puts the sensor to sleep, if necessary.",
        "description": "<p>Does not take any action if not necessary.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT power down the sensor!</p></aside><p>If opted for, we run the SHT4x&#x27;s internal heater for 1s before going to sleep.</p>",
        "return_value": "True if the sleep function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "SensirionSHT4x",
        "class_sensirion_s_h_t4x.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Sensirion SHT40, SHT41, and SHT45",
        "group__sensor__sht4x.html"
      ],
      [
        "SensirionSHT4x",
        "class_sensirion_s_h_t4x.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "SensirionSHT4x::<wbr />"
  }
}