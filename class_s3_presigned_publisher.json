{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_s3_presigned_publisher",
    "name": "S3PresignedPublisher",
    "url_base": "class_s3_presigned_publisher",
    "url": "class_s3_presigned_publisher.html",
    "include": [
      "&lt;src/publishers/S3PresignedPublisher.h&gt;",
      "_s3_presigned_publisher_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_s3_presigned_publisher.html\" class=\"m-doc\">S3PresignedPublisher</a> subclass of <a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a> is for publishing data to S3 over a pre-signed URL.",
    "description": "<p>Publishing data directly to S3 requires you to use a <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html\">SigV4(a)</a> signature in every request. Generating that URL signature is complex and requires communicating back and forth with temporary connections to get an access key and then using a series of calculations to get a final signing key. AWS support <em>strongly</em> recommends you don&#x27;t try to generate this without one of their SDKs. There is a <a href=\"https://github.com/aws/aws-iot-device-sdk-embedded-C/tree/main\">embedded C SDK</a> for AWS with a <a href=\"https://github.com/aws/SigV4-for-AWS-IoT-embedded-sdk\">SigV4 component library</a> that can be used in embedded systems or with FreeRTOS, but there is not an Arduino port of it, nor do many Arduino boards meet the memory requirements for it.</p><p>If you cannot generate your own SigV4 signed request, you can use a <em>pre-signed URL</em> which is valid for a short time to access a single object (file) in a single S3 bucket. The pre-signed URL will give you the same permissions to the S3 object as the generator of the URL. There are a few caveats to using a pre-signed URL:</p><ul><li>The URL is only valid for a single object (file). While you can reuse the URL, repeatedly using the same URL will over-write the same file it will not create a new one.<ul><li>To write to a new file, you need a new URL.</li></ul></li><li>The URL is only valid for a short time, usually only a few minutes.<ul><li>The absolute maximum time a pre-signed URL could be valid for is 7 days, but they&#x27;re frequently only valid for a few minutes or hours at most.</li></ul></li></ul><p>So, to publish to S3, this publisher provides a few options:</p><ul><li>You can provide a set URL and set filename to use for the post. The set file will be read from the SD card. The exact URL will be used for the post. If you do not re-call the functions to update the URL and filename externally, the same S3 object will be over-written until the URL expires.</li><li>You can provide a set filename to use for the post and a function to call to get a new pre-signed URL. The set file will be read from the SD and the function will be called to generate a new URL based on that provided filename. If you do not call the function to update the filename externally, the same S3 object will be over-written with each post because the filename has not changed. But there should be no URL expiration because a new pre-signed URL will be generated each time.</li><li>You can provide a function to call to get a new pre-signed URL and no filename. A filename will be automatically generated based on the logger ID and the last marked date/time, assuming the file is of type <code>#S3_DEFAULT_FILE_EXTENSION</code> (&quot;.jpg&quot;). The function to get a new pre-signed URL will be called based on the automatic filename. A new object will be created on S3 using the new url and logger/jpg based filename.</li><li>You can provide a function to call to get a new pre-signed URL and a file prefix and/or extension to use to generate a filename based on the date/time. The function to get a new pre-signed URL will be called based on the generated filename. A new object will be created on S3 using the new url and prefix/extension based filename.</li><li>You can provide a function to call to get a new pre-signed URL and a function to call to get a new filename. Both functions will be called and the upload to S3 will be based on the returned URL and filename.<ul><li>NOTE: If your function to call to get the filename returns a nullptr, the default filename based on the logger ID, datetime, and <code>#S3_DEFAULT_FILE_EXTENSION</code> will be attempted.</li></ul></li></ul><aside class=\"m-note m-info\"><h4>Note</h4><p>While there is no physical or AWS-based requirement that the filename on the SD card matches the object name on S3, this library only supports the case where they match.</p></aside><p>The current tested path is:</p><ul><li>The logger creates an image file on the SD card with the GeoLux camera (and also appends numeric data to a csv). The image file is named based on the logger ID and the <em>marked</em> date time from the sampling interval.</li><li>The logger calls the AWS IoT publisher</li><li>The AWS IoT publisher, while sending numeric data to AWS IoT Core, subscribes to its own S3 url topic.</li><li>The IoT publisher publishes a filename named based on the logger ID and the <em>marked</em> date time from the sampling interval to a basic-ingest topic tied to an IoT Core rule.</li><li>The AWS IoT Core rule triggers a lambda function to generate a pre-signed URL for the image file.</li><li>The lambda publishes the URL to the logger&#x27;s pre-signed URL topic.</li><li>The subscribed IoT publisher receives the URL and passes it to the S3 publisher.</li><li>The logger calls the S3 publisher</li><li>The S3 publisher uses the logger to connect to the SD card and verify that it can open and read the GeoLux image file.</li><li>The S3 publisher uses the pre-signed URL to upload the GeoLux image file to S3.</li></ul><p>Further documentation on how to set up the AWS IoT rule and lambda function and all of the proper permissions are forthcoming. Some documentation and an examples program using this library is available in the <a href=\"https://github.com/EnviroDIY/USGS_NGWOS\">USGS NGWOS development repository</a>.</p><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000013\" class=\"m-doc\">Todo</a></h4><p>Generate documentation on the AWS architecture for IoT Core to S3.</p></aside>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "classdata_publisher.html",
        "name": "dataPublisher",
        "brief": "The <a href=\"classdata_publisher.html\" class=\"m-doc\">dataPublisher</a> class is a virtual class used by other publishers to distribute data online.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ae17d36a857a5181db6ba0ee89bba866d",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "S3PresignedPublisher",
        "brief": "Construct a new S3 Publisher object with no members set.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a1a74960a2300c3274ee0b557ae8206e6",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "S3PresignedPublisher",
        "brief": "Construct a new S3 Publisher object.",
        "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"#a588c0c4279e026c5e382d7a6d5808e07\" class=\"m-doc\">setCACertName()</a></p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>The inputs to this is the <strong>NAME</strong> of the certificate <strong>file</strong> as it is stored on you modem module, not the actual certificate content.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file - used to validate the server&#x27;s certificate when connecting to S3 with SSL.",
            "direction": ""
          },
          {
            "name": "getUrlFxn",
            "type": "String(*)(String)",
            "type_name": "String(*)(String) getUrlFxn",
            "default": "nullptr",
            "description": "A function to call to get a new pre-signed URL",
            "direction": ""
          },
          {
            "name": "getFileNameFxn",
            "type": "String(*)(void)",
            "type_name": "String(*)(void) getFileNameFxn",
            "default": "nullptr",
            "description": "A function to call to get a new filename",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "acbf51becb5e38944c25fdf3526a8e567",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "S3PresignedPublisher",
        "brief": "Construct a new S3 Publisher object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "getUrlFxn",
            "type": "String(*)(String)",
            "type_name": "String(*)(String) getUrlFxn",
            "default": "nullptr",
            "description": "A function to call to get a new pre-signed URL",
            "direction": ""
          },
          {
            "name": "getFileNameFxn",
            "type": "String(*)(void)",
            "type_name": "String(*)(void) getFileNameFxn",
            "default": "nullptr",
            "description": "A function to call to get a new filename",
            "direction": ""
          },
          {
            "name": "sendEveryX",
            "type": "int",
            "type_name": "int sendEveryX",
            "default": "1",
            "description": "Interval (in units of the logging interval) between attempted data transmissions. NOTE: not implemented by this publisher!",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ac9ddbe17059bf202210087133de9ab00",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~S3PresignedPublisher",
        "brief": "Destroy the S3 Publisher object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ab0570954d5935964d99592fc13969088",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setHost",
        "brief": "Set the S3 host name.",
        "description": "<p>This is &quot;s3.&lt;your-region&gt;.amazonaws.com&quot; by default. If you need to use a host in a specific region (ie, anything but US-East-1) you should set your own host. The host in that case should be: &quot;s3.&lt;your-region&gt;.amazonaws.com&quot;</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The host name should <strong>not</strong> contain the bucket name. This must be the &quot;real&quot; host name for the SSL connection, not the &quot;virtual&quot; host name used in the HTTP request for virtual-host-style S3 URLs.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "host",
            "type": "const char*",
            "type_name": "const char* host",
            "default": null,
            "description": "The host name to use for S3 connections",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ab58369537f9e1df34e487ed3a73879af",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setPort",
        "brief": "Set the S3 port.",
        "description": "<p>This is 443 by default. You only need to use this if you need a different port.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "port",
            "type": "int",
            "type_name": "int port",
            "default": null,
            "description": "The port number to use for S3 connections",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ac0a4cf1b453170702395e7c39923b3d9",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getEndpoint",
        "brief": "Get the destination for published data - generally the host name of the data receiver.",
        "description": "",
        "return_value": "The URL or HOST to receive published data",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a72f14dc9db4157da26763f9185b6d50b",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setURLUpdateFunction",
        "brief": "Set function to use to get the new URL.",
        "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>The function must return a &quot;virtual host style&quot; URL! Path style S3 URLs are not supported.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "getUrlFxn",
            "type": "String(*)(String)",
            "type_name": "String(*)(String) getUrlFxn",
            "default": null,
            "description": "A function to call to get a new pre-signed URL",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a63e800bfc7f78493266de86cbf2c2c44",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setPreSignedURL",
        "brief": "Set the pre-signed S3 url.",
        "description": "<aside class=\"m-note m-default\"><h4>Remark</h4><p>Only &quot;virtual hosted style&quot; pre-signed URLs are supported! Path style URLs are not supported.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "s3Url",
            "type": "String",
            "type_name": "String s3Url",
            "default": null,
            "description": "The pre-signed URL to use to put into an S3 bucket",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ad587c242e0e53f697a86f816930aa3be",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setFileName",
        "brief": "Set the filename to upload. If the filename is set, this exact filename will be used for the upload.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "filename",
            "type": "String",
            "type_name": "String filename",
            "default": null,
            "description": "The name of the file to be uploaded",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a4b8511ba8d5083d138c5b1c2bec721e2",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setFileParams",
        "brief": "Set the filename parameters to use to auto-generate the filename before every post based on the file extension, prefix, and the current date and time.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "extension",
            "type": "const char*",
            "type_name": "const char* extension",
            "default": null,
            "description": "The file extension to use",
            "direction": ""
          },
          {
            "name": "filePrefix",
            "type": "const char*",
            "type_name": "const char* filePrefix",
            "default": "nullptr",
            "description": "The prefix to use for the file name, optional, with an default value of nullptr. If not provided, the logger ID will be used.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a25c5d867c5daaf11b6309b1fc3f37c26",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setFileUpdateFunction",
        "brief": "Set function to use to get the new URL.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "getFileNameFxn",
            "type": "String(*)(void)",
            "type_name": "String(*)(void) getFileNameFxn",
            "default": null,
            "description": "A function to call to get a new filename",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a588c0c4279e026c5e382d7a6d5808e07",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setCACertName",
        "brief": "Set the name of your certificate authority certificate file.",
        "description": "<p>You MUST have already uploaded your certificate to your modem. This will most likely be the Amazon Root CA 1 (RSA 2048 bit key) certificate. You can find Amazon&#x27;s current CA certificates here: <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/server-authentication.html\">https:/<wbr />/<wbr />docs.aws.amazon.com/<wbr />iot/<wbr />latest/<wbr />developerguide/<wbr />server-authentication.html</a>. Depending on your module, you may instead need a certificate chain file or to use Amazon&#x27;s older top-chain certificate (Starfield Services Root Certificate Authority - G2).</p><p>This is exactly the same CA certificate as you would use for an MQTT connection to AWS IoT (ie, the AWS IoT Publisher). For supported modules you can use the AWS_IOT_SetCertificates sketch in the extras folder to upload your certificate.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The inputs to this is the <strong>NAME</strong> of the certificate <strong>file</strong> as it is stored on you modem module, not the actual certificate content.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": null,
            "description": "The name of your certificate authority certificate file.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "aba2bbd474c505122761b243a3b6516d5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the client and logger.",
        "description": "<p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "inClient",
            "type": "Client*",
            "type_name": "Client* inClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "getUrlFxn",
            "type": "String(*)(String)",
            "type_name": "String(*)(String) getUrlFxn",
            "default": null,
            "description": "A function to call to get a new pre-signed URL",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a81bf9bfe1b6b2b6db346b97adabbe2c3",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "begin",
        "brief": "Begin the publisher - linking it to the logger but not attaching a client.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>If a client is never specified, the publisher will attempt to create and use a client on a LoggerModem instance tied to the attached logger.</p></aside><p>This can be used as an alternative to adding the logger and client in the constructor.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "baseLogger",
            "type": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp;",
            "type_name": "<a href=\"class_logger.html\" class=\"m-doc\">Logger</a>&amp; baseLogger",
            "default": null,
            "description": "The logger supplying the data to be published",
            "direction": ""
          },
          {
            "name": "getUrlFxn",
            "type": "String(*)(String)",
            "type_name": "String(*)(String) getUrlFxn",
            "default": null,
            "description": "A function to call to get a new pre-signed URL",
            "direction": ""
          },
          {
            "name": "caCertName",
            "type": "const char*",
            "type_name": "const char* caCertName",
            "default": "nullptr",
            "description": "The name of your certificate authority certificate file",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a0a2c7d9405ddffa1a5e1b7fb6eaae957",
        "include": null,
        "has_details": true,
        "type": "int16_t",
        "name": "publishData",
        "brief": "Utilizes an attached modem to make a TCP connection to the S3 URL and then stream out a get request over that connection.",
        "description": "<p>This depends on an internet connection already having been made and a client being available.</p>",
        "return_value": "The http status code of the response.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "outClient",
            "type": "Client*",
            "type_name": "Client* outClient",
            "default": null,
            "description": "An Arduino client instance to use to print data to. Allows the use of any type of client and multiple clients tied to a single TinyGSM modem instance",
            "direction": ""
          },
          {
            "name": "forceFlush",
            "type": "bool",
            "type_name": "bool forceFlush",
            "default": "false",
            "description": "Ask the publisher to flush buffered data immediately.",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "aa5d35401ddc2db2aa2a24d24bd47e931",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createClient",
        "brief": "Use the connected base logger&#x27;s logger modem and underlying TinyGSM instance to create a new client for the publisher.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This does <em>NOT</em> override any client set by the constructor/begin/setClient functions. If you set an external client by any of those methods, this function should not be called. It is protected to prevent being called by external code.</p><p>The default implementation of this function creates an insecure client. Publishers that require SSL must re-implement this function.</p></aside>",
        "return_value": "A pointer to an Arduino client instance",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a817a81ff11164699ddac8b6ef6e6a7b0",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteClient",
        "brief": "Delete a created client. We need to pass this through to avoid a memory leak because we cannot delete from the pointer because the destructor for a client in the Arduino core isn&#x27;t virtual.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "abd04f55714f0d463fac2bc540fdd3576",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "validateS3URL",
        "brief": "Parses the S3 URL to validate that it is an un-expired S3 URL and fills the provided buffers with the parsed host, resource name, and content type from the URL.",
        "description": "<p>Do <em>not</em> use the values in the buffers before checking the return type!</p>",
        "return_value": "True if the URL is valid and the provided buffers have been filled.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "s3url",
            "type": "String&amp;",
            "type_name": "String&amp; s3url",
            "default": null,
            "description": "The full S3 URL to parse",
            "direction": ""
          },
          {
            "name": "s3host",
            "type": "char*",
            "type_name": "char* s3host",
            "default": null,
            "description": "A buffer for the parsed host name. Must be at least 95 characters long.",
            "direction": ""
          },
          {
            "name": "s3resource",
            "type": "char*",
            "type_name": "char* s3resource",
            "default": null,
            "description": "A buffer for the parsed resource. Should be long enough for the whole URL less the host.",
            "direction": ""
          },
          {
            "name": "content_type",
            "type": "char*",
            "type_name": "char* content_type",
            "default": null,
            "description": "A buffer for the parsed <em>and de-escaped</em> content type. Must be at least 128 characters long",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "aea9555adf7b92c52cfe26b207bd0cefd",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": true,
        "is_protected": true,
        "is_private": false,
        "name": "contentLengthHeader",
        "brief": "The content length header text.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a963e34736964a0d3fd83cf3df3ebd4a7",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": true,
        "is_protected": true,
        "is_private": false,
        "name": "contentTypeHeader",
        "brief": "The content type header text.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "protected_vars": [
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a34e5b64f2f9479c7b4de25d0ffc32503",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "s3_parent_host",
        "brief": "The host name.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a313031c62921a21d0d4ed14fbc71d0c4",
        "include": null,
        "has_details": false,
        "type": "int",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "s3Port",
        "brief": "The host port.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a6810b920b7a990ad01e40f0e57345e19",
        "include": null,
        "has_details": false,
        "type": "String(*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_getUrlFxn",
        "brief": "Private reference to function used fetch a new S3 URL.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a3e562ecc5ed1243611210edf3dfe167e",
        "include": null,
        "has_details": true,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_PreSignedURL",
        "brief": "A pointer to the current S3 pre-signed URL.",
        "description": "<p>This must be a &quot;virtual host style&quot; URL. Path style URLs are not supported.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a8571e1890a0d952d6997fedd017b34c4",
        "include": null,
        "has_details": false,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_filename",
        "brief": "The name of the file you want to upload to S3.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a5eecd59eb6a8aa9ed4f3b502a6865425",
        "include": null,
        "has_details": true,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_filePrefix",
        "brief": "The prefix to add to files, if generating a filename based on the date/time.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This will be <em>ignored</em> if the filename is set. If neither the filename nor the file prefix is set, the logger ID will be used.</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a7e32d5aa54c215edafaa02ce03d044c9",
        "include": null,
        "has_details": true,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_fileExtension",
        "brief": "The extension to add to files, if generating a filename based on the date/time.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This will be <em>ignored</em> if the filename is set. If neither the filename nor the file extension is set, <code>#S3_DEFAULT_FILE_EXTENSION</code>.</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a8ceb820b43b9fb4c71bc3a6c115d8997",
        "include": null,
        "has_details": false,
        "type": "String(*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_getFileNameFxn",
        "brief": "Private reference to function used fetch a new file name.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "a95741ea6c69b0118d07c30ec3747814e",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_caCertName",
        "brief": "The name of your certificate authority certificate file.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_s3_presigned_publisher.html",
        "id": "ad10f4608b22f7fab337a6376716c50f8",
        "include": null,
        "has_details": false,
        "type": "File",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "putFile",
        "brief": "An internal reference to an SdFat file instance.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "dataPublisher",
        "classdata_publisher.html"
      ],
      [
        "S3PresignedPublisher",
        "class_s3_presigned_publisher.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Supported Data Endpoints",
        "group__the__publishers.html"
      ],
      [
        "S3PresignedPublisher",
        "class_s3_presigned_publisher.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "S3PresignedPublisher::<wbr />"
  }
}