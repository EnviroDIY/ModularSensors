{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "classlogger_modem",
    "name": "loggerModem",
    "url_base": "classlogger_modem",
    "url": "classlogger_modem.html",
    "include": [
      "&lt;src/LoggerModem.h&gt;",
      "_logger_modem_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> class provides an internet connection for the logger and supplies an Arduino Client instance to use to publish data.",
    "description": "<p>A modem is a device that can be controlled by a logger to send out data directly to the world wide web.</p><p>The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> class wraps the TinyGSM library and adds in the power functions to turn the modem on and off and some error checking.</p><p>TinyGSM is available here: <a href=\"https://github.com/vshymanskyy/TinyGSM\">https:/<wbr />/<wbr />github.com/<wbr />vshymanskyy/<wbr />TinyGSM</a></p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [
      {
        "kind": "class",
        "url": "class_digi_x_bee.html",
        "name": "DigiXBee",
        "brief": "The parent class for all <a href=\"group__modem__digi.html\" class=\"m-doc\">Digi XBee and XBee3</a> wifi and cellular modules.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_espressif.html",
        "name": "Espressif",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for almost any <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a> wifi or wifi/bluetooth chip that has been flashed with <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a>&#x27;s AT command firmware.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_quectel_b_g96.html",
        "name": "QuectelBG96",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for Dragino, Nimbelink, or any other module based on the <a href=\"group__modem__bg96.html\" class=\"m-doc\">Quectel BG96</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_s_i_m_com_s_i_m7000.html",
        "name": "SIMComSIM7000",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for Botletics, And1, and other modules based on the <a href=\"group__modem__sim7000.html\" class=\"m-doc\">SIMCOM SIM7000</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_s_i_m_com_s_i_m7080.html",
        "name": "SIMComSIM7080",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for modules based on the <a href=\"group__modem__sim7080.html\" class=\"m-doc\">SIMCOM</a>SIM7080&quot;.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_s_i_m_com_s_i_m800.html",
        "name": "SIMComSIM800",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for the Adafruit Fona 2G, the Sodaq GPRSBeeR4 and almost any other module based on the <a href=\"group__modem__sim800.html\" class=\"m-doc\">SIMCOM SIM800 or SIM900 modules and</a>their variants&quot;.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_sequans_monarch.html",
        "name": "SequansMonarch",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for Nimbelink or other modules based on the <a href=\"group__modem__monarch.html\" class=\"m-doc\">Sequans Monarch VZM20Q</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_sodaq_u_bee_r410_m.html",
        "name": "SodaqUBeeR410M",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for the <a href=\"group__modem__ubee__ltem.html\" class=\"m-doc\">LTE-M</a> <a href=\"group__modem__ublox.html\" class=\"m-doc\">Sodaq UBee</a> based on the u-blox SARA R410M LTE-M cellular module. This can be also used for any other breakout of the the u-blox R4 or N4 series modules.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_sodaq_u_bee_u201.html",
        "name": "SodaqUBeeU201",
        "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for the <a href=\"group__modem__ubee__3g.html\" class=\"m-doc\">2G/<wbr />3G</a> <a href=\"group__modem__ublox.html\" class=\"m-doc\">Sodaq UBee</a> based on the u-blox SARA U201 2G/3G cellular module.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      }
    ],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "classlogger_modem.html",
        "id": "a207f7d1690cab74f5279f13b6efcd71d",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "loggerModem",
        "brief": "Construct a new <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> object.",
        "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"#modem_ctor_variables\" class=\"m-doc\">modem_<wbr />ctor_<wbr />variables</a></p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The digital pin number of the mcu pin controlling power to the modem (active <code>HIGH</code>).",
            "direction": ""
          },
          {
            "name": "statusPin",
            "type": "int8_t",
            "type_name": "int8_t statusPin",
            "default": null,
            "description": "The digital pin number of the mcu pin connected to the modem status output pin.",
            "direction": ""
          },
          {
            "name": "statusLevel",
            "type": "bool",
            "type_name": "bool statusLevel",
            "default": null,
            "description": "The level (<code>LOW</code> or <code>HIGH</code>) of the <a href=\"#acad0d45a5de232a5b115e31c82911d1a\" class=\"m-doc\">_<wbr />statusPin</a> when the modem is active.",
            "direction": ""
          },
          {
            "name": "modemResetPin",
            "type": "int8_t",
            "type_name": "int8_t modemResetPin",
            "default": null,
            "description": "The digital pin number of the pin on the mcu attached the the hard or panic reset pin of the modem.",
            "direction": ""
          },
          {
            "name": "resetLevel",
            "type": "bool",
            "type_name": "bool resetLevel",
            "default": null,
            "description": "The level (<code>LOW</code> or <code>HIGH</code>) of the <a href=\"#a477360bcdc59d84c7e3433e83506514c\" class=\"m-doc\">_<wbr />modemResetPin</a> which will cause the modem to reset.",
            "direction": ""
          },
          {
            "name": "resetPulse_ms",
            "type": "uint32_t",
            "type_name": "uint32_t resetPulse_ms",
            "default": null,
            "description": "The length of time in milliseconds at <a href=\"#a4832f4560020f57bfb2e11ddade73d0a\" class=\"m-doc\">_<wbr />resetLevel</a> needed on <a href=\"#a477360bcdc59d84c7e3433e83506514c\" class=\"m-doc\">_<wbr />modemResetPin</a> to reset the modem.",
            "direction": ""
          },
          {
            "name": "modemSleepRqPin",
            "type": "int8_t",
            "type_name": "int8_t modemSleepRqPin",
            "default": null,
            "description": "The digital pin number of a pin on the mcu used to request the modem enter its lowest possible power state.",
            "direction": ""
          },
          {
            "name": "wakeLevel",
            "type": "bool",
            "type_name": "bool wakeLevel",
            "default": null,
            "description": "The level (<code>LOW</code> or <code>HIGH</code>) on the <a href=\"#a116871437742fa383dce0a12652491b8\" class=\"m-doc\">_<wbr />modemSleepRqPin</a> used to <strong>wake</strong> the modem.",
            "direction": ""
          },
          {
            "name": "wakePulse_ms",
            "type": "uint32_t",
            "type_name": "uint32_t wakePulse_ms",
            "default": null,
            "description": "The length of pulse in milliseconds at <a href=\"#a71c42d58d22d8481e6e6f7e5b7d8f0bf\" class=\"m-doc\">_<wbr />wakeLevel</a> needed on the <a href=\"#a116871437742fa383dce0a12652491b8\" class=\"m-doc\">_<wbr />modemSleepRqPin</a> to wake the modem.",
            "direction": ""
          },
          {
            "name": "max_status_time_ms",
            "type": "uint32_t",
            "type_name": "uint32_t max_status_time_ms",
            "default": null,
            "description": "The time in milliseconds between when <a href=\"#af2c32f1b143a2dc94c0fe5a67121af88\" class=\"m-doc\">modemWake()</a> is run and when the <a href=\"#acad0d45a5de232a5b115e31c82911d1a\" class=\"m-doc\">_<wbr />statusPin</a> is expected to be at <a href=\"#af44caee8dd6acf7c72cd1271441a41cb\" class=\"m-doc\">_<wbr />statusLevel</a>.",
            "direction": ""
          },
          {
            "name": "max_disconnectTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t max_disconnectTime_ms",
            "default": null,
            "description": "The maximum length of time in milliseconds between when the modem is requested to enter lowest power state (<a href=\"#a8e6ada69f7ff5569e23184df8e7cb8e2\" class=\"m-doc\">modemSleep()</a>) and when it should have completed necessary steps to shut down.",
            "direction": ""
          },
          {
            "name": "wakeDelayTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t wakeDelayTime_ms",
            "default": null,
            "description": "The time in milliseconds between when the modem is powered and when it is able to receive a wake command.",
            "direction": ""
          },
          {
            "name": "max_at_response_time_ms",
            "type": "uint32_t",
            "type_name": "uint32_t max_at_response_time_ms",
            "default": null,
            "description": "The time in milliseconds between when the modem is awake and when its serial ports reach full functionality and are ready to accept AT commands.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a406bb7f42ae44fbc5b54e0a09129d8e6",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~loggerModem",
        "brief": "Destroy the logger Modem object - no action taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "classlogger_modem.html",
        "id": "aeaa76f09a1d0abb3cca168b6c2019c36",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setModemLED",
        "brief": "Set an LED to turn on (pin will be <code>HIGH</code>) when the modem is on.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modemLEDPin",
            "type": "int8_t",
            "type_name": "int8_t modemLEDPin",
            "default": null,
            "description": "The digital pin number for the LED",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "acb2578c919158461b9f2113a31b74dc7",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getModemName",
        "brief": "Get the modem name.",
        "description": "",
        "return_value": "The modem name",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a1e69bc7eb1091cc54b5dd587c2221e6b",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getModemDevId",
        "brief": "Get a detailed printable description of the modem.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>These values are polled for and cached in memory till needed</p></aside><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000008\" class=\"m-doc\">Todo</a></h4><p>Implement this for modems other than the XBee WiFi</p></aside>",
        "return_value": "The concatenated name, hardware version, firmware version, and serial number of the modem.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a3d739f1d70ca2039f4020bc6f9fe2077",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setModemTimeZone",
        "brief": "Set the timezone that the modem will attempt to sync itself to.",
        "description": "<p>This doesn&#x27;t <em>have</em> to be the same as the RTC or logger timezone, but you&#x27;d be stupid to make it different.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This must be set for SSL connections to work! If the modem does not have an accurate internal time when attempting an SSL connection, the connection will fail because the certificates will not be within their specified valid time ranges.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "timeZone",
            "type": "int8_t",
            "type_name": "int8_t timeZone",
            "default": null,
            "description": "The timezone that the modem will attempt to sync itself to.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "ad2c09648efbfbc6b5a51d5961be752af",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemSetup",
        "brief": "Set up the modem before first use.",
        "description": "<p>This is used for operations that cannot happen in the modem constructor - they must happen at run time, not at compile time.</p>",
        "return_value": "True if setup was successful",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "aa5af987ebf791875a6ce0b4a29692c7b",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Retained for backwards compatibility; use <a href=\"#ad2c09648efbfbc6b5a51d5961be752af\" class=\"m-doc\">modemSetup()</a> in new code.",
        "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000009\" class=\"m-doc\">Deprecated in v0.24.1</a></h4></aside>",
        "return_value": "True if setup was successful",
        "return_values": [],
        "exceptions": [],
        "deprecated": "deprecated in v0.24.1",
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a1cff4e6c19867c1b5f4f28639b6b10ab",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemHardReset",
        "brief": "Use the modem reset pin specified in the constructor to perform a &quot;hard&quot; or &quot;panic&quot; reset.",
        "description": "<p>This should only be used if the modem is clearly non-responsive.</p>",
        "return_value": "True if the reset succeeded and the modem should now be responsive. False if the modem remains non-responsive either because the reset failed to fix the communication issue or because a reset is not possible with the current pin/modem configuration.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [
      {
        "base_url": "classlogger_modem.html",
        "id": "afabf02bb373b702928a5bb111bb47485",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "name": "parseNISTBytes",
        "brief": "Convert the 4 bytes returned on the NIST daytime protocol to the number of seconds since January 1, 1970 in UTC.",
        "description": "<p>NIST supplies a 4 byte response to any TCP connection made on port 37. This is the 32-bit number of seconds since January 1, 1970 00:00:00 UTC. The server closes the TCP connection immediately after sending the data, so there is no need to close it</p>",
        "return_value": "the number of seconds since January 1, 1970 00:00:00 UTC",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "static ",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "nistBytes",
            "type": "byte[4]",
            "type_name": "byte nistBytes[4]",
            "default": null,
            "description": "4 bytes from NIST",
            "direction": ""
          }
        ]
      }
    ],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [
      {
        "base_url": "classlogger_modem.html",
        "id": "a86ba7e58fbe22ae89a1402efb4f0f682",
        "include": null,
        "has_details": true,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_modemName",
        "brief": "The modem name.",
        "description": "<p>Set in the init() portion of the <a href=\"#ad2c09648efbfbc6b5a51d5961be752af\" class=\"m-doc\">modemSetup()</a>. Returned by <a href=\"#acb2578c919158461b9f2113a31b74dc7\" class=\"m-doc\">getModemName()</a>.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a9845b9fa726fd7067eba730d48f13287",
        "include": null,
        "has_details": true,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_modemHwVersion",
        "brief": "The modem hardware version.",
        "description": "<p>Set in <a href=\"#ad2c09648efbfbc6b5a51d5961be752af\" class=\"m-doc\">modemSetup()</a>. Returned as a portion of the <a href=\"#a1e69bc7eb1091cc54b5dd587c2221e6b\" class=\"m-doc\">getModemDevId()</a>.</p><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000009\" class=\"m-doc\">Todo</a></h4><p>Implement this for modems other than the XBee WiFi</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a735ec434c0154f11f89390c911f83382",
        "include": null,
        "has_details": true,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_modemFwVersion",
        "brief": "The modem firmware version.",
        "description": "<p>Set in <a href=\"#ad2c09648efbfbc6b5a51d5961be752af\" class=\"m-doc\">modemSetup()</a>. Returned as a portion of the <a href=\"#a1e69bc7eb1091cc54b5dd587c2221e6b\" class=\"m-doc\">getModemDevId()</a>.</p><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000010\" class=\"m-doc\">Todo</a></h4><p>Implement this for modems other than the XBee WiFi</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "ad160a8fec3ace78cc460b88277fc161d",
        "include": null,
        "has_details": true,
        "type": "String",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_modemSerialNumber",
        "brief": "The modem serial number.",
        "description": "<p>Set in <a href=\"#ad2c09648efbfbc6b5a51d5961be752af\" class=\"m-doc\">modemSetup()</a>. Returned as a portion of the <a href=\"#a1e69bc7eb1091cc54b5dd587c2221e6b\" class=\"m-doc\">getModemDevId()</a>.</p><aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000011\" class=\"m-doc\">Todo</a></h4><p>Implement this for modems other than the XBee WiFi</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a2c51932053dc198cf6169380b9da54e9",
        "include": null,
        "has_details": true,
        "type": "int8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_modemUTCOffset",
        "brief": "The timezone that the modem will attempt to sync itself to.",
        "description": "<p>This doesn&#x27;t <em>have</em> to be the same as the RTC or logger timezone, but you&#x27;d be stupid to make it different.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This must be set for SSL connections to work! If the modem does not have an accurate internal time when attempting an SSL connection, the connection will fail because the certificates will not be within their specified valid time ranges.</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "classlogger_modem.html",
        "id": "a76e266d5a3ec4b6b3dcd0c9f6ded789f",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_pollModemMetaData",
        "brief": "An 8-bit code for the enabled modem polling variables.",
        "description": "<p>Setting a bit to 0 will disable polling, to 1 will enable it. By default no polling is enabled to save time and power by not requesting unnecessary information from the modem. When modem measured variables are attached to a modem, polling for those results is automatically enabled.</p><table class=\"m-table m-fullwidth m-flat\"><thead><tr><th>Bit</th><th><a href=\"class_variable.html\" class=\"m-doc\">Variable</a> Class</th><th>Relevent Define</th></tr></thead><tbody><tr><td>0</td><td><a href=\"class_modem___r_s_s_i.html\" class=\"m-doc\">Modem_<wbr />RSSI</a></td><td><a href=\"group__modem__measured__variables.html#ga498f72df31cafd5cc7e7c83db263cbf6\" class=\"m-doc\">MODEM_<wbr />RSSI_<wbr />ENABLE_<wbr />BITMASK</a></td></tr><tr><td>1</td><td><a href=\"class_modem___signal_percent.html\" class=\"m-doc\">Modem_<wbr />SignalPercent</a></td><td><a href=\"group__modem__measured__variables.html#ga581b8d62041e43c2e0983b0a7aa3e41e\" class=\"m-doc\">MODEM_<wbr />PERCENT_<wbr />SIGNAL_<wbr />ENABLE_<wbr />BITMASK</a></td></tr><tr><td>2</td><td><a href=\"class_modem___battery_state.html\" class=\"m-doc\">Modem_<wbr />BatteryState</a></td><td><a href=\"group__modem__measured__variables.html#ga3c68046a7b58ef17342f749228f236dc\" class=\"m-doc\">MODEM_<wbr />BATTERY_<wbr />STATE_<wbr />ENABLE_<wbr />BITMASK</a></td></tr><tr><td>3</td><td><a href=\"class_modem___battery_percent.html\" class=\"m-doc\">Modem_<wbr />BatteryPercent</a></td><td><a href=\"group__modem__measured__variables.html#gace65f289aff68e41a677fee6985aabcb\" class=\"m-doc\">MODEM_<wbr />BATTERY_<wbr />PERCENT_<wbr />ENABLE_<wbr />BITMASK</a></td></tr><tr><td>4</td><td><a href=\"class_modem___battery_voltage.html\" class=\"m-doc\">Modem_<wbr />BatteryVoltage</a></td><td><a href=\"group__modem__measured__variables.html#ga3c66f9e3da63b200841aa4627b757272\" class=\"m-doc\">MODEM_<wbr />BATTERY_<wbr />VOLTAGE_<wbr />ENABLE_<wbr />BITMASK</a></td></tr><tr><td>5</td><td><a href=\"class_modem___temp.html\" class=\"m-doc\">Modem_<wbr />Temp</a></td><td><a href=\"group__modem__measured__variables.html#gabe87137d911cbaf9db83960dee689530\" class=\"m-doc\">MODEM_<wbr />TEMPERATURE_<wbr />ENABLE_<wbr />BITMASK</a></td></tr></tbody></table>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Member variables set in the constructor",
        "id": "member-variables-set-in-the-constructor",
        "description": "<p><a name=\"modem_ctor_variables\"></a> These are all related to expected modem response times and the pin connections between the modem module and the logger MCU.</p>",
        "members": [
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a2debe6966737c06f1a1ae09785b357b0",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_powerPin",
              "brief": "The digital pin number of the mcu pin controlling power to the modem (active <code>HIGH</code>).",
              "description": "<p>Should be set to a negative number if the modem should be continuously powered or the power cannot be controlled by the MCU.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "acad0d45a5de232a5b115e31c82911d1a",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_statusPin",
              "brief": "The digital pin number of the mcu pin connected to the modem status output pin.",
              "description": "<p>Should be set to a negative number if the modem status pin cannot be read.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "af44caee8dd6acf7c72cd1271441a41cb",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_statusLevel",
              "brief": "The level (<code>LOW</code> or <code>HIGH</code>) of the <a href=\"#acad0d45a5de232a5b115e31c82911d1a\" class=\"m-doc\">_<wbr />statusPin</a> when the modem is active.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a477360bcdc59d84c7e3433e83506514c",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_modemResetPin",
              "brief": "The digital pin number of the pin on the mcu attached the the hard or panic reset pin of the modem.",
              "description": "<p>Should be set to a negative number if the modem reset pin is not connected to the MCU.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a4832f4560020f57bfb2e11ddade73d0a",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_resetLevel",
              "brief": "The level (<code>LOW</code> or <code>HIGH</code>) of the <a href=\"#a477360bcdc59d84c7e3433e83506514c\" class=\"m-doc\">_<wbr />modemResetPin</a> which will cause the modem to reset.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a9ee81f2d0dd9e5cdf89e8e469147c38c",
              "include": null,
              "has_details": false,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_resetPulse_ms",
              "brief": "The length of time in milliseconds at <a href=\"#a4832f4560020f57bfb2e11ddade73d0a\" class=\"m-doc\">_<wbr />resetLevel</a> needed on <a href=\"#a477360bcdc59d84c7e3433e83506514c\" class=\"m-doc\">_<wbr />modemResetPin</a> to reset the modem.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a116871437742fa383dce0a12652491b8",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_modemSleepRqPin",
              "brief": "The digital pin number of a pin on the mcu used to request the modem enter its lowest possible power state.",
              "description": "<p>Should be set to a negative number if there is no pin usable for deep sleep modes or it is not accessible to the MCU.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a71c42d58d22d8481e6e6f7e5b7d8f0bf",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_wakeLevel",
              "brief": "The level (<code>LOW</code> or <code>HIGH</code>) on the <a href=\"#a116871437742fa383dce0a12652491b8\" class=\"m-doc\">_<wbr />modemSleepRqPin</a> used to <strong>wake</strong> the modem.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a1b4e78a1e0963fb1cc970ce6273c124d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_wakePulse_ms",
              "brief": "The length of pulse in milliseconds at <a href=\"#a71c42d58d22d8481e6e6f7e5b7d8f0bf\" class=\"m-doc\">_<wbr />wakeLevel</a> needed on the <a href=\"#a116871437742fa383dce0a12652491b8\" class=\"m-doc\">_<wbr />modemSleepRqPin</a> to wake the modem.",
              "description": "<p>Set to 0 if the pin must be continuously held at <a href=\"#a71c42d58d22d8481e6e6f7e5b7d8f0bf\" class=\"m-doc\">_<wbr />wakeLevel</a> to keep the modem active.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a755d93cb67e9184a7cdfeae17448667b",
              "include": null,
              "has_details": false,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_statusTime_ms",
              "brief": "The time in milliseconds between when <a href=\"#af2c32f1b143a2dc94c0fe5a67121af88\" class=\"m-doc\">modemWake()</a> is run and when the <a href=\"#acad0d45a5de232a5b115e31c82911d1a\" class=\"m-doc\">_<wbr />statusPin</a> is expected to be at <a href=\"#af44caee8dd6acf7c72cd1271441a41cb\" class=\"m-doc\">_<wbr />statusLevel</a>.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a6d4306338e19e76002f9280feb3f62be",
              "include": null,
              "has_details": false,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_disconnectTime_ms",
              "brief": "The maximum length of time in milliseconds between when the modem is requested to enter lowest power state (<a href=\"#a8e6ada69f7ff5569e23184df8e7cb8e2\" class=\"m-doc\">modemSleep()</a>) and when it should have completed necessary steps to shut down.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a68051ed68b85195bf188a1914c71a9c8",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_wakeDelayTime_ms",
              "brief": "The time in milliseconds between when the modem is powered and when it is able to receive a wake command.",
              "description": "<p>That is, the time that should be allowed between <a href=\"#a8ee2373c09b89016d1dd8632ab3f39ed\" class=\"m-doc\">modemPowerUp()</a> and <a href=\"#af2c32f1b143a2dc94c0fe5a67121af88\" class=\"m-doc\">modemWake()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a1eb0149e16837edc9afaa1a96451c53f",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_max_at_response_time_ms",
              "brief": "The time in milliseconds between when the modem is awake and when its serial ports reach full functionality and are ready to accept AT commands.",
              "description": "<p>That is, the time that should be allowed between <a href=\"#af2c32f1b143a2dc94c0fe5a67121af88\" class=\"m-doc\">modemWake()</a> and init(). If the modem does not respond within this time frame (plus a 500ms buffer) a <a href=\"#a1cff4e6c19867c1b5f4f28639b6b10ab\" class=\"m-doc\">modemHardReset()</a> will be attempted.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Flags and other member variables only used internally",
        "id": "flags-and-other-member-variables-only-used-internally",
        "description": "<p><a name=\"modem_flag_variables\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "af99cffac4f4cc326d7e7a416381460dc",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_modemLEDPin",
              "brief": "The digital pin number of a pin on the mcu used to indicate the modem&#x27;s current activity state.",
              "description": "<p>Intended to be a pin attached to a LED.</p><p>Should be set to a negative number if no LED is available.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a32b3065bdbe41f70acca8f0fca5cd3b0",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_millisPowerOn",
              "brief": "The processor elapsed time when the power was turned on for the modem.",
              "description": "<p>The <a href=\"#a32b3065bdbe41f70acca8f0fca5cd3b0\" class=\"m-doc\">_<wbr />millisPowerOn</a> value is set in the <a href=\"#a8ee2373c09b89016d1dd8632ab3f39ed\" class=\"m-doc\">modemPowerUp()</a> function. It is un-set in the <a href=\"#ae2a3d3e25f3957c2b0d89bf5f7e3c6a3\" class=\"m-doc\">modemSleepPowerDown()</a> function.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a07664567900d410a880740c5e1fe3e7d",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_lastNISTrequest",
              "brief": "The processor elapsed time when the a connection to the NIST time server was last attempted.",
              "description": "<p>NIST documentation is very clear that it must not be contacted more than once every 4 seconds.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "ab5f1cf4a8d50fdb927a5bea7ef89be1a",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": true,
              "is_private": false,
              "name": "_hasBeenSetup",
              "brief": "Flag. True indicates that the modem has already successfully completed setup.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Static member variables used to hold modem metadata",
        "id": "static-member-variables-used-to-hold-modem-metadata",
        "description": "<p><a name=\"modem_static_variables\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "aa87cab7a19df8f47b0aea1d851066818",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorRSSI",
              "brief": "The last stored RSSI value.",
              "description": "<p>Set by <a href=\"#aa132afc4a28cafb1dc2e0a925f6a64ef\" class=\"m-doc\">getModemSignalQuality()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a715617dfbf03f685188d93f580bcf18f\" class=\"m-doc\">getModemRSSI()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "ac415026e6488b11f39f4f6d61085089e",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorSignalPercent",
              "brief": "The last stored signal strength percent value.",
              "description": "<p>Set by <a href=\"#aa132afc4a28cafb1dc2e0a925f6a64ef\" class=\"m-doc\">getModemSignalQuality()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a5744abd02ab5e90b508dc54e8211285c\" class=\"m-doc\">getModemSignalPercent()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a637233cee6ddb552d6a87a426c21e288",
              "include": null,
              "has_details": true,
              "type": "float",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorModemTemp",
              "brief": "The last stored modem chip temperature value.",
              "description": "<p>Set by <a href=\"#ab9008332e41b32b8bffc93c689add260\" class=\"m-doc\">getModemChipTemperature()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a68642f92af1194754004b4f8146f349d\" class=\"m-doc\">getModemTemperature()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a1822e8abafd11aa6c0996077fcf638ef",
              "include": null,
              "has_details": true,
              "type": "float",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorBatteryState",
              "brief": "The last stored modem battery state value.",
              "description": "<p>Set by <a href=\"#a17d1472184b4953636c88ac4936f4ae1\" class=\"m-doc\">getModemBatteryStats()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a91d0877c4fa4b7183d158f0894efa73b\" class=\"m-doc\">getModemBatteryChargeState()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a10eda54803bacccab7fe504afcdf0348",
              "include": null,
              "has_details": true,
              "type": "float",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorBatteryPercent",
              "brief": "The last stored modem battery percent value.",
              "description": "<p>Set by <a href=\"#a17d1472184b4953636c88ac4936f4ae1\" class=\"m-doc\">getModemBatteryStats()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a334a2d9e27602a2f5967075f96449442\" class=\"m-doc\">getModemBatteryChargePercent()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "classlogger_modem.html",
              "id": "a00b43ae92752d2681355ad53adf6637a",
              "include": null,
              "has_details": true,
              "type": "float",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": true,
              "is_private": false,
              "name": "_priorBatteryVoltage",
              "brief": "The last stored modem battery voltage value.",
              "description": "<p>Set by <a href=\"#a17d1472184b4953636c88ac4936f4ae1\" class=\"m-doc\">getModemBatteryStats()</a> or <a href=\"#aa0cd44673db35745e9cace36e8bab0e5\" class=\"m-doc\">updateModemMetadata()</a>. Returned by <a href=\"#a8246e66eb5b903e6d4ee692242ebfc34\" class=\"m-doc\">getModemBatteryVoltage()</a>.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Functions related to the modem power and activity state",
        "id": "functions-related-to-the-modem-power-and-activity-state",
        "description": "<p><a name=\"modem_power_functions\"></a></p><p>These are similar to the like-named <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> functions.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "af2c32f1b143a2dc94c0fe5a67121af88",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "modemWake",
              "brief": "Wake up the modem.",
              "description": "<p>This sets pin modes, powers up the modem if necessary, sets time stamps, runs the specific modem&#x27;s wake function, tests for responsiveness to AT commands, and then re-runs the TinyGSM init() if necessary. If the modem fails to respond, this attempts a &quot;hard&quot; pin reset if possible.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#a93dc4dd4e9fce78c3a17e35e683092eb\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />WAKE</a> macro.</p>",
              "return_value": "True if the modem is responsive and ready for action.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a3dbcb7b22bdedb7e17488cdf35cc5be3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "wake",
              "brief": "Retained for backwards compatibility; use <a href=\"#af2c32f1b143a2dc94c0fe5a67121af88\" class=\"m-doc\">modemWake()</a> in new code.",
              "description": "<aside class=\"m-note m-danger\"><h4><a href=\"deprecated.html#_deprecated000010\" class=\"m-doc\">Deprecated in v0.24.1</a></h4></aside>",
              "return_value": "True if wake was successful, modem should be ready to communicate",
              "return_values": [],
              "exceptions": [],
              "deprecated": "deprecated in v0.24.1",
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a8ee2373c09b89016d1dd8632ab3f39ed",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "modemPowerUp",
              "brief": "Power the modem by setting the modem power pin high.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a1d7e8bc1331a59865aa29c0814b937b8",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "modemPowerDown",
              "brief": "Cut power to the modem by setting the modem power pin low.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p><a href=\"#a1d7e8bc1331a59865aa29c0814b937b8\" class=\"m-doc\">modemPowerDown()</a> simply kills power, while <a href=\"#ae2a3d3e25f3957c2b0d89bf5f7e3c6a3\" class=\"m-doc\">modemSleepPowerDown()</a> allows for graceful shut down. You should use <a href=\"#ae2a3d3e25f3957c2b0d89bf5f7e3c6a3\" class=\"m-doc\">modemSleepPowerDown()</a> whenever possible.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a8e6ada69f7ff5569e23184df8e7cb8e2",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "modemSleep",
              "brief": "Request that the modem enter its lowest possible power state.",
              "description": "",
              "return_value": "True if the modem has successfully entered low power state",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "ae2a3d3e25f3957c2b0d89bf5f7e3c6a3",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "modemSleepPowerDown",
              "brief": "Request that the modem enter its lowest possible power state and then set the power pin low after the modem has indicated it has successfully gone to low power.",
              "description": "<p>This allows the modem to shut down all connections cleanly and do any necessary internal housekeeping before stopping power.</p>",
              "return_value": "True if the modem has successfully entered low power state <em>and</em> then powered off",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Pin setting functions",
        "id": "pin-setting-functions",
        "description": "<p><a name=\"modem_pin_functions\"></a> Functions to set or re-set the the pin numbers for the connection between the modem module and the logger MCU.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "adcab74e00e8b15f9a5943a81a89d227e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setModemStatusLevel",
              "brief": "Set the pin level to be expected when the on the modem status pin when the modem is active.",
              "description": "<p>If this function is not called, the modem status pin is assumed to exactly follow the hardware specifications for that modems raw cellular component.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "level",
                  "type": "bool",
                  "type_name": "bool level",
                  "default": null,
                  "description": "The active level of the pin (<code>LOW</code> or <code>HIGH</code>)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a450bd376f7085fbf517bf4915f1292c5",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setModemWakeLevel",
              "brief": "Set the pin level to be used to wake the modem.",
              "description": "<p>If this function is not called, the modem status pin is assumed to exactly follow the hardware specifications for that modems raw cellular component.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "level",
                  "type": "bool",
                  "type_name": "bool level",
                  "default": null,
                  "description": "The pin level (<code>LOW</code> or <code>HIGH</code>) of the pin while waking the modem.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a6c4b164f8e5e98bd7fb093bd46435630",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setModemResetLevel",
              "brief": "Set the pin level to be used to reset the modem.",
              "description": "<p>If this function is not called, the modem status pin is assumed to exactly follow the hardware specifications for that modems raw cellular component - nearly always low.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "level",
                  "type": "bool",
                  "type_name": "bool level",
                  "default": null,
                  "description": "The pin level (<code>LOW</code> or <code>HIGH</code>) of the pin while resetting the modem.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions for internet connectivity",
        "id": "functions-for-internet-connectivity",
        "description": "<p><a name=\"modem_internet_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aad2064a5a75500fbc63209eef250fb4b",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "connectInternet",
              "brief": "Wait for the modem to successfully register on the cellular network and then request that it establish either EPS or GPRS data connection.",
              "description": "",
              "return_value": "True if EPS or GPRS data connection has been established. False if the modem was unresponsive, unable to register with the cellular network, or unable to establish a EPS or GPRS connection.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "maxConnectionTime",
                  "type": "uint32_t",
                  "type_name": "uint32_t maxConnectionTime",
                  "default": "50000L",
                  "description": "The maximum length of time in milliseconds to wait for network registration and data sconnection. Defaults to 50,000ms (50s).",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a07fe7e8f9ef9426192df500aa0bee5fc",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "disconnectInternet",
              "brief": "Detach from EPS or GPRS data connection and then deregister from the cellular network.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aabbd67de477238e163b3262245921cf8",
              "include": null,
              "has_details": true,
              "type": "Client*",
              "name": "createClient",
              "brief": "Create a new client object using the default socket number.",
              "description": "",
              "return_value": "A new client object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "adf63ab4ab7025095bc77876c064ace78",
              "include": null,
              "has_details": true,
              "type": "Client*",
              "name": "createSecureClient",
              "brief": "Create a new secure client object using the default socket number.",
              "description": "",
              "return_value": "A new secure client object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "abd6edac443631354e58b9fecc69a17a0",
              "include": null,
              "has_details": true,
              "type": "Client*",
              "name": "createSecureClient",
              "brief": "Create a new secure client object using the default socket number.",
              "description": "",
              "return_value": "A new secure client object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "sslAuthMode",
                  "type": "SSLAuthMode",
                  "type_name": "SSLAuthMode sslAuthMode",
                  "default": null,
                  "description": "The SSL authentication mode to use",
                  "direction": ""
                },
                {
                  "name": "sslVersion",
                  "type": "SSLVersion",
                  "type_name": "SSLVersion sslVersion",
                  "default": "SSLVersion::TLS1_2",
                  "description": "The SSL version to use",
                  "direction": ""
                },
                {
                  "name": "CAcertName",
                  "type": "const char*",
                  "type_name": "const char* CAcertName",
                  "default": "nullptr",
                  "description": "The name of the CA certificate to use",
                  "direction": ""
                },
                {
                  "name": "clientCertName",
                  "type": "const char*",
                  "type_name": "const char* clientCertName",
                  "default": "nullptr",
                  "description": "The name of the client certificate to use",
                  "direction": ""
                },
                {
                  "name": "clientKeyName",
                  "type": "const char*",
                  "type_name": "const char* clientKeyName",
                  "default": "nullptr",
                  "description": "The name of the client key to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a489154305bd1db71c45ba62b86d516bd",
              "include": null,
              "has_details": true,
              "type": "Client*",
              "name": "createSecureClient",
              "brief": "Create a new secure client object using the default socket number.",
              "description": "",
              "return_value": "A new secure client object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pskIdent",
                  "type": "const char*",
                  "type_name": "const char* pskIdent",
                  "default": null,
                  "description": "The pre-shared key identity",
                  "direction": ""
                },
                {
                  "name": "psKey",
                  "type": "const char*",
                  "type_name": "const char* psKey",
                  "default": null,
                  "description": "The pre-shared key",
                  "direction": ""
                },
                {
                  "name": "sslVersion",
                  "type": "SSLVersion",
                  "type_name": "SSLVersion sslVersion",
                  "default": "SSLVersion::TLS1_2",
                  "description": "The SSL version to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a27d45199ae77de280b6b1bef2d8b3a5b",
              "include": null,
              "has_details": true,
              "type": "Client*",
              "name": "createSecureClient",
              "brief": "Create a new secure client object using the default socket number.",
              "description": "",
              "return_value": "A new secure client object",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pskTableName",
                  "type": "const char*",
                  "type_name": "const char* pskTableName",
                  "default": null,
                  "description": "The pre-shared key table name - for modems that require PSK&#x27;s in a &quot;table&quot; format",
                  "direction": ""
                },
                {
                  "name": "sslVersion",
                  "type": "SSLVersion",
                  "type_name": "SSLVersion sslVersion",
                  "default": "SSLVersion::TLS1_2",
                  "description": "The SSL version to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a30609eae4b41bb9c44ce22b9784a6f5b",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "deleteClient",
              "brief": "Attempts to delete a created TinyGsmClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "client",
                  "type": "Client*",
                  "type_name": "Client* client",
                  "default": null,
                  "description": "The client to delete",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a7d22283ed326967c3117d284b09251fa",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "deleteSecureClient",
              "brief": "Attempts to delete a created TinyGsmSecureClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "client",
                  "type": "Client*",
                  "type_name": "Client* client",
                  "default": null,
                  "description": "The client to delete",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a8be23e50e1de587dcd71384dea5185ff",
              "include": null,
              "has_details": true,
              "type": "uint32_t",
              "name": "getNISTTime",
              "brief": "Get the time from NIST via TIME protocol (rfc868).",
              "description": "<p>This would be much more efficient if done over UDP, but I&#x27;m doing it over TCP because I don&#x27;t have a UDP library for all the modems.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The return is the number of seconds since Jan 1, 1970 IN UTC</p></aside>",
              "return_value": "The number of seconds since Jan 1, 1970 IN UTC",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Modem metadata functions",
        "id": "modem-metadata-functions",
        "description": "<p><a name=\"modem_metadata_functions\"></a> Functions to get metadata about modem functionality - using the modem like a sensor.</p><p>These functions will query the modem to get new values.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>In order to use the modem metadata functions, they must be called after the modem is connected to the internet.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aa132afc4a28cafb1dc2e0a925f6a64ef",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getModemSignalQuality",
              "brief": "Query the modem for the current signal quality and write the results to the supplied non-constant references.",
              "description": "",
              "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "rssi",
                  "type": "int16_t&amp;",
                  "type_name": "int16_t&amp; rssi",
                  "default": null,
                  "description": "A reference to an int16_t which will be set with the received signal strength indicator",
                  "direction": ""
                },
                {
                  "name": "percent",
                  "type": "int16_t&amp;",
                  "type_name": "int16_t&amp; percent",
                  "default": null,
                  "description": "A reference to an int16_t which will be set with the &quot;percent&quot; signal strength",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a17d1472184b4953636c88ac4936f4ae1",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getModemBatteryStats",
              "brief": "Query the modem for battery information and write the values to the supplied non-constant references.",
              "description": "",
              "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "chargeState",
                  "type": "int8_t&amp;",
                  "type_name": "int8_t&amp; chargeState",
                  "default": null,
                  "description": "A reference to an uint8_t which will be set with the current charge state (significance of value varies)",
                  "direction": ""
                },
                {
                  "name": "percent",
                  "type": "int8_t&amp;",
                  "type_name": "int8_t&amp; percent",
                  "default": null,
                  "description": "A reference to an int8_t which will be set with the current charge percent - this may or may not be a valid value depending on the module and breakout.",
                  "direction": ""
                },
                {
                  "name": "milliVolts",
                  "type": "int16_t&amp;",
                  "type_name": "int16_t&amp; milliVolts",
                  "default": null,
                  "description": "A reference to an uint16_t which will be set with the current battery voltage in mV - this may or may not be a valid value depending on the module and breakout.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "ab9008332e41b32b8bffc93c689add260",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemChipTemperature",
              "brief": "Get the current temperature provided by the modem module.",
              "description": "",
              "return_value": "The temperature in degrees Celsius",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a3d736ea02ee61bcb47220278f90b731d",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "enableMetadataPolling",
              "brief": "Enables metadata polling for one or more modem measured variables. Setting this to 0b11111111 will enable polling for all modem measured variables.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"#a76e266d5a3ec4b6b3dcd0c9f6ded789f\" class=\"m-doc\">loggerModem::<wbr />_pollModemMetaData</a></p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>This will <strong>not</strong> disable polling for any unset bits in the provided bitmask. It will only enable those bits that are set.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pollingBitmask",
                  "type": "uint8_t",
                  "type_name": "uint8_t pollingBitmask",
                  "default": null,
                  "description": "The bitmask indicating which parameters to poll.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a604849276e3ba5baa33b3fba2767592e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "disableMetadataPolling",
              "brief": "Disables metadata polling for one or more modem measured variables. Setting this to 0b11111111 will disable polling for all modem measured variables.",
              "description": "<aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"#a76e266d5a3ec4b6b3dcd0c9f6ded789f\" class=\"m-doc\">loggerModem::<wbr />_pollModemMetaData</a></p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>This will <strong>not</strong> enable polling for any unset bits in the provided bitmask. It will only disable polling for those bits that are set.</p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pollingBitmask",
                  "type": "uint8_t",
                  "type_name": "uint8_t pollingBitmask",
                  "default": null,
                  "description": "The bitmask indicating which parameters to poll.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "af3383309a197b42843085d01476644da",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setMetadataPolling",
              "brief": "Sets the bitmask for modem metadata polling.",
              "description": "<p>This will enable polling for 1 bits and disable polling for 0 bits. Setting this to 0 (0b00000000) will disable polling for all metadata parameters. Setting it to 256 (0b11111111) will enable polling for all parameters.</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"#a76e266d5a3ec4b6b3dcd0c9f6ded789f\" class=\"m-doc\">loggerModem::<wbr />_pollModemMetaData</a></p></aside>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "pollingBitmask",
                  "type": "uint8_t",
                  "type_name": "uint8_t pollingBitmask",
                  "default": null,
                  "description": "The bitmask indicating which parameters to poll.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aa0cd44673db35745e9cace36e8bab0e5",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "updateModemMetadata",
              "brief": "Query the modem for signal quality, battery, and temperature information and store the values to the static internal variables.",
              "description": "",
              "return_value": "True indicates that the communication with the modem was successful and the values of the internal static variables should be valid.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to return the current value of static member variables",
        "id": "functions-to-return-the-current-value-of-static-member-variables",
        "description": "<p><a name=\"modem_static_functions\"></a></p><p>These functions do <strong>NOT</strong> query the modem for new values, they return the stored value.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>These must be static so that the modem variables can call them. (Non-static member functions cannot be called without an object.)</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a715617dfbf03f685188d93f580bcf18f",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemRSSI",
              "brief": "Get the stored Modem RSSI value.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored RSSI",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a5744abd02ab5e90b508dc54e8211285c",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemSignalPercent",
              "brief": "Get the stored modem signal strength as a percent.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored signal strength",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a91d0877c4fa4b7183d158f0894efa73b",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemBatteryChargeState",
              "brief": "Get the stored modem battery charge state.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored signal percent",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a334a2d9e27602a2f5967075f96449442",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemBatteryChargePercent",
              "brief": "Get the stored modem battery charge percent object.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored battery charge percent",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a8246e66eb5b903e6d4ee692242ebfc34",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemBatteryVoltage",
              "brief": "Get the stored modem battery voltage.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored battery voltage in mV",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a68642f92af1194754004b4f8146f349d",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "getModemTemperature",
              "brief": "Get the stored modem temperature.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Does NOT query the modem for a new value.</p></aside>",
              "return_value": "The stored temperature in degrees Celsius",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      },
      {
        "name": "Functions to convert between signal strength measurement types",
        "id": "functions-to-convert-between-signal-strength-measurement-types",
        "description": "<p><a name=\"modem_signal_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aa7a706687411de617c7677d28d760b43",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getRSSIFromCSQ",
              "brief": "Get approximate RSSI from CSQ (assuming no noise).",
              "description": "<p>The RSSI is estimated from a look-up assuming no noise.</p>",
              "return_value": "An RSSI in dBm, making assumptions about the conversion",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "csq",
                  "type": "int16_t",
                  "type_name": "int16_t csq",
                  "default": null,
                  "description": "A &quot;CSQ&quot; (0-31) signal quality",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "af358cab5f5054e324ffe358a3f62f236",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getPctFromCSQ",
              "brief": "Get signal percent from CSQ.",
              "description": "<p>The percent is grabbed from a look-up.</p>",
              "return_value": "The percent of maximum signal strength.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "csq",
                  "type": "int16_t",
                  "type_name": "int16_t csq",
                  "default": null,
                  "description": "A &quot;CSQ&quot; (0-31) signal quality",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a9ffabcad8be3116ff1adf561b89900f5",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getPctFromRSSI",
              "brief": "Get signal percent from CSQ.",
              "description": "",
              "return_value": "The estimated percent of maximum signal strength.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "rssi",
                  "type": "int16_t",
                  "type_name": "int16_t rssi",
                  "default": null,
                  "description": "The RSSI in dBm.",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Helper functions",
        "id": "helper-functions",
        "description": "<p><a name=\"modem_helper_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a474f614fe1793ec2647823f2c13d15b1",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "modemLEDOn",
              "brief": "Turn on the modem LED/alert pin - sets it <code>HIGH</code>",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a60a6df0a135b43b71aae030112e05ba9",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "modemLEDOff",
              "brief": "Turn off the modem LED/alert pin - sets it <code>LOW</code>",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a2d45d6bc24f1d9dc5858dab866e5cdaa",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "setModemPinModes",
              "brief": "Set the processor pin modes (input vs output, with and without pull-up) for all pins connected between the modem module and the mcu.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Pure virtual functions for each modem to implement",
        "id": "pure-virtual-functions-for-each-modem-to-implement",
        "description": "<p><a name=\"modem_virtual_functions\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "aa792daeb1b294f647d625a16490eacd9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isInternetAvailable",
              "brief": "Check whether there is an active internet connection available.",
              "description": "",
              "return_value": "True if there is an active data connection to the internet.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "ae4877eeb44faf17259f77c4739e01094",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "modemSleepFxn",
              "brief": "Perform the parts of the modem sleep process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
              "description": "",
              "return_value": "True if the unique part of the sleep function ran successfully.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "abef1afcab1083d994a960d40534eb409",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "modemWakeFxn",
              "brief": "Perform the parts of the modem wake up process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
              "description": "",
              "return_value": "True if the unique part of the wake function ran successfully - does <em>NOT</em> indicate that the modem is now responsive.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "ada9d40a4cf2af725d2de31c80c09be29",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "extraModemSetup",
              "brief": "Perform the parts of the modem set up process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
              "description": "<p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#ace5bab37413b7bcc6954068b5c9db9e5\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />EXTRA_<wbr />SETUP</a> macro which runs the TinyGSM modem init() and client init() functions.</p>",
              "return_value": "True if the extra setup succeeded.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classlogger_modem.html",
              "id": "a79572d6c1bdc13026f0e880f535b35d9",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isModemAwake",
              "brief": "Check if the modem was awake using all possible means.",
              "description": "<p>If possible, we always want to check if the modem was awake before attempting to wake it up. Most cellular modules are woken and put to sleep by identical pulses on a sleep or &quot;power&quot; pin. We don&#x27;t want to accidentally pulse an already on modem to off.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#af020f54b6e4a3bcaaf834107d37d8e2e\" class=\"m-doc\">MS_<wbr />IS_<wbr />MODEM_<wbr />AWAKE</a> macro.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>It&#x27;s possible that the status pin is on, but the modem is actually mid-shutdown. In that case, we&#x27;ll mistakenly skip re-waking it. This only applies to modules with a pulse wake (ie, non-zero wake time). For all modules that do pulse on, where possible I&#x27;ve selected a pulse time that is sufficient to wake but not quite long enough to put it to sleep and am using AT commands to sleep. This <em>should</em> keep everything lined up.</p></aside>",
              "return_value": "True if the modem is already awake.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": true,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "loggerModem",
        "classlogger_modem.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Primary Object Classes",
        "group__base__classes.html"
      ],
      [
        "loggerModem",
        "classlogger_modem.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "loggerModem::<wbr />"
  }
}