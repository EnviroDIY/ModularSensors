{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_bosch_b_m_p3xx",
    "name": "BoschBMP3xx",
    "url_base": "class_bosch_b_m_p3xx",
    "url": "class_bosch_b_m_p3xx.html",
    "include": [
      "&lt;src/sensors/BoschBMP3xx.h&gt;",
      "_bosch_b_m_p3xx_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__bmp3xx.html\" class=\"m-doc\">Bosch BMP3xx</a>.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "ace944aed3d3db1349da1e21bce7e8a87",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "BoschBMP3xx",
        "brief": "Construct a new Bosch BMP3xx object using the primary hardware I2C instance.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Neither secondary hardware nor software I2C is supported for the BMP3xx. Only the primary hardware I2C defined in the Arduino core can be used.</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>If you are logging data, make sure that your logging interval is <strong>greater than</strong> the length of the IIR filter multiplied by the standby time!</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>For the <a href=\"class_bosch_b_m_p3xx.html\" class=\"m-doc\">BoschBMP3xx</a> we do <em><strong>NOT</strong></em> provide a <code>measurementsToAverage</code> option. The sensor already provides on-board averaging by way of oversampling and the IIR filter, so there is no reason to average again on our part.</p></aside><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"group__sensor__bmp3xx.html#sensor_bmp3xx_pressure_osr\" class=\"m-doc\">Recommended Pressure Oversampling</a>, <a href=\"group__sensor__bmp3xx.html#sensor_bmp3xx_temp_osr\" class=\"m-doc\">Recommended Temperature Oversampling</a>, and <a href=\"group__sensor__bmp3xx.html#sensor_bmp3xx_filts_uses\" class=\"m-doc\">Settings by Use Case</a> for recommended settings</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": true,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "<p>The pin on the mcu controlling power to the BMP3XX Use -1 if it is continuously powered.</p><ul><li>The BMP3xx requires a 1.7 - 3.6V power source</li></ul>",
            "direction": ""
          },
          {
            "name": "mode",
            "type": "Mode",
            "type_name": "Mode mode",
            "default": "FORCED_MODE",
            "description": "<p>Data sampling mode<br />Possible values are:</p><ul><li><code>FORCED_MODE</code> - a single measurement is made upon request and the sensor immediately returns to sleep. This mode should be used if you are stopping power to the sensor between readings. You should not use this mode if you wish to use the sensor&#x27;s on-board IIR filter.</li><li><code>NORMAL_MODE</code> - the sensor alternates between sampling and sleeping at intervals set by the sensor output data rate, results can be read whenever needed. This mode should <em>not</em> be used if you will stop power to the sensor between readings. If you wish to use the sensor&#x27;s on-board filtering, you should use normal mode.</li></ul>",
            "direction": ""
          },
          {
            "name": "pressureOversample",
            "type": "Oversampling",
            "type_name": "Oversampling pressureOversample",
            "default": "OVERSAMPLING_X16",
            "description": "<p>Pressure oversampling setting<br />Possible values are:</p><ul><li><code>OVERSAMPLING_SKIP</code></li><li><code>OVERSAMPLING_X2</code></li><li><code>OVERSAMPLING_X4</code>,</li><li><code>OVERSAMPLING_X8</code></li><li><code>OVERSAMPLING_X16</code>,</li><li><code>OVERSAMPLING_X32</code></li></ul>",
            "direction": ""
          },
          {
            "name": "tempOversample",
            "type": "Oversampling",
            "type_name": "Oversampling tempOversample",
            "default": "OVERSAMPLING_X2",
            "description": "Temperature oversampling setting<br />Possible values are the same as those for pressureOversample. Using temperature oversampling above X2 is not recommended as it does not further improve pressure data quality.",
            "direction": ""
          },
          {
            "name": "filterCoeff",
            "type": "IIRFilter",
            "type_name": "IIRFilter filterCoeff",
            "default": "IIR_FILTER_OFF",
            "description": "<p>Coefficient of the infinite impulse response (IIR) filter (in samples).<br />This is number of past samples considered in calculating the current filtered value. This setting is <strong>ignored</strong> if the sensor will not be continuously powered. This only recommended when operating in &quot;normal&quot; sampling mode.<br />Possible values are:</p><ul><li><code>IIR_FILTER_OFF</code> (no filtering)</li><li><code>IIR_FILTER_1</code>,</li><li><code>IIR_FILTER_3</code></li><li><code>IIR_FILTER_7</code>,</li><li><code>IIR_FILTER_15</code></li><li><code>IIR_FILTER_31</code>,</li><li><code>IIR_FILTER_63</code></li><li><code>IIR_FILTER_127</code></li></ul>",
            "direction": ""
          },
          {
            "name": "timeStandby",
            "type": "TimeStandby",
            "type_name": "TimeStandby timeStandby",
            "default": "TIME_STANDBY_10MS",
            "description": "<p>Standby time between measurements when continuously powered and operating in normal mode.<br />This is the inverse of the output data rate (ODR).<br />This setting is <strong>ignored</strong> when operating in forced mode.<br />Possible values are:</p><ul><li><code>TIME_STANDBY_5MS</code> (ODR = 200 Hz)</li><li><code>TIME_STANDBY_10MS</code> (ODR = 100 Hz)</li><li><code>TIME_STANDBY_20MS</code> (ODR = 50 Hz)</li><li><code>TIME_STANDBY_40MS</code> (ODR = 25 Hz)</li><li><code>TIME_STANDBY_80MS</code> (ODR = 12.5 Hz)</li><li><code>TIME_STANDBY_160MS</code> (ODR = 6.25 Hz)</li><li><code>TIME_STANDBY_320MS</code> (ODR = 3.125 Hz)</li><li><code>TIME_STANDBY_640MS</code> (ODR = 1.5 Hz)</li><li><code>TIME_STANDBY_1280MS</code> (~1.2 seconds, ODR = 0.78 Hz)</li><li><code>TIME_STANDBY_2560MS</code> (~2.5 seconds, ODR = 0.39 Hz)</li><li><code>TIME_STANDBY_5120MS</code> (~5 seconds, ODR = 0.2 Hz)</li><li><code>TIME_STANDBY_10240MS</code> (~10 seconds, ODR = 0.1 Hz)</li><li><code>TIME_STANDBY_20480MS</code> (~20 seconds, ODR = 0.05 Hz)</li><li><code>TIME_STANDBY_40960MS</code> (~41 seconds, ODR = 0.025 Hz)</li><li><code>TIME_STANDBY_81920MS</code> (~82 seconds or 1.4 minutes, ODR = 0.0125 Hz)</li><li><code>TIME_STANDBY_163840MS</code> (~164 seconds or 2.7 minutes, ODR = 0.006 Hz)</li><li><code>TIME_STANDBY_327680MS</code> (~5.5 minutes, ODR = 0.003 Hz)</li><li><code>TIME_STANDBY_655360MS</code> (~11 minutes, ODR = 0.0015 Hz)</li></ul>",
            "direction": ""
          },
          {
            "name": "i2cAddressHex",
            "type": "uint8_t",
            "type_name": "uint8_t i2cAddressHex",
            "default": "0x76",
            "description": "The I2C address of the BMP3xx; must be either 0x76 or 0x77. The default value is 0x76.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "a30393092538195d0b1956fc18da79c1a",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~BoschBMP3xx",
        "brief": "Destroy the Bosch BMP3xx object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "ac49740f0f52e63806b83fc296ee19f60",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "wake",
        "brief": "Wake the sensor up, if necessary. Do whatever it takes to get a sensor in the proper state to begin a measurement.",
        "description": "<p>Verifies that the power is on and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. This also sets the <a href=\"class_sensor.html#a86541c88432508d6bc81a8fb41746e2e\" class=\"m-doc\">_<wbr />millisSensorActivated</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT include any wait for sensor readiness.</p></aside>",
        "return_value": "True if the wake function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "a21b44a6d65434bc15819cab545f04ebf",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This begins the Wire library (sets pin modes for I2C), reads calibration coefficients from the BMP3xx, and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. The BMP3xx must be powered for setup.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "a704248f3d7bbd0604aaa5a86fddf06c2",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "a93daabb8a78e496b5cd68f1273f50826",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "startSingleMeasurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "True if the start measurement function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_bosch_b_m_p3xx.html",
        "id": "a5020570e0f8145c5120d1fc2a3eadfb8",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "BoschBMP3xx",
        "class_bosch_b_m_p3xx.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Bosch BMP3xx",
        "group__sensor__bmp3xx.html"
      ],
      [
        "BoschBMP3xx",
        "class_bosch_b_m_p3xx.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "BoschBMP3xx::<wbr />"
  }
}