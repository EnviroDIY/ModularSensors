{
  "version": "1.14.0",
  "compound": {
    "kind": "group",
    "id": "group__sensor__analog__cond",
    "name": "Conductivity via Analog Electrical Resistance",
    "url_base": "group__sensor__analog__cond",
    "url": "group__sensor__analog__cond.html",
    "include": null,
    "has_template_details": false,
    "templates": null,
    "brief": "",
    "description": "<p>Classes for measuring conductivity using a simple analog voltage divider.</p><section id=\"sensor_analog_cond_notes\"><h2>Introduction</h2><p>This is for a very basic conductivity circuit built with a single resistor and an old power cord. DC power is briefly supplied across the power cord causing the water to act as one of the resistors on a voltage divider. Knowing the voltage of the other resistor in the divider, we can calculate to resistance from the water (and then its electrical conductivity) based on the drop in volage across the divider.</p><p>For this to work, the power across the circuit <strong>MUST</strong> be turned off between readings. If the power to the circuit is left on the water will become polarized and the values will not be valid. The water temperature (if used) must be supplied separately for a calculation.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The return from this &quot;sensor&quot; is conductivity - not the typically reported specific conductance, which is referenced to 25\u00b0C. The temperature compensation, if desired, should be done via a calculated variable. See the example code as a guide.</p></aside></section><section id=\"sensor_analog_cond_circuit\"><h2>The Circuit</h2><p>One pole of the power cord wire is connected to the ground of the main logger board. The other pole is connected to the sensor power supply via a resistor of known resistance (R1) and then to an analog pin to measure the voltage.</p><p>So the circuit is:</p><div class=\"m-code-pygments-default\"><div class=\"highlight\"><div class=\"line\"><a id=\"l-1\" name=\"l-1\"></a><span class=\"linenos\">1</span>Vin (sensor power) --- R1 --- power cord  --- Vout</div>\n<div class=\"line\"><a id=\"l-2\" name=\"l-2\"></a><span class=\"linenos\">2</span>                                   |</div>\n<div class=\"line\"><a id=\"l-3\" name=\"l-3\"></a><span class=\"linenos\">3</span>                                   |</div>\n<div class=\"line\"><a id=\"l-4\" name=\"l-4\"></a><span class=\"linenos\">4</span>                      water between prongs (Rwater)</div>\n<div class=\"line\"><a id=\"l-5\" name=\"l-5\"></a><span class=\"linenos\">5</span>                                   |</div>\n<div class=\"line\"><a id=\"l-6\" name=\"l-6\"></a><span class=\"linenos\">6</span>                                   |</div>\n<div class=\"line\"><a id=\"l-7\" name=\"l-7\"></a><span class=\"linenos\">7</span>                                ground\n</div></div></div><p>The above diagram and the calculations assume the resistance of the analog pins themselves on the Arduino is negligible.</p></section><section id=\"sensor_analog_cond_calcs\"><h2>Calculating the Conductivity</h2><p>First, we need to convert the bit reading of the ADC into volts based on the range of the ADC (1 bit more than the resolution):</p><p class=\"m-code m-math\">\\[meas\\_voltage = \\frac{analog\\_ref\\_voltage * raw\\_adc\\_bits}{ANALOG\\_EC\\_ADC\\_RANGE}\\]</p><p>Assuming the voltage of the ADC reference is the same as that used to power the EC resistor circuit we can replace the reference voltage with the sensor power voltage:</p><p class=\"m-code m-math\">\\[meas\\_voltage = \\frac{sensor\\_power\\_voltage * raw\\_adc\\_bits}{ANALOG\\_EC\\_ADC\\_RANGE}\\]</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The Vcc going to the circuit (~3.3V) can and will vary, as battery level gets low. If possible, you should use setup the processor to use an external reference (<code>-D MS_PROCESSOR_ADC_REFERENCE_MODE=EXTERNAL</code>) and tie the Aref pin to the sensor power pin.</p><p>The analog reference of the Mayfly is not broken out (and is tied to ground). If using a Mayfly, you have no choice by to use the internal analog reference.</p></aside><p>Now we can calculate the resistance of the water, knowing the resistance of the resistor we put in the circuit and the voltage drop:</p><p class=\"m-code m-math\">\\[R_{water\\_ohms} = \\frac{meas\\_voltage * R_{series\\_ohms}}{sensor\\_power\\_voltage - meas\\_voltage}\\]</p><p>Combining the above equations and doing some rearranging, we get:</p><p class=\"m-code m-math\">\\[R_{water\\_ohms} = \\frac{R_{series\\_ohms}}{\\frac{ANALOG\\_EC\\_ADC\\_RANGE}{raw\\_adc\\_bits} - 1}\\]</p><p>The conductivity is then the inverse of the resistance - multiplied by a measured cell constant and a 10^6 conversion to \u00b5S/cm.</p><p class=\"m-code m-math\">\\[water\\_conductivity = \\frac{1000000}{R_{water\\_ohms} * sensor_{EC\\_Konst}}\\]</p><p>The real cell constant will vary based on the size of the &quot;cell&quot; - that is, the size of the plug on the power cord. You can calculate the cell constant for each power cord sensor you use following the <a href=\"https://hackaday.io/project/7008-fly-wars-a-hackers-solution-to-world-hunger/log/24646-three-dollar-ec-ppm-meter-arduino\">calibration program</a>.</p><p>For one AC Power Cord 12t with male IEC 320-C8 connector the cell constant was 2.88.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>These calculations are for the on-board processor ADC, not an external ACD like the TI ADS1115 built into the Mayfly!</p></aside></section><section id=\"sensor_analog_cond_ref\"><h2>References</h2><ul><li>For the sensor setup and calculations: <a href=\"https://hackaday.io/project/7008-fly-wars-a-hackers-solution-to-world-hunger/log/24646-three-dollar-ec-ppm-meter-arduino\">https:/<wbr />/<wbr />hackaday.io/<wbr />project/<wbr />7008-fly-wars-a-hackers-solution-to-world-hunger/<wbr />log/<wbr />24646-three-dollar-ec-ppm-meter-arduino</a></li><li>For temperature compensation: <a href=\"https://link.springer.com/article/10.1023/B:EMAS.0000031719.83065.68\">https:/<wbr />/<wbr />link.springer.com/<wbr />article/<wbr />10.1023/<wbr />B:EMAS.0000031719.83065.68</a></li></ul></section><section id=\"sensor_analog_cond_flags\"><h2>Build flags</h2><ul><li><code>-D MS_PROCESSOR_ADC_RESOLUTION=##</code><ul><li>used to set the resolution of the processor ADC</li><li><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_mod_sensor_config_8h.html#a69b500d0604dd4ce0b271b5ccd4d3500\" class=\"m-doc\">MS_<wbr />PROCESSOR_<wbr />ADC_<wbr />RESOLUTION</a></p></aside></li></ul></li><li><code>-D MS_PROCESSOR_ADC_REFERENCE_MODE=xxx</code><ul><li>used to set the processor ADC value reference mode</li><li><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_mod_sensor_config_8h.html#af2195de1fe76fbfc54c9d2e7f7951646\" class=\"m-doc\">MS_<wbr />PROCESSOR_<wbr />ADC_<wbr />REFERENCE_<wbr />MODE</a></p></aside></li></ul></li></ul></section><section id=\"sensor_analog_cond_ctor\"><h2>Sensor Constructor</h2><p>{{ <a href=\"class_analog_elec_conductivity.html#a66c05fe87f6c708042c97236c333aa76\" class=\"m-doc\">AnalogElecConductivity::<wbr />AnalogElecConductivity</a> }}</p><hr/></section><section id=\"sensor_analog_cond_examples\"><h2>Example Code</h2><p>The analog electrical conductivity sensor is used in the <a href=\"example_menu.html#menu_walk_analog_elec_conductivity\" class=\"m-doc\">menu a la carte</a> example.</p><div class=\"m-code-arduino\"><div class=\"highlight\"><div class=\"line\"><a id=\"l-1\" name=\"l-1\"></a><span class=\"linenos\"> 1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sensors/AnalogElecConductivity.h&gt;</span></div>\n<div class=\"line\"><a id=\"l-2\" name=\"l-2\"></a><span class=\"linenos\"> 2</span></div>\n<div class=\"line\"><a id=\"l-3\" name=\"l-3\"></a><span class=\"linenos\"> 3</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">int8_t</span><span class=\"w\"> </span><span class=\"n\">ECpwrPin</span><span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A4</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Power pin (-1 if continuously powered)</span></div>\n<div class=\"line\"><a id=\"l-4\" name=\"l-4\"></a><span class=\"linenos\"> 4</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">int8_t</span><span class=\"w\"> </span><span class=\"n\">ECdataPin1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A0</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Data pin (must be an analog pin, ie A#)</span></div>\n<div class=\"line\"><a id=\"l-5\" name=\"l-5\"></a><span class=\"linenos\"> 5</span></div>\n<div class=\"line\"><a id=\"l-6\" name=\"l-6\"></a><span class=\"linenos\"> 6</span><span class=\"c1\">// Create an Analog Electrical Conductivity sensor object</span></div>\n<div class=\"line\"><a id=\"l-7\" name=\"l-7\"></a><span class=\"linenos\"> 7</span><span class=\"n\">AnalogElecConductivity</span><span class=\"w\"> </span><span class=\"nf\">analogEC_phy</span><span class=\"p\">(</span><span class=\"n\">ECpwrPin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ECdataPin1</span><span class=\"p\">);</span></div>\n<div class=\"line\"><a id=\"l-8\" name=\"l-8\"></a><span class=\"linenos\"> 8</span></div>\n<div class=\"line\"><a id=\"l-9\" name=\"l-9\"></a><span class=\"linenos\"> 9</span><span class=\"c1\">// Create a conductivity variable pointer for the analog sensor</span></div>\n<div class=\"line\"><a id=\"l-10\" name=\"l-10\"></a><span class=\"linenos\">10</span><span class=\"n\">Variable</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogEc_cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">AnalogElecConductivity_EC</span><span class=\"p\">(</span></div>\n<div class=\"line\"><a id=\"l-11\" name=\"l-11\"></a><span class=\"linenos\">11</span><span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">analogEC_phy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;12345678-abcd-1234-ef00-1234567890ab&quot;</span><span class=\"p\">);</span></div>\n<div class=\"line\"><a id=\"l-12\" name=\"l-12\"></a><span class=\"linenos\">12</span></div>\n<div class=\"line\"><a id=\"l-13\" name=\"l-13\"></a><span class=\"linenos\">13</span><span class=\"c1\">// Create a calculated variable for the temperature compensated conductivity</span></div>\n<div class=\"line\"><a id=\"l-14\" name=\"l-14\"></a><span class=\"linenos\">14</span><span class=\"c1\">// (that is, the specific conductance).  For this example, we will use the</span></div>\n<div class=\"line\"><a id=\"l-15\" name=\"l-15\"></a><span class=\"linenos\">15</span><span class=\"c1\">// temperature measured by the Maxim DS18 saved as ds18Temp several sections</span></div>\n<div class=\"line\"><a id=\"l-16\" name=\"l-16\"></a><span class=\"linenos\">16</span><span class=\"c1\">// above this.  You could use the temperature returned by any other water</span></div>\n<div class=\"line\"><a id=\"l-17\" name=\"l-17\"></a><span class=\"linenos\">17</span><span class=\"c1\">// temperature sensor if desired.  **DO NOT** use your logger board temperature</span></div>\n<div class=\"line\"><a id=\"l-18\" name=\"l-18\"></a><span class=\"linenos\">18</span><span class=\"c1\">// (ie, from the DS3231) to calculate specific conductance!</span></div>\n<div class=\"line\"><a id=\"l-19\" name=\"l-19\"></a><span class=\"linenos\">19</span><span class=\"kr\">float</span><span class=\"w\"> </span><span class=\"nf\">calculateAnalogSpCond</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span></div>\n<div class=\"line\"><a id=\"l-20\" name=\"l-20\"></a><span class=\"linenos\">20</span><span class=\"w\">    </span><span class=\"kr\">float</span><span class=\"w\"> </span><span class=\"n\">spCond</span><span class=\"w\">          </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">-9999</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Always safest to start with a bad value</span></div>\n<div class=\"line\"><a id=\"l-21\" name=\"l-21\"></a><span class=\"linenos\">21</span><span class=\"w\">    </span><span class=\"kr\">float</span><span class=\"w\"> </span><span class=\"n\">waterTemp</span><span class=\"w\">       </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ds18Temp</span><span class=\"o\">-&gt;</span><span class=\"n\">getValue</span><span class=\"p\">();</span></div>\n<div class=\"line\"><a id=\"l-22\" name=\"l-22\"></a><span class=\"linenos\">22</span><span class=\"w\">    </span><span class=\"kr\">float</span><span class=\"w\"> </span><span class=\"n\">rawCond</span><span class=\"w\">         </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">analogEc_cond</span><span class=\"o\">-&gt;</span><span class=\"n\">getValue</span><span class=\"p\">();</span></div>\n<div class=\"line\"><a id=\"l-23\" name=\"l-23\"></a><span class=\"linenos\">23</span><span class=\"w\">    </span><span class=\"kr\">float</span><span class=\"w\"> </span><span class=\"n\">temperatureCoef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.019</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-24\" name=\"l-24\"></a><span class=\"linenos\">24</span><span class=\"w\">    </span><span class=\"c1\">// ^^ Linearized temperature correction coefficient per degrees Celsius.</span></div>\n<div class=\"line\"><a id=\"l-25\" name=\"l-25\"></a><span class=\"linenos\">25</span><span class=\"w\">    </span><span class=\"c1\">// The value of 0.019 comes from measurements reported here:</span></div>\n<div class=\"line\"><a id=\"l-26\" name=\"l-26\"></a><span class=\"linenos\">26</span><span class=\"w\">    </span><span class=\"c1\">// Hayashi M. Temperature-electrical conductivity relation of water for</span></div>\n<div class=\"line\"><a id=\"l-27\" name=\"l-27\"></a><span class=\"linenos\">27</span><span class=\"w\">    </span><span class=\"c1\">// environmental monitoring and geophysical data inversion. Environ Monit</span></div>\n<div class=\"line\"><a id=\"l-28\" name=\"l-28\"></a><span class=\"linenos\">28</span><span class=\"w\">    </span><span class=\"c1\">// Assess. 2004 Aug-Sep;96(1-3):119-28.</span></div>\n<div class=\"line\"><a id=\"l-29\" name=\"l-29\"></a><span class=\"linenos\">29</span><span class=\"w\">    </span><span class=\"c1\">// doi: 10.1023/b:emas.0000031719.83065.68. PMID: 15327152.</span></div>\n<div class=\"line\"><a id=\"l-30\" name=\"l-30\"></a><span class=\"linenos\">30</span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">waterTemp</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">-9999</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">rawCond</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">-9999</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span></div>\n<div class=\"line\"><a id=\"l-31\" name=\"l-31\"></a><span class=\"linenos\">31</span><span class=\"w\">        </span><span class=\"c1\">// make sure both inputs are good</span></div>\n<div class=\"line\"><a id=\"l-32\" name=\"l-32\"></a><span class=\"linenos\">32</span><span class=\"w\">        </span><span class=\"n\">spCond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rawCond</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">temperatureCoef</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">waterTemp</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">25.0</span><span class=\"p\">));</span></div>\n<div class=\"line\"><a id=\"l-33\" name=\"l-33\"></a><span class=\"linenos\">33</span><span class=\"w\">    </span><span class=\"p\">}</span></div>\n<div class=\"line\"><a id=\"l-34\" name=\"l-34\"></a><span class=\"linenos\">34</span><span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">spCond</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-35\" name=\"l-35\"></a><span class=\"linenos\">35</span><span class=\"p\">}</span></div>\n<div class=\"line\"><a id=\"l-36\" name=\"l-36\"></a><span class=\"linenos\">36</span></div>\n<div class=\"line\"><a id=\"l-37\" name=\"l-37\"></a><span class=\"linenos\">37</span><span class=\"c1\">// Properties of the calculated variable</span></div>\n<div class=\"line\"><a id=\"l-38\" name=\"l-38\"></a><span class=\"linenos\">38</span><span class=\"c1\">// The number of digits after the decimal place</span></div>\n<div class=\"line\"><a id=\"l-39\" name=\"l-39\"></a><span class=\"linenos\">39</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">analogSpCondResolution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-40\" name=\"l-40\"></a><span class=\"linenos\">40</span><span class=\"c1\">// This must be a value from http://vocabulary.odm2.org/variablename/</span></div>\n<div class=\"line\"><a id=\"l-41\" name=\"l-41\"></a><span class=\"linenos\">41</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogSpCondName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;specificConductance&quot;</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-42\" name=\"l-42\"></a><span class=\"linenos\">42</span><span class=\"c1\">// This must be a value from http://vocabulary.odm2.org/units/</span></div>\n<div class=\"line\"><a id=\"l-43\" name=\"l-43\"></a><span class=\"linenos\">43</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogSpCondUnit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;microsiemenPerCentimeter&quot;</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-44\" name=\"l-44\"></a><span class=\"linenos\">44</span><span class=\"c1\">// A short code for the variable</span></div>\n<div class=\"line\"><a id=\"l-45\" name=\"l-45\"></a><span class=\"linenos\">45</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogSpCondCode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;anlgSpCond&quot;</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-46\" name=\"l-46\"></a><span class=\"linenos\">46</span><span class=\"c1\">// The (optional) universally unique identifier</span></div>\n<div class=\"line\"><a id=\"l-47\" name=\"l-47\"></a><span class=\"linenos\">47</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kr\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogSpCondUUID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;12345678-abcd-1234-ef00-1234567890ab&quot;</span><span class=\"p\">;</span></div>\n<div class=\"line\"><a id=\"l-48\" name=\"l-48\"></a><span class=\"linenos\">48</span></div>\n<div class=\"line\"><a id=\"l-49\" name=\"l-49\"></a><span class=\"linenos\">49</span><span class=\"c1\">// Finally, Create the specific conductance variable and return a pointer to it</span></div>\n<div class=\"line\"><a id=\"l-50\" name=\"l-50\"></a><span class=\"linenos\">50</span><span class=\"n\">Variable</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">analogEc_spcond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">(</span></div>\n<div class=\"line\"><a id=\"l-51\" name=\"l-51\"></a><span class=\"linenos\">51</span><span class=\"w\">    </span><span class=\"n\">calculateAnalogSpCond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">analogSpCondResolution</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">analogSpCondName</span><span class=\"p\">,</span></div>\n<div class=\"line\"><a id=\"l-52\" name=\"l-52\"></a><span class=\"linenos\">52</span><span class=\"w\">    </span><span class=\"n\">analogSpCondUnit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">analogSpCondCode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">analogSpCondUUID</span><span class=\"p\">);</span>\n</div></div></div></section>",
    "sections": [
      [
        "sensor_analog_cond_notes",
        "Introduction",
        []
      ],
      [
        "sensor_analog_cond_circuit",
        "The Circuit",
        []
      ],
      [
        "sensor_analog_cond_calcs",
        "Calculating the Conductivity",
        []
      ],
      [
        "sensor_analog_cond_ref",
        "References",
        []
      ],
      [
        "sensor_analog_cond_flags",
        "Build flags",
        []
      ],
      [
        "sensor_analog_cond_ctor",
        "Sensor Constructor",
        []
      ],
      [
        "sensor_analog_cond_examples",
        "Example Code",
        []
      ]
    ],
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [
      {
        "kind": "class",
        "url": "class_analog_elec_conductivity.html",
        "name": "AnalogElecConductivity",
        "brief": "Class for the analog [Electrical Conductivity monitor](<a href=\"group__sensor__analog__cond.html\" class=\"m-doc\">Conductivity via Analog Electrical Resistance</a>)",
        "deprecated": null,
        "since": null,
        "templates": null
      },
      {
        "kind": "class",
        "url": "class_analog_elec_conductivity___e_c.html",
        "name": "AnalogElecConductivity_EC",
        "brief": "The <a href=\"class_variable.html\" class=\"m-doc\">Variable</a> sub-class used for electrical conductivity measured using an analog pin connected to electrodes submerged in the medium.",
        "deprecated": null,
        "since": null,
        "templates": null
      }
    ],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Sensor Variable Counts",
        "id": "sensor-variable-counts",
        "description": "<p><a name=\"sensor_analog_cond_parts_var_counts\"></a> The number of variables that can be returned by the analog conductivity sensor</p>",
        "members": [
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "gadff49875437dbdf485b0d7e8b38119bf",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_NUM_VARIABLES",
              "initializer": "1",
              "brief": "<a href=\"class_sensor.html#af26786329fd01b44cf31410d046fc8f3\" class=\"m-doc\">Sensor::<wbr />_numReturnedValues</a>; we only get one value from the analog conductivity sensor.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga0f9a765449bd767de386d03da995520b",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_INC_CALC_VARIABLES",
              "initializer": "0",
              "brief": "<a href=\"class_sensor.html#a2f3f93a9205efb134cef1216d65077d2\" class=\"m-doc\">Sensor::<wbr />_incCalcValues</a>; we don&#x27;t calculate any additional values though we recommend users include a temperature sensor and calculate specific conductance in their own program.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ]
        ]
      },
      {
        "name": "Configuration Defines",
        "id": "configuration-defines",
        "description": "<p><a name=\"sensor_analog_cond_parts_config\"></a> Defines to help configure the range and resolution of the home-made conductivity sensor depending on the processor and ADC in use.</p>",
        "members": [
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga9ba41421c44c6d3c44e72a51ee203806",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "RSERIES_OHMS_DEF",
              "initializer": "499",
              "brief": "The default resistance (in ohms) of the measuring resistor. This should not be less than 300 ohms when measuring EC in water.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga3674aa1b2b032ed25ebd42ed473675bb",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "SENSOREC_KONST_DEF",
              "initializer": "1.0",
              "brief": "Cell Constant For EC Measurements.",
              "description": "<p>This should be measured following the calibration example on <a href=\"https://hackaday.io/project/7008-fly-wars-a-hackers-solution-to-world-hunger/log/24646-three-dollar-ec-ppm-meter-arduino\">https:/<wbr />/<wbr />hackaday.io/<wbr />project/<wbr />7008-fly-wars-a-hackers-solution-to-world-hunger/<wbr />log/<wbr />24646-three-dollar-ec-ppm-meter-arduino</a>.</p><p>Mine was around 2.9 with plugs being a standard size they should all be around the same. If you get bad readings you can use the calibration script and fluid to get a better estimate for K. Default to 1.0, and can be set at startup.</p>",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ]
        ]
      },
      {
        "name": "Sensor Timing",
        "id": "sensor-timing",
        "description": "<p><a name=\"sensor_analog_cond_parts_timing\"></a> The timing for analog conductivity via resistance.</p>",
        "members": [
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "gaf8a40fdca74f6f9f9053e40d1dc30fe5",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_WARM_UP_TIME_MS",
              "initializer": "2",
              "brief": "<a href=\"class_sensor.html#aaaefd7f306f86382a3dac726531756b4\" class=\"m-doc\">Sensor::<wbr />_warmUpTime_ms</a>; giving 2ms for warm-up.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "gaf07555e87ca6d06100af4fca97612472",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_STABILIZATION_TIME_MS",
              "initializer": "1",
              "brief": "<a href=\"class_sensor.html#ad6822ad09fb64658c911ce86820db79c\" class=\"m-doc\">Sensor::<wbr />_stabilizationTime_ms</a>; we give just a tiny delay for stabilization.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "gac910dea8e5e6f77eb62f286d599c1e6b",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_MEASUREMENT_TIME_MS",
              "initializer": "0",
              "brief": "<a href=\"class_sensor.html#a0327d79459eaf3065c9e84b8c789c4ba\" class=\"m-doc\">Sensor::<wbr />_measurementTime_ms</a>; we assume the analog voltage is measured instantly.",
              "description": "<p>It&#x27;s not really <em>quite</em> instantly, but it is very fast and the time to measure is included in the read function. On ATmega based boards (UNO, Nano, Mini, Mega), it takes about 100 microseconds (0.0001 s) to read an analog input, so the maximum reading rate is about 10,000 times a second.</p>",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ]
        ]
      },
      {
        "name": "Electrical Conductance",
        "id": "electrical-conductance",
        "description": "<p><a name=\"sensor_analog_cond_parts_ec\"></a> The electrical conductance variable from a home-made analog sensor.</p><p>{{ <a href=\"class_analog_elec_conductivity___e_c.html#a1a650a2b3972328222da3841f0196cf4\" class=\"m-doc\">AnalogElecConductivity_EC::<wbr />AnalogElecConductivity_EC</a> }}</p>",
        "members": [
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga6f98dedc961028af8124849d98f37b22",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_EC_RESOLUTION",
              "initializer": "1",
              "brief": "Decimals places in string representation; EC should have 1.",
              "description": "<p>Range of 0-3V3 with 10bit ADC - resolution of 0.003 = 3 \u00b5S/cm.</p>",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga7e6b60448dd178eeff15f5c721590782",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_EC_VAR_NUM",
              "initializer": "0",
              "brief": "<a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> variable number; EC is stored in sensorValues[0].",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga2d7eafbf7ffb16bd07f081ac264cd4dd",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_EC_VAR_NAME",
              "initializer": "\"electricalConductivity\"",
              "brief": "<a href=\"class_variable.html\" class=\"m-doc\">Variable</a> name in <a href=\"http://vocabulary.odm2.org/variablename/\">ODM2 controlled vocabulary</a>; &quot;electricalConductivity&quot;.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga30342e2736369eeac02306c6a5fa3080",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_EC_UNIT_NAME",
              "initializer": "\"microsiemenPerCentimeter\"",
              "brief": "<a href=\"class_variable.html\" class=\"m-doc\">Variable</a> unit name in <a href=\"http://vocabulary.odm2.org/units/\">ODM2 controlled vocabulary</a>; &quot;microsiemenPerCentimeter&quot; (\u00b5S/cm)",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ],
          [
            "define",
            {
              "base_url": "group__sensor__analog__cond.html",
              "id": "ga3ff0849107a02c6b157fcc64da2bd800",
              "include": [
                "&lt;src/sensors/AnalogElecConductivity.h&gt;",
                "_analog_elec_conductivity_8h.html"
              ],
              "has_details": true,
              "name": "ANALOGELECCONDUCTIVITY_EC_DEFAULT_CODE",
              "initializer": "\"anlgEc\"",
              "brief": "Default variable short code; &quot;anlgEc&quot;.",
              "description": "",
              "return_value": null,
              "deprecated": null,
              "since": null,
              "has_param_details": false,
              "params": null
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": false,
    "has_var_details": false,
    "has_define_details": true,
    "breadcrumb": [
      [
        "Supported Sensors",
        "group__the__sensors.html"
      ],
      [
        "Conductivity via Analog Electrical Resistance",
        "group__sensor__analog__cond.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Conductivity via Analog Electrical Resistance",
        "group__sensor__analog__cond.html"
      ]
    ]
  }
}