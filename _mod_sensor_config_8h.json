{
  "version": "1.14.0",
  "compound": {
    "kind": "file",
    "id": "_mod_sensor_config_8h",
    "name": "ModSensorConfig.h",
    "url_base": "_mod_sensor_config_8h",
    "url": "_mod_sensor_config_8h.html",
    "include": null,
    "has_template_details": false,
    "templates": null,
    "brief": "This file is used to configure the clock and other library settings/preferences for the Modular Sensors Library.",
    "description": "<aside class=\"m-note m-default\"><h4>Copyright</h4><p>Stroud Water Research Center Part of the EnviroDIY ModularSensors library for Arduino. This library is published under the BSD-3 license.</p></aside><aside class=\"m-note m-default\"><h4>Author</h4><p>Sara Geleskie Damiano <a href=\"mailto:sdamiano@stroudcenter.org\">sdamiano@stroudcenter.org</a></p></aside><p>For the Arduino IDE, this is the only way to configure these settings. If you are using PlatformIO, you have the option of using this file or changing your configuration using build flags in your platformio.ini. Compile times will be shorter if you use this file instead of build flags, but it is much easier to track changes in your platformio.ini file than in this file.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "ae5f82ab068d4df7edfe724ee5bec5b5a",
        "include": null,
        "has_details": true,
        "name": "MS_LOGGERBASE_BUTTON_BENCH_TEST",
        "initializer": "false",
        "brief": "Enable bench testing mode for the testing button.",
        "description": "<p>When enabled, the testing button uses the benchTestingMode() function to repeatedly read and print out sensor data. When disabled (default), the testing button causes a reading to be taken and transmitted immediately using the normal procedure.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a41630a112b576cb232294bff4e8790c9",
        "include": null,
        "has_details": true,
        "name": "SDCARD_SPI",
        "initializer": "SPI",
        "brief": "The SPI port to use for the SD card.",
        "description": "<p>This is typically defined in the board variant file.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a6c57d4073fecd98485bc52c2f8f40c46",
        "include": null,
        "has_details": false,
        "name": "MS_LOGGER_EPOCH",
        "initializer": null,
        "brief": "The epoch start to use for the logger.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "aaa4cb795a30c0973e52e7bb92b11de81",
        "include": null,
        "has_details": true,
        "name": "EARLIEST_SANE_UNIX_TIMESTAMP",
        "initializer": "1735689600",
        "brief": "The earliest unix timestamp that can be considered sane.",
        "description": "<p>January 1, 2025</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "ad6b6ed400fb9256bdff2023f8f6b4759",
        "include": null,
        "has_details": true,
        "name": "LATEST_SANE_UNIX_TIMESTAMP",
        "initializer": "2051222400",
        "brief": "The latest unix timestamp that can be considered sane.",
        "description": "<p>January 1, 2035</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a489012644f58dc86180ebb32d7891600",
        "include": null,
        "has_details": true,
        "name": "MAX_NUMBER_VARS",
        "initializer": "21",
        "brief": "The largest number of variables from a single sensor.",
        "description": "<p>Every sensor will create a buffer of this length for holding variable values. Decrease this value to save a memory.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a69b500d0604dd4ce0b271b5ccd4d3500",
        "include": null,
        "has_details": true,
        "name": "MS_PROCESSOR_ADC_RESOLUTION",
        "initializer": "10",
        "brief": "Select or adjust the processor analog resolution.",
        "description": "<p>This is the resolution of the <strong>built-in</strong> processor ADC and it cannot be set higher than what your processor actually supports. This does <strong>not</strong> apply to the TI ADS1115 or ADS1015 external ADS.</p><p>The default for AVR boards is 10 and for other boards is 12.</p><p>Future note: The ESP32 has a 12 bit ADC and the ESP8266 has a 10 bit ADC.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a5dbe7bc29c92b06ef81f1121552f5880",
        "include": null,
        "has_details": false,
        "name": "PROCESSOR_ADC_MAX",
        "initializer": "((1 << ",
        "brief": "The maximum possible value of the ADC - one less than the resolution shifted up one bit.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a3c12a31542da881a89944e282e05b3d0",
        "include": null,
        "has_details": false,
        "name": "PROCESSOR_ADC_RANGE",
        "initializer": "(1 << ",
        "brief": "The maximum possible range of the ADC - the resolution shifted up one bit.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "af2195de1fe76fbfc54c9d2e7f7951646",
        "include": null,
        "has_details": true,
        "name": "MS_PROCESSOR_ADC_REFERENCE_MODE",
        "initializer": "DEFAULT",
        "brief": "The voltage reference mode for the processor&#x27;s ADC.",
        "description": "<p>For an AVR board, this must be one of:</p><ul><li><code>DEFAULT</code>: the default built-in analog reference of 5 volts (on 5V Arduino boards) or 3.3 volts (on 3.3V Arduino boards)</li><li><code>INTERNAL</code>: a built-in reference, equal to 1.1 volts on the ATmega168 or ATmega328P and 2.56 volts on the ATmega32U4 and ATmega8 (not available on the Arduino Mega)</li><li><code>INTERNAL1V1</code>: a built-in 1.1V reference (Arduino Mega only)</li><li><code>INTERNAL2V56</code>: a built-in 2.56V reference (Arduino Mega only)</li><li><code>EXTERNAL</code>: the voltage applied to the AREF pin (0 to 5V only) is used as the reference.</li></ul><p>If not set on an AVR board <code>DEFAULT</code> is used.</p><p>For the best accuracy, use an <code>EXTERNAL</code> reference with the AREF pin connected to the power supply for the EC sensor.</p><p>For a SAMD board, this must be one of:</p><ul><li><code>AR_DEFAULT</code>: the default built-in analog reference of 3.3V</li><li><code>AR_INTERNAL</code>: a built-in 2.23V reference</li><li><code>AR_INTERNAL1V0</code>: a built-in 1.0V reference</li><li><code>AR_INTERNAL1V65</code>: a built-in 1.65V reference</li><li><code>AR_INTERNAL2V23</code>: a built-in 2.23V reference</li><li><code>AR_EXTERNAL</code>: the voltage applied to the AREF pin is used as the reference</li></ul><p>If not set on an SAMD board <code>AR_DEFAULT</code> is used.</p><p>For the best accuracy, use an <code>AR_EXTERNAL</code> reference with the AREF pin connected to the power supply for the EC sensor. On most Adafruit SAMD51 boards, there is an optional solder jumper to connect the AREF pin to the 3.3V supply. I suggest you close the jumper! On an EnviroDIY Stonefly, there is also a solder jumper, but on the Stonefly the jumper is <em>closed by default.</em></p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"https://www.arduino.cc/reference/en/language/functions/analog-io/analogreference/\">https:/<wbr />/<wbr />www.arduino.cc/<wbr />reference/<wbr />en/<wbr />language/<wbr />functions/<wbr />analog-io/<wbr />analogreference/<wbr /></a></p></aside>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "af2195de1fe76fbfc54c9d2e7f7951646",
        "include": null,
        "has_details": true,
        "name": "MS_PROCESSOR_ADC_REFERENCE_MODE",
        "initializer": "AR_DEFAULT",
        "brief": "The voltage reference mode for the processor&#x27;s ADC.",
        "description": "<p>For an AVR board, this must be one of:</p><ul><li><code>DEFAULT</code>: the default built-in analog reference of 5 volts (on 5V Arduino boards) or 3.3 volts (on 3.3V Arduino boards)</li><li><code>INTERNAL</code>: a built-in reference, equal to 1.1 volts on the ATmega168 or ATmega328P and 2.56 volts on the ATmega32U4 and ATmega8 (not available on the Arduino Mega)</li><li><code>INTERNAL1V1</code>: a built-in 1.1V reference (Arduino Mega only)</li><li><code>INTERNAL2V56</code>: a built-in 2.56V reference (Arduino Mega only)</li><li><code>EXTERNAL</code>: the voltage applied to the AREF pin (0 to 5V only) is used as the reference.</li></ul><p>If not set on an AVR board <code>DEFAULT</code> is used.</p><p>For the best accuracy, use an <code>EXTERNAL</code> reference with the AREF pin connected to the power supply for the EC sensor.</p><p>For a SAMD board, this must be one of:</p><ul><li><code>AR_DEFAULT</code>: the default built-in analog reference of 3.3V</li><li><code>AR_INTERNAL</code>: a built-in 2.23V reference</li><li><code>AR_INTERNAL1V0</code>: a built-in 1.0V reference</li><li><code>AR_INTERNAL1V65</code>: a built-in 1.65V reference</li><li><code>AR_INTERNAL2V23</code>: a built-in 2.23V reference</li><li><code>AR_EXTERNAL</code>: the voltage applied to the AREF pin is used as the reference</li></ul><p>If not set on an SAMD board <code>AR_DEFAULT</code> is used.</p><p>For the best accuracy, use an <code>AR_EXTERNAL</code> reference with the AREF pin connected to the power supply for the EC sensor. On most Adafruit SAMD51 boards, there is an optional solder jumper to connect the AREF pin to the 3.3V supply. I suggest you close the jumper! On an EnviroDIY Stonefly, there is also a solder jumper, but on the Stonefly the jumper is <em>closed by default.</em></p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"https://www.arduino.cc/reference/en/language/functions/analog-io/analogreference/\">https:/<wbr />/<wbr />www.arduino.cc/<wbr />reference/<wbr />en/<wbr />language/<wbr />functions/<wbr />analog-io/<wbr />analogreference/<wbr /></a></p></aside>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a4222b0bca1e5bd18869a3328d9ba5750",
        "include": null,
        "has_details": false,
        "name": "MAX_NUMBER_SENDERS",
        "initializer": "4",
        "brief": "The largest number of publishers that can be attached to a logger.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a7d36ea3ed5be76cf5b08f1c53e58ef3c",
        "include": null,
        "has_details": false,
        "name": "MS_ALWAYS_FLUSH_PUBLISHERS",
        "initializer": "false",
        "brief": "Set this to true to always force publishers to attempt to transmit data. If false, publishers will only transmit data at the sendEveryX interval or when the buffer fills.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a81b769375c72853184e1c40c56a5dfd9",
        "include": null,
        "has_details": true,
        "name": "MS_SEND_BUFFER_SIZE",
        "initializer": "1360",
        "brief": "Send Buffer.",
        "description": "<p>This determines how many characters to set out at once over the TCP connection. Increasing this may decrease data use by a logger, while decreasing it will save memory. Do not make it smaller than 32 or bigger than TINY_GSM_SEND_MAX_SIZE for you module if using TinyGSM or 1500 (a typical TCP Maximum Transmission Unit) if you aren&#x27;t using TinyGSM.</p><p>When using the ThingSpeak publisher, make sure this is at least 240 bytes.</p><p>This can be changed by setting the build flag MS_SEND_BUFFER_SIZE when compiling.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a6935763953deea1c973f4f1c5fd9808c",
        "include": null,
        "has_details": true,
        "name": "MS_MQTT_MAX_PACKET_SIZE",
        "initializer": "1536",
        "brief": "Configure the size of the PubSubClient buffer for MQTT publishers.",
        "description": "<p>This is the maximum size of any single MQTT message - incoming or outgoing. The same value applies to all MQTT publishers. The default within PubSubClient is 256 bytes, but to receive long S3 URLs from AWS IoT Core, we need to jack this way up. Incoming pre-signed S3 URLs are &gt;1200 bytes. If you&#x27;re not using both AWS IoT Core and S3, you should drop this down. When using the ThingSpeak publisher, ~240 bytes should suffice. If you&#x27;re not using any MQTT publishers, you can ignore this or set it to 256.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "aa7d06086fa60efbe1574808c8c6df29d",
        "include": null,
        "has_details": true,
        "name": "MS_AWS_IOT_PUBLISHER_SUB_COUNT",
        "initializer": "4",
        "brief": "The maximum number of extra subscriptions that can be added to the AWS IoT Core publisher.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>AWS sets a hard maximum of 8 subscriptions by one client at a time.</p></aside>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a7dd60dcca26792181eaee0bfab7c9e1f",
        "include": null,
        "has_details": false,
        "name": "MS_AWS_IOT_PUBLISHER_PUB_COUNT",
        "initializer": "4",
        "brief": "The maximum number of extra publish messages that can be added to the AWS IoT Core publisher.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "ae5a5d4f2ec4419d8e6e3fc38b4109029",
        "include": null,
        "has_details": true,
        "name": "MS_AWS_IOT_MAX_CONNECTION_TIME",
        "initializer": "30000L",
        "brief": "The maximum time to wait for subscriptions after publishing data to AWS IoT Core.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only used if the publisher is set to wait for subscriptions.</p></aside>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_mod_sensor_config_8h.html",
        "id": "a208890ef6d9719475c88675f1e34b7d1",
        "include": null,
        "has_details": true,
        "name": "S3_DEFAULT_FILE_EXTENSION",
        "initializer": "\".jpg\"",
        "brief": "The default file extension to use to send to S3: &quot;.jpg&quot;.",
        "description": "<p>This assumes you are using S3 to send images. If you want to put your basic numeric data into S3, you should use the IoT publisher and create a rule and corresponding lambda function to transfer the json data from IoT Core to S3.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      }
    ],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": false,
    "has_var_details": false,
    "has_define_details": true,
    "breadcrumb": [
      [
        "src",
        "dir_68267d1309a1af8e8297ef4c3efbcdba.html"
      ],
      [
        "ModSensorConfig.h",
        "_mod_sensor_config_8h.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "ModSensorConfig.h",
        "_mod_sensor_config_8h.html"
      ]
    ]
  }
}