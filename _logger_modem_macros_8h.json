{
  "version": "1.14.0",
  "compound": {
    "kind": "file",
    "id": "_logger_modem_macros_8h",
    "name": "LoggerModemMacros.h",
    "url_base": "_logger_modem_macros_8h",
    "url": "_logger_modem_macros_8h.html",
    "include": null,
    "has_template_details": false,
    "templates": null,
    "brief": "Contains PRE-PROCESSOR MACROS for use with logger modems.",
    "description": "<aside class=\"m-note m-default\"><h4>Copyright</h4><p>Stroud Water Research Center Part of the EnviroDIY ModularSensors library for Arduino. This library is published under the BSD-3 license.</p></aside><aside class=\"m-note m-default\"><h4>Author</h4><p>Sara Geleskie Damiano <a href=\"mailto:sdamiano@stroudcenter.org\">sdamiano@stroudcenter.org</a></p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>These are NOT FUNCTIONS; they are pre-processor macros that I am collecting here to avoid writing the same functions multiple times later.</p></aside>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a36ea7a295d2e3fe9260c0cf1e0de184c",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_NTP_SYNC",
        "initializer": null,
        "brief": "A macro to add the line to sync the modem with NTP after it wakes.",
        "description": "<p>This needs to be called at wake because many modules forget their time when they are powered down.</p>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "ace5bab37413b7bcc6954068b5c9db9e5",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_EXTRA_SETUP",
        "initializer": "    bool specificModem::extraModemSetup(void) { \\\n        bool success = gsmModem.init();         \\\n        _modemName   = gsmModem.getModemName(); \\\n        ",
        "brief": "Creates an extraModemSetup() function for a specific modem subclass.",
        "description": "<p>This is a passthrough to the TinyGSM init() and getModemName() for a specific modem.</p>",
        "return_value": "The text of an extraModemSetup() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "af020f54b6e4a3bcaaf834107d37d8e2e",
        "include": null,
        "has_details": true,
        "name": "MS_IS_MODEM_AWAKE",
        "initializer": null,
        "brief": "Creates an isModemAwake() function for a specific modem subclass.",
        "description": "",
        "return_value": "The text of an isModemAwake() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a93dc4dd4e9fce78c3a17e35e683092eb",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_WAKE",
        "initializer": null,
        "brief": "Creates a modemWake() function for a specific modem subclass.",
        "description": "",
        "return_value": "The text of a modemWake() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a00f27ec90c9c4f03d2c890ac375516d9",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_IS_INTERNET_AVAILABLE",
        "initializer": "    bool specificModem::isInternetAvailable(void) {   \\\n        return gsmModem.isGprsConnected();            \\\n    }",
        "brief": "Creates an isInternetAvailable() function for a specific modem subclass.",
        "description": "<p>For cellular modems, this is a passthrough to isGprsConnected() for the specific TinyGSM modem type.</p><p>For wifi modems, this is a passthrough to isNetworkConnected() for the specific TinyGSM modem type.</p>",
        "return_value": "The text of an isInternetAvailable() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a037196788b842228149d794b1e90ba29",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_SET_APN",
        "initializer": "    ",
        "brief": "Creates a text string of the functions to call for a specific modem to set the APN and connect to GPRS during the internet connection sequence.",
        "description": "<p>For most cellular modems, this is a passthrough to gprsConnect() for the specific TinyGSM modem type. For the XBee, this is an empty string.</p>",
        "return_value": "Text string containing the functions to set the APN and connect to GPRS.",
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "ac1231898fd082a08c5f8856b1960cc3b",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_CONNECT_INTERNET",
        "initializer": null,
        "brief": "Creates a connectInternet() function for a specific modem subclass.",
        "description": "<p>For cellular modems, this uses the TinyGSM waitForNetwork() function for the specific modem and then connects to GPRS using <a href=\"#a037196788b842228149d794b1e90ba29\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />SET_<wbr />APN</a>.</p><p>For WiFi modems, this first checks for pre-existing internet connection and if that isn&#x27;t present uses the specific modem&#x27;s networkConnect(ssid, pwd) function followed by waitForNetwork().</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The order of credentials and waiting is reversed between cellular and WiFi modems. WiFi modems must send first credentials and then wait for the connection to be established. Cellular modems on the other hand must first wait for network registration, then provide the access point name, and then establish a GPRS/EPS connection.</p></aside>",
        "return_value": "The text of a connectInternet() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "ae6342dd46e7f1d241ffe9288a8e755a2",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_DISCONNECT_INTERNET",
        "initializer": "    void specificModem::disconnectInternet(void) {            \\\n        ",
        "brief": "Creates a disconnectInternet() function for a specific modem subclass.",
        "description": "<p>For cellular modems, this is a passthrough to gprsDisconnect() for the specific TinyGSM modem type.</p><p>For Wifi modems, this is a passthrough to networkDisconnect() for the specific TinyGSM modem type</p>",
        "return_value": "The text of a disconnectInternet() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a1e908f5093c67200a9a52397a53fbc76",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_CREATE_CLIENT",
        "initializer": "    Client* specificModem::createClient() {                                 \\\n        /* Use the new keyword to create a new client on the **heap** */    \\\n        /* NOTE: Be sure to delete this object when you're done with it! */ \\\n        Client* newClient = new TinyGsmClient(gsmModem);                    \\\n        return newClient;                                                   \\\n    }",
        "brief": "Creates createClient functions for a specific modem subclass.",
        "description": "",
        "return_value": "The text of createClient functions specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "ac097fc29425a83a0dbf81203a73bced5",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_CREATE_NULL_SECURE_CLIENTS",
        "initializer": "    Client* specificModem::createSecureClient(                            \\\n        SSLAuthMode, SSLVersion, const char*, const char*, const char*) { \\\n        return nullptr;                                                   \\\n    }                                                                     \\\n    Client* specificModem::createSecureClient(const char*, const char*,   \\\n                                              SSLVersion) {               \\\n        return nullptr;                                                   \\\n    }                                                                     \\\n    Client* specificModem::createSecureClient(const char*, SSLVersion) {  \\\n        return nullptr;                                                   \\\n    }",
        "brief": "Helper to create null functions for modems that do not support secure clients.",
        "description": "",
        "return_value": "The text of createSecureClient functions specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a5f9df251f965b0a67c82397cfcb03dd3",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_CREATE_SECURE_CLIENT",
        "initializer": "    Client* specificModem::createSecureClient() {    \\\n        return nullptr;                              \\\n    }                                                \\\n    ",
        "brief": "Creates createSecureClient functions for a specific modem subclass.",
        "description": "<p>For modems that don&#x27;t support SSL, this returns a nullptr.</p>",
        "return_value": "The text of createClient functions specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a10257f360bf7c5aca4e8f88f32398b6d",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_DELETE_CLIENT",
        "initializer": "    void specificModem::deleteClient(Client* client) {                         \\\n        if (client != nullptr) {                                               \\\n            TinyGsmClient* cast_pointer = static_cast<TinyGsmClient*>(client); \\\n            delete cast_pointer;                                               \\\n        }                                                                      \\\n    }",
        "brief": "Creates a deleteClient function for a specific modem subclass.",
        "description": "",
        "return_value": "The text of deleteClient function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a6d7ab93b1e029e69139e4e50fe7cf54b",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_DELETE_SECURE_CLIENT",
        "initializer": "    void specificModem::deleteSecureClient(Client*) {}",
        "brief": "Creates a deleteClient function for a specific modem subclass.",
        "description": "",
        "return_value": "The text of deleteSecureClient function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a8afc41f17bda44b75837ad30f3b6f558",
        "include": null,
        "has_details": false,
        "name": "TIME_PROTOCOL_PORT",
        "initializer": "37",
        "brief": "The port hosting the NIST &quot;time&quot; protocol (37)",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a918d4ba21974c1bd0139b19496dc9480",
        "include": null,
        "has_details": false,
        "name": "NIST_RESPONSE_BYTES",
        "initializer": "4",
        "brief": "The size of the NIST response from the &quot;time&quot; protocol, in bytes.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a281faaa7708a5aac593c7b8d26cb89e8",
        "include": null,
        "has_details": false,
        "name": "NIST_SERVER_RETRYS",
        "initializer": "12",
        "brief": "The number of retry attempts when connecting to the NIST server.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a966352969fb161957236ced03c505531",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_GET_NIST_TIME",
        "initializer": null,
        "brief": "Creates a getNISTTime() function for a specific modem subclass.",
        "description": "<p>This gets the time from NIST via TIME protocol (rfc868)</p><p>This would be much more efficient if done over UDP, but I&#x27;m doing it over TCP because I don&#x27;t have a UDP library for all the modems.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>We must ensure that we do not ping the daylight server more than once every 4 seconds. NIST clearly specifies here that this is a requirement for all software that accesses its servers: <a href=\"https://tf.nist.gov/tf-cgi/servers.cgi\">https:/<wbr />/<wbr />tf.nist.gov/<wbr />tf-cgi/<wbr />servers.cgi</a></p></aside>",
        "return_value": "The text of a getNISTTime() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a91e9815ea7b7c519fe5e0508e4dfb24a",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_CALC_SIGNAL_QUALITY",
        "initializer": "    rssi = getRSSIFromCSQ(signalQual);           \\\n    ",
        "brief": "Creates a text string of the functions to convert the signal quality returned by a specific modem to RSSI and percent signal strength.",
        "description": "<p>Most modules return CSQ between 0 and 31. The RSSI in dBm is calculated using getRSSIFromCSQ(int16_t csq) and a the percent strength is calculated using getPctFromCSQ(int16_t csq).</p><p>XBee and <a href=\"class_espressif.html\" class=\"m-doc\">Espressif</a> modules return RSSI in dBm and the percent strength is calculated using getPctFromRSSI(int16_t rssi).</p>",
        "return_value": "Text string containing the functions to put signal strength in the correct units.",
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a872869253ae3f3766ba7096f85af4dd8",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_GET_MODEM_SIGNAL_QUALITY",
        "initializer": "    bool specificModem::getModemSignalQuality(int16_t& rssi,      \\\n                                              int16_t& percent) { \\\n        /* Get signal quality */                                  \\\n        ",
        "brief": "Creates a getModemSignalQuality(int16_t&amp; rssi, int16_t&amp; percent) function for a specific modem subclass.",
        "description": "<p>This calls the specific modem getSignalQuality() and the text from <a href=\"#a91e9815ea7b7c519fe5e0508e4dfb24a\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />CALC_<wbr />SIGNAL_<wbr />QUALITY</a> to convert the quality to the proper units.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>We can&#x27;t actually distinguish between a bad modem response, no modem response, and a real response from the modem of no service/signal. The TinyGSM getSignalQuality function returns the same &quot;no signal&quot; value (99 CSQ or 0 RSSI) in all 3 cases.</p></aside>",
        "return_value": "The text of a getModemSignalQuality(int16_t&amp; rssi, int16_t&amp; percent) function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a772b493348b9ae86df518ace30ca80e7",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_GET_MODEM_BATTERY_DATA",
        "initializer": "    bool specificModem::getModemBatteryStats(                           \\\n        int8_t& chargeState, int8_t& percent, int16_t& milliVolts) {    \\\n        ",
        "brief": "Creates a getModemBatteryStats(int8_t&amp; chargeState, int8_t&amp; percent,\nint16_t&amp; milliVolts) function for a specific modem subclass.",
        "description": "<p>This is a passthrough to the specific modem&#x27;s getBattStats(uint8_t&amp;\nchargeState, int8_t&amp; percent, int16_t&amp; milliVolts) for modems where such data is available.</p><p>This populates the entered references with -9999s for modems where such data is not available.</p>",
        "return_value": "The text of a getModemBatteryStats(int8_t&amp; chargeState, int8_t&amp;\npercent, int16_t&amp; milliVolts) function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      },
      {
        "base_url": "_logger_modem_macros_8h.html",
        "id": "a17b20715a2652dd762f4dd5d0185bf7d",
        "include": null,
        "has_details": true,
        "name": "MS_MODEM_GET_MODEM_TEMPERATURE_DATA",
        "initializer": "    float specificModem::getModemChipTemperature(void) {   \\\n        ",
        "brief": "Creates a getModemChipTemperature() function for a specific modem subclass.",
        "description": "<p>This is a passthrough to the specific modem&#x27;s getTemperature() for modems where such data is available</p><p>This returns -9999 for modems that don&#x27;t return such data.</p>",
        "return_value": "The text of a getModemChipTemperature() function specific to a single modem subclass.",
        "deprecated": null,
        "since": null,
        "has_param_details": true,
        "params": [
          [
            "specificModem",
            "The modem subclass"
          ]
        ]
      }
    ],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": false,
    "has_var_details": false,
    "has_define_details": true,
    "breadcrumb": [
      [
        "src",
        "dir_68267d1309a1af8e8297ef4c3efbcdba.html"
      ],
      [
        "modems",
        "dir_d60b8e8795161a141bba4403c07b6046.html"
      ],
      [
        "LoggerModemMacros.h",
        "_logger_modem_macros_8h.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "LoggerModemMacros.h",
        "_logger_modem_macros_8h.html"
      ]
    ]
  }
}