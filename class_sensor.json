{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_sensor",
    "name": "Sensor",
    "url_base": "class_sensor",
    "url": "class_sensor.html",
    "include": [
      "&lt;src/SensorBase.h&gt;",
      "_sensor_base_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
    "description": "<p>A sensor is some sort of device that is capable of taking one or more measurements using some sort of method. Most often we can think of these as probes or other instruments that can give back information about the world around them. Sensors can usually be given power or have that power cut. They may be awoken or activated and then returned to a sleeping/low power use state. The may need to be asked to begin a single reading or they may continuously return data. They <em><strong>must</strong></em> be capable of returning the value of their readings to a logger of some type.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [
      {
        "kind": "class",
        "url": "class_a_n_bp_h.html",
        "name": "ANBpH",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__anb__ph.html\" class=\"m-doc\">ANB pH sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_a_o_song_a_m2315.html",
        "name": "AOSongAM2315",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__am2315.html\" class=\"m-doc\">AOSong AM2315</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_a_o_song_d_h_t.html",
        "name": "AOSongDHT",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__dht.html\" class=\"m-doc\">AOSong digital-output relative humidity and temperature sensor modules</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_alphasense_c_o2.html",
        "name": "AlphasenseCO2",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the [Alphasense IRC-A1 CO2](<a href=\"group__sensor__alphasense__co2.html\" class=\"m-doc\">Alphasense IRC-A1 CO2</a>) sensor.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_analog_elec_conductivity.html",
        "name": "AnalogElecConductivity",
        "brief": "Class for the analog [Electrical Conductivity monitor](<a href=\"group__sensor__analog__cond.html\" class=\"m-doc\">Conductivity via Analog Electrical Resistance</a>)",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_apogee_s_q212.html",
        "name": "ApogeeSQ212",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__sq212.html\" class=\"m-doc\">Apogee SQ-212</a> sensor.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_parent.html",
        "name": "AtlasParent",
        "brief": "A parent class for Atlas EZO circuits and sensors.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_bosch_b_m_e280.html",
        "name": "BoschBME280",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__bme280.html\" class=\"m-doc\">Bosch BME280</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_bosch_b_m_p3xx.html",
        "name": "BoschBMP3xx",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__bmp3xx.html\" class=\"m-doc\">Bosch BMP3xx</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_campbell_o_b_s3.html",
        "name": "CampbellOBS3",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__obs3.html\" class=\"m-doc\">Campbell OBS3 analog turbidity sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_everlight_a_l_s_p_t19.html",
        "name": "EverlightALSPT19",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__alspt19.html\" class=\"m-doc\">Everlight ALS-PT19</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_freescale_m_p_l115_a2.html",
        "name": "FreescaleMPL115A2",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__mpl115a2.html\" class=\"m-doc\">Freescale Semiconductor MPL115A2 sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_geolux_hydro_cam.html",
        "name": "GeoluxHydroCam",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__hydrocam.html\" class=\"m-doc\">Geolux HydroCam cameras</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_gro_point_parent.html",
        "name": "GroPointParent",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for all the <a href=\"group__gropoint__group.html\" class=\"m-doc\">GroPoint sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_keller_parent.html",
        "name": "KellerParent",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for all <a href=\"group__keller__group.html\" class=\"m-doc\">Keller water level sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_max_botix_sonar.html",
        "name": "MaxBotixSonar",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__maxbotix.html\" class=\"m-doc\">MaxBotix ultrasonic range finders</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_maxim_d_s18.html",
        "name": "MaximDS18",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__ds18.html\" class=\"m-doc\">DS18 one-wire temperature sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_maxim_d_s3231.html",
        "name": "MaximDS3231",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__ds3231.html\" class=\"m-doc\">Maxim DS3231</a> when used as a low-accuracy temperature sensor.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_mea_spec_m_s5803.html",
        "name": "MeaSpecMS5803",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__ms5803.html\" class=\"m-doc\">Measurement Specialties MS5803 sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_paleo_terra_redox.html",
        "name": "PaleoTerraRedox",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__pt__redox.html\" class=\"m-doc\">PaleoTerra redox sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_processor_stats.html",
        "name": "ProcessorStats",
        "brief": "The main class to use the main processor (MCU) as a sensor.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_rain_counter_i2_c.html",
        "name": "RainCounterI2C",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__i2c__rain.html\" class=\"m-doc\">Arduino-based external tipping bucket counter</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_s_d_i12_sensors.html",
        "name": "SDI12Sensors",
        "brief": "The main class for SDI-12 Sensors.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_sensirion_s_h_t4x.html",
        "name": "SensirionSHT4x",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__sht4x.html\" class=\"m-doc\">Sensirion SHT4x</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_t_i_a_d_s1x15.html",
        "name": "TIADS1x15",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__ads1x15.html\" class=\"m-doc\">external voltage as measured by TI ADS1115 or ADS1015</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_t_i_i_n_a219.html",
        "name": "TIINA219",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__ina219.html\" class=\"m-doc\">TexasInstruments INA219 sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_tally_counter_i2_c.html",
        "name": "TallyCounterI2C",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__tally.html\" class=\"m-doc\">Tally Counter I2C</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_turner_cyclops.html",
        "name": "TurnerCyclops",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__cyclops.html\" class=\"m-doc\">Turner Cyclops-7F submersible fluorometer</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_turner_turbidity_plus.html",
        "name": "TurnerTurbidityPlus",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__turbidity__plus.html\" class=\"m-doc\">Turner Turbidity Plus turbidity</a>sensor&quot;.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_yosemitech_parent.html",
        "name": "YosemitechParent",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for all the <a href=\"group__yosemitech__group.html\" class=\"m-doc\">Yosemitech sensors</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      }
    ],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [
      [
        "enum",
        {
          "base_url": "class_sensor.html",
          "id": "a8b3f75450097365354a742683498a378",
          "include": null,
          "has_details": true,
          "type": "",
          "name": "sensor_status_bits",
          "brief": "The significance of the various status bits.",
          "description": "",
          "deprecated": null,
          "since": null,
          "is_protected": false,
          "is_strong": false,
          "values": [
            {
              "id": "a8b3f75450097365354a742683498a378a69495763ef9e5d32eb64c68549cca4a8",
              "name": "SETUP_SUCCESSFUL",
              "initializer": "= 0",
              "brief": "Whether setup was successful.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378af4689b95126234983d64607f800a080e",
              "name": "POWER_ATTEMPTED",
              "initializer": "= 1",
              "brief": "Whether power up was attempted.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378acbebce330dca71bdbf736357be736411",
              "name": "POWER_SUCCESSFUL",
              "initializer": "= 2",
              "brief": "Whether power up was successful.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378ac71c255c950be3e8a05925fea5cad28f",
              "name": "WAKE_ATTEMPTED",
              "initializer": "= 3",
              "brief": "Whether wake up was attempted.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378a75410ecd972dc7f16cc4d1c85c9c1ee0",
              "name": "WAKE_SUCCESSFUL",
              "initializer": "= 4",
              "brief": "Whether wake up was successful.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378a3c8b425ada45b985151a2e2cc7c0671e",
              "name": "MEASUREMENT_ATTEMPTED",
              "initializer": "= 5",
              "brief": "Whether measurement was attempted.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378aaadd2cf57d30a7a8c6d908b437bbc1e6",
              "name": "MEASUREMENT_SUCCESSFUL",
              "initializer": "= 6",
              "brief": "Whether measurement was successful.",
              "description": "",
              "deprecated": null,
              "since": null
            },
            {
              "id": "a8b3f75450097365354a742683498a378a09bd08bc4075b698ec111dc21443c0f4",
              "name": "ERROR_OCCURRED",
              "initializer": "= 7",
              "brief": "Whether an error has occurred.",
              "description": "",
              "deprecated": null,
              "since": null
            }
          ],
          "has_value_details": true
        }
      ]
    ],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_sensor.html",
        "id": "a1ec181748b9ff0d22c56c2b899434949",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "Sensor",
        "brief": "Construct a new <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;Unknown&quot;",
            "description": "The name of the sensor. Defaults to &quot;Unknown&quot;.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The total number of value results (raw or calculated internally) returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor is powered on and when it is ready to receive a wake command. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time in ms between when the sensor receives a wake command and when it is able to return stable values. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time in ms between when a measurement is started and when the result value is available. Defaults to 0.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": "-1",
            "description": "The pin on the mcu controlling power to the sensor Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "dataPin",
            "type": "int8_t",
            "type_name": "int8_t dataPin",
            "default": "-1",
            "description": "The pin on the mcu receiving data from the sensor. Defaults to -1.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a47c0e16c1f727d31242678514e9e16b1",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "Sensor",
        "brief": "Dis-allowed constructor for a new <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object from a copy of another <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object - the deleted copy constructor.",
        "description": "<p>The copy constructor is explicitly deleted. <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> objects should not (and here cannot) be copied to avoid confusion over which sensor object specific variables are tied to.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": true,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "copy_from_me",
            "type": "const <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a>&amp;",
            "type_name": "const <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a>&amp; copy_from_me",
            "default": null,
            "description": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object to copy.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "aee8c70e7ef05ce65e7ee33686b5d7db2",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~Sensor",
        "brief": "Destroy the <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object - no action taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_sensor.html",
        "id": "a72254388df3b9673b3cdb8238e58ba49",
        "include": null,
        "has_details": true,
        "type": "<a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a>&amp;",
        "name": "operator=",
        "brief": "Dis-allowed assignment of one <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> object to another - the deleted assignment operator.",
        "description": "<p>The assignment operator is explicitly deleted. <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> objects should not (and here cannot) be assigned to each other to avoid confusion over which sensor object specific variables are tied to.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": true,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "copy_from_me",
            "type": "const <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a>&amp;",
            "type_name": "const <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a>&amp; copy_from_me",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a43df3388fdab8e70cad18cc9e9b45ac8",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "aea314a4b9858d1c82739b6d4e5e5c953",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorName",
        "brief": "Get the name of the sensor.",
        "description": "",
        "return_value": "The sensor name as given in the constructor.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a3c8422f4c16216a7aade8578d2cf9b84",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorNameAndLocation",
        "brief": "Concatenate and returns the name and location of the sensor.",
        "description": "",
        "return_value": "<p>A concatenation of the sensor name and its &quot;location&quot;</p><ul><li>how it is connected to the mcu.</li></ul>",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a9d3dba47143ff7f513c2ebdf93320fff",
        "include": null,
        "has_details": true,
        "type": "int8_t",
        "name": "getPowerPin",
        "brief": "Get the pin number controlling sensor power.",
        "description": "",
        "return_value": "The pin on the mcu controlling power to the sensor.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ac38596062b88391bfe7652be23fffa8a",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setNumberMeasurementsToAverage",
        "brief": "Set the number measurements to average.",
        "description": "<p>This will become the number of readings actually taken by a sensor prior to data averaging. Any &quot;bad&quot; (-9999) values returned by the sensor will not be included in the final averaging. This means that the actual number of &quot;good&quot; values that are averaged may be less than what was requested.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "nReadings",
            "type": "uint8_t",
            "type_name": "uint8_t nReadings",
            "default": null,
            "description": "The number of readings to take and average to create a result from the sensor. Overrides any value given in the constructor.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "acdd90533e6ace4cf37f9322e86de3f9e",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "name": "getNumberMeasurementsToAverage",
        "brief": "Get the number of measurements to average.",
        "description": "<p>This will become the number of readings actually taken by a sensor prior to data averaging. Any &quot;bad&quot; (-9999) values returned by the sensor will not be included in the final averaging. This means that the actual number of &quot;good&quot; values that are averaged may be less than what was requested.</p>",
        "return_value": "The number of readings to take and average to create a result from the sensor.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "acc7e3a5cb18b87e1b358a58ae5ac2fcc",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "name": "getStatus",
        "brief": "Get the 8-bit code for the current status of the sensor.",
        "description": "<p>Bit 0</p><ul><li>0 =&gt; Has NOT been successfully set up</li><li>1 =&gt; Has been setup</li></ul><p>Bit 1</p><ul><li>0 =&gt; No attempt made to power sensor</li><li>1 =&gt; Attempt made to power sensor</li></ul><p>Bit 2</p><ul><li>0 =&gt; Power up attempt failed</li><li>1 =&gt; Power up attempt succeeded</li><li>Use the <a href=\"#a48ad8d1337a0c4bbe51d698f6d6594d4\" class=\"m-doc\">isWarmedUp()</a> function to check if enough time has passed to be ready for sensor communication.</li></ul><p>Bit 3</p><ul><li>0 =&gt; Activation/wake attempt made</li><li>1 =&gt; No activation/wake attempt made</li><li>check _millisSensorActivated or bit 4 to see if <a href=\"#af00bdd1d6181b2d92261b227d91feb07\" class=\"m-doc\">wake()</a> attempt was successful</li><li>a failed activation attempt will give _millisSensorActivated = 0</li></ul><p>Bit 4</p><ul><li>0 =&gt; Wake/Activate failed</li><li>1 =&gt; Is awake/actively measuring</li><li>Use the <a href=\"#a52520433092e4c86f02f10d0e3426878\" class=\"m-doc\">isStable()</a> function to check if enough time has passed to begin a measurement.</li></ul><p>Bit 5</p><ul><li>0 =&gt; Start measurement requested attempt made</li><li>1 =&gt; No measurements have been requested</li><li>check _millisMeasurementRequested or bit 6 to see if <a href=\"#ae300058be829ad04dcc8f8ffc95b526e\" class=\"m-doc\">startSingleMeasurement()</a> attempt was successful</li><li>a failed request attempt will give _millisMeasurementRequested = 0</li></ul><p>Bit 6</p><ul><li>0 =&gt; Measurement start failed</li><li>1 =&gt; Measurement attempt succeeded</li><li>Use the <a href=\"#a6e5618bb5e7edd38fbbc6f94c0474c2a\" class=\"m-doc\">isMeasurementComplete()</a> to check if enough time has passed for a measurement to have been completed.</li></ul><p>Bit 7</p><ul><li>0 =&gt; No known errors</li><li>1 =&gt; Some sort of error has occurred</li></ul>",
        "return_value": "The status as a uint8_t.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "af9f393ba8d60faf0bf287dd6da6e9905",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getStatusBit",
        "brief": "Get the value of a specific status bit.",
        "description": "",
        "return_value": "The value of the specified status bit (0 or 1).",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "bitToGet",
            "type": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a>",
            "type_name": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a> bitToGet",
            "default": null,
            "description": "The status bit to retrieve.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "af86cd32b5da87a4f26fb05c4cc28c2c1",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setStatusBit",
        "brief": "Set a specific status bit to 1.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "bitToSet",
            "type": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a>",
            "type_name": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a> bitToSet",
            "default": null,
            "description": "The status bit to set.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "adbf00a403c1bf2b8cfa4f297199a0061",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setStatusBits",
        "brief": "A helper recursive template to set multiple status bits.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": true,
        "templates": [
          {
            "type": "typename",
            "name": "T",
            "default": "",
            "description": "The type of the status bit to set - must be a uint8_t"
          }
        ],
        "has_param_details": true,
        "params": [
          {
            "name": "bitToSet",
            "type": "T",
            "type_name": "T bitToSet",
            "default": null,
            "description": "The first status bit to set.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ab74ff7e747ba1669d0b9072fed8009d5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setStatusBits",
        "brief": "A helper recursive template to set multiple status bits.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": true,
        "templates": [
          {
            "type": "typename",
            "name": "T",
            "default": "",
            "description": "The type of the status bit to set - must be a uint8_t"
          },
          {
            "type": "typename...",
            "name": "Args",
            "default": "",
            "description": ""
          }
        ],
        "has_param_details": true,
        "params": [
          {
            "name": "firstBit",
            "type": "T",
            "type_name": "T firstBit",
            "default": null,
            "description": "The first status bit to set.",
            "direction": ""
          },
          {
            "name": "otherBits",
            "type": "Args...",
            "type_name": "Args... otherBits",
            "default": null,
            "description": "Any additional status bits to set.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a631917cebe06fd2e646ffa31f88b1d30",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "clearStatusBit",
        "brief": "Clear a specific status bit (ie, set it to 0).",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "bitToClear",
            "type": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a>",
            "type_name": "<a href=\"#a8b3f75450097365354a742683498a378\" class=\"m-doc\">sensor_<wbr />status_<wbr />bits</a> bitToClear",
            "default": null,
            "description": "The status bit to clear.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ab476d22af1470feac1787b9594a77406",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "clearStatusBits",
        "brief": "A helper recursive template to clear multiple status bits.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": true,
        "templates": [
          {
            "type": "typename",
            "name": "T",
            "default": "",
            "description": "The type of the status bit to set - must be a uint8_t"
          }
        ],
        "has_param_details": true,
        "params": [
          {
            "name": "bitToClear",
            "type": "T",
            "type_name": "T bitToClear",
            "default": null,
            "description": "The first status bit to clear.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "af526f92b6feff7449764fc711aa5e4e5",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "clearStatusBits",
        "brief": "A helper recursive template to clear multiple status bits.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": true,
        "templates": [
          {
            "type": "typename",
            "name": "T",
            "default": "",
            "description": "The type of the status bit to set - must be a uint8_t"
          },
          {
            "type": "typename...",
            "name": "Args",
            "default": "",
            "description": ""
          }
        ],
        "has_param_details": true,
        "params": [
          {
            "name": "firstBit",
            "type": "T",
            "type_name": "T firstBit",
            "default": null,
            "description": "The first status bit to clear.",
            "direction": ""
          },
          {
            "name": "otherBits",
            "type": "Args...",
            "type_name": "Args... otherBits",
            "default": null,
            "description": "Any additional status bits to clear.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "af3d829c560800189c3fba2791cc503cc",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This sets the pin modes of the _powerPin and _dataPin, updates <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>, and returns true.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a0e0eeaeab9f85c8ac3449048d1343c53",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "update",
        "brief": "Update the sensor&#x27;s values.",
        "description": "<p>For digital sensors with a single information return, this only needs to be called once for each sensor, even if there are multiple variable subclasses for the sensor.</p><p>In general, the update function clears the value results array, powers the sensor, wakes or activates it, tells it one or more times to a start measurement and get the result, averages all the values, notifies the attached variables that new values are available, puts the sensor back to sleep (if it had been asleep) and powers the sensor down (if it had been un-powered). All possible waits are included in this function. To get new results from a single sensor, this is the function that should be used. To work with many sensors together, use the <a href=\"class_variable_array.html\" class=\"m-doc\">VariableArray</a> class which optimizes the timing and waits for many sensors working together.</p>",
        "return_value": "True if all steps of the sensor update completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a9b600ee168e47188e1485b6f2d53af78",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "powerUp",
        "brief": "Turn on the sensor power, if applicable.",
        "description": "<p>Generally this is done by setting the <a href=\"#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> <code>HIGH</code>. Also sets the <a href=\"#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> timestamp and updates the <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a3fca63abb83a6196127d61f2ff8c75bc",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "powerDown",
        "brief": "Turn off the sensor power, if applicable.",
        "description": "<p>Generally this is done by setting the <a href=\"#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> <code>LOW</code>. Also un-sets the <a href=\"#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> timestamp (sets <a href=\"#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> to 0) and updates the <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "af00bdd1d6181b2d92261b227d91feb07",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "wake",
        "brief": "Wake the sensor up, if necessary. Do whatever it takes to get a sensor in the proper state to begin a measurement.",
        "description": "<p>Verifies that the power is on and updates the <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. This also sets the <a href=\"#a86541c88432508d6bc81a8fb41746e2e\" class=\"m-doc\">_<wbr />millisSensorActivated</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT include any wait for sensor readiness.</p></aside>",
        "return_value": "True if the wake function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ab557ce2316436c882d4b63c85b6d5911",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "sleep",
        "brief": "Puts the sensor to sleep, if necessary.",
        "description": "<p>Does not take any action if not necessary.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This does NOT power down the sensor!</p></aside>",
        "return_value": "True if the sleep function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ae300058be829ad04dcc8f8ffc95b526e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "startSingleMeasurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp and updates the <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "True if the start measurement function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a6d93c4b22b19dae01744195273bb634a",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": true,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ab67561de93032cec408959e6f32b7f9d",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "clearValues",
        "brief": "Clear the values array - that is, sets all values to -9999.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_sensor.html",
        "id": "ad6f7285ebb0c9612657ddfd99664989b",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "verifyAndAddMeasurementResult",
        "brief": "Verify that a measurement is OK (ie, not -9999) before adding it to the result array.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "resultNumber",
            "type": "uint8_t",
            "type_name": "uint8_t resultNumber",
            "default": null,
            "description": "The position of the result within the result array.",
            "direction": ""
          },
          {
            "name": "resultValue",
            "type": "float",
            "type_name": "float resultValue",
            "default": null,
            "description": "The value of the result.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a3d9686113cdeb9a3baea98b873f62d38",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "verifyAndAddMeasurementResult",
        "brief": "Verify that a measurement is OK (ie, not -9999) before adding it to the result array.",
        "description": "<aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000014\" class=\"m-doc\">Todo</a></h4><p>Fix measurement value array to handle int16_t and int32_t directly so no casting is needed and large values will not be truncated or mashed.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "resultNumber",
            "type": "uint8_t",
            "type_name": "uint8_t resultNumber",
            "default": null,
            "description": "The position of the result within the result array.",
            "direction": ""
          },
          {
            "name": "resultValue",
            "type": "int16_t",
            "type_name": "int16_t resultValue",
            "default": null,
            "description": "The value of the result.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a1f3733f86aae94fa06a4b204b82042cd",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "verifyAndAddMeasurementResult",
        "brief": "Average the results of all measurements by dividing the sum of all measurements by the number of measurements taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "resultNumber",
            "type": "uint8_t",
            "type_name": "uint8_t resultNumber",
            "default": null,
            "description": "The position of the result within the result array.",
            "direction": ""
          },
          {
            "name": "resultValue",
            "type": "int32_t",
            "type_name": "int32_t resultValue",
            "default": null,
            "description": "The value of the result.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a87e3877dfbfea461e7f174cc299345b9",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "averageMeasurements",
        "brief": "Average the results of all measurements by dividing the sum of all measurements by the number of measurements taken.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a0c0670800b68e7e85d9d265023408e92",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "registerVariable",
        "brief": "Register a variable object to a sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>Only one variable can be assigned to each place in the array!</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "sensorVarNum",
            "type": "int",
            "type_name": "int sensorVarNum",
            "default": null,
            "description": "The position the variable result holds in the variable result array.",
            "direction": ""
          },
          {
            "name": "var",
            "type": "<a href=\"class_variable.html\" class=\"m-doc\">Variable</a>*",
            "type_name": "<a href=\"class_variable.html\" class=\"m-doc\">Variable</a>* var",
            "default": null,
            "description": "A pointer to the <a href=\"class_variable.html\" class=\"m-doc\">Variable</a> object.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "ab9da516a473b44656e3f6b9f6666052a",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "notifyVariables",
        "brief": "Notify attached variables of new values.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a0b41726e1fb6fcc966031eebd16a1dfc",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "checkPowerOn",
        "brief": "Check if the <a href=\"#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> is currently high.",
        "description": "",
        "return_value": "True indicates the <a href=\"#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> is currently <code>HIGH</code>.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a48ad8d1337a0c4bbe51d698f6d6594d4",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isWarmedUp",
        "brief": "Check whether or not enough time has passed between the sensor receiving power and being ready to respond to logger commands.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>A true response does <em>NOT</em> indicate that the sensor will respond to commands, merely that the specified time for wake has passed.</p></aside>",
        "return_value": "True indicates that enough time has passed that the sensor should be ready to respond to commands.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a279a1714c0b2eba815f2bbe442615312",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "waitForWarmUp",
        "brief": "Hold all further program execution until this sensor is ready to receive commands.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a52520433092e4c86f02f10d0e3426878",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isStable",
        "brief": "Check whether or not enough time has passed between the sensor being awoken/activated and being ready to output stable values.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>A true response does <em>NOT</em> indicate that the sensor is now giving stable values, merely that the specified time for sensor stabilization has passed.</p></aside>",
        "return_value": "True indicates that enough time has passed that the sensor should have stabilized.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a2f6a18031922ed058904da5d7b772dcc",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "waitForStability",
        "brief": "Hold all further program execution until this sensor is reporting stable values.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "a6e5618bb5e7edd38fbbc6f94c0474c2a",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isMeasurementComplete",
        "brief": "Check whether or not enough time has passed between when the sensor was asked to take a single measurement and when that measurement is expected to be complete.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>A true response does <em>NOT</em> indicate that the sensor will now successfully report a result, merely that the specified time for a measurement has passed.</p></aside>",
        "return_value": "True indicates that enough time has passed the measurement should have completed",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "debug",
            "type": "bool",
            "type_name": "bool debug",
            "default": "false",
            "description": "True to output the result to the debugging Serial",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_sensor.html",
        "id": "aeefdae7a975a1c471aa28368d4797515",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "waitForMeasurementCompletion",
        "brief": "Hold all further program execution until this sensor is has finished the current measurement.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [
      {
        "base_url": "class_sensor.html",
        "id": "afd1e8a111798c69a34b4842784dbfea4",
        "include": null,
        "has_details": true,
        "type": "float",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": false,
        "is_private": false,
        "name": "sensorValues",
        "brief": "The array of result values for each sensor.",
        "description": "<aside class=\"m-note m-dim\"><h4><a href=\"todo.html#_todo000015\" class=\"m-doc\">Todo</a></h4><p>Support int16_t and int32_t directly in the value array so no casting is needed. This could be done using a template or a union similar to the modbus library&#x27;s leFrame union.</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [
      {
        "base_url": "class_sensor.html",
        "id": "af00ad754616d27c65e626888da972f1a",
        "include": null,
        "has_details": true,
        "type": "int8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_dataPin",
        "brief": "Digital pin number on the mcu receiving sensor data.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>SIGNED int, to allow negative numbers for unused pins</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a60cef6626d7145eda0709980f66df52b",
        "include": null,
        "has_details": true,
        "type": "int8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_powerPin",
        "brief": "Digital pin number on the mcu controlling sensor power.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>SIGNED int, to allow negative numbers for unused pins</p></aside>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a6030f3568825a6c9a91a0ef37c2df791",
        "include": null,
        "has_details": false,
        "type": "const char*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_sensorName",
        "brief": "The sensor name.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "af26786329fd01b44cf31410d046fc8f3",
        "include": null,
        "has_details": true,
        "type": "const uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_numReturnedValues",
        "brief": "The number of values the sensor is capable of reporting.",
        "description": "<p>This includes raw values from the sensor and any values that are always calculated within the library for the sensor. The <a href=\"#a2f3f93a9205efb134cef1216d65077d2\" class=\"m-doc\">_<wbr />incCalcValues</a> are <em>included</em> in this total.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a160149a859a0b2c4a7ab8c5d2cd28e19",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_measurementsToAverage",
        "brief": "The number of measurements from the sensor to average.",
        "description": "<p>This will become the number of readings actually taken by a sensor prior to data averaging. Any &quot;bad&quot; (-9999) values returned by the sensor will not be included in the final averaging. This means that the actual number of &quot;good&quot; values that are averaged may be less than what was requested.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a2f3f93a9205efb134cef1216d65077d2",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_incCalcValues",
        "brief": "The number of included calculated variables from the sensor, if any.",
        "description": "<p>These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor. This is separate from any calculated variables that are created on-the-fly and depend on multiple other sensors.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a6945dbcef38027904a102538a14ab3b7",
        "include": null,
        "has_details": false,
        "type": "uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "numberGoodMeasurementsMade",
        "brief": "Array with the number of valid measurement values taken by the sensor in the current update cycle.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "aaaefd7f306f86382a3dac726531756b4",
        "include": null,
        "has_details": false,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_warmUpTime_ms",
        "brief": "The time needed from the when a sensor has power until it&#x27;s ready to talk.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "aa820f5e6c900f07d39750a77dc851a8f",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_millisPowerOn",
        "brief": "The processor elapsed time when the power was turned on for the sensor.",
        "description": "<p>The <a href=\"#aa820f5e6c900f07d39750a77dc851a8f\" class=\"m-doc\">_<wbr />millisPowerOn</a> value is set in the <a href=\"#a9b600ee168e47188e1485b6f2d53af78\" class=\"m-doc\">powerUp()</a> function. It is un-set in the <a href=\"#a3fca63abb83a6196127d61f2ff8c75bc\" class=\"m-doc\">powerDown()</a> function.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "ad6822ad09fb64658c911ce86820db79c",
        "include": null,
        "has_details": false,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_stabilizationTime_ms",
        "brief": "The time needed from the when a sensor is activated until the readings are stable.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a86541c88432508d6bc81a8fb41746e2e",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_millisSensorActivated",
        "brief": "The processor elapsed time when the sensor was activated - ie, when the <a href=\"#af00bdd1d6181b2d92261b227d91feb07\" class=\"m-doc\">wake()</a> function was run.",
        "description": "<p>The <a href=\"#a86541c88432508d6bc81a8fb41746e2e\" class=\"m-doc\">_<wbr />millisSensorActivated</a> value is <em>usually</em> set in the <a href=\"#af00bdd1d6181b2d92261b227d91feb07\" class=\"m-doc\">wake()</a> function, but may also be set in the <a href=\"#ae300058be829ad04dcc8f8ffc95b526e\" class=\"m-doc\">startSingleMeasurement()</a> function. It is generally un-set in the <a href=\"#ab557ce2316436c882d4b63c85b6d5911\" class=\"m-doc\">sleep()</a> function.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a0327d79459eaf3065c9e84b8c789c4ba",
        "include": null,
        "has_details": false,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_measurementTime_ms",
        "brief": "The time needed from the when a sensor is told to take a single reading until that reading is expected to be complete.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a4853c30b71ad2efc09bd6f73530155e3",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_millisMeasurementRequested",
        "brief": "The processor elapsed time when a measurement was started - ie, when the <a href=\"#ae300058be829ad04dcc8f8ffc95b526e\" class=\"m-doc\">startSingleMeasurement()</a> function was run.",
        "description": "<p>The <a href=\"#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> value is set in the <a href=\"#ae300058be829ad04dcc8f8ffc95b526e\" class=\"m-doc\">startSingleMeasurement()</a> function. It <em>may</em> be unset in the <a href=\"#a6d93c4b22b19dae01744195273bb634a\" class=\"m-doc\">addSingleMeasurementResult()</a> function.</p>",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "a1fde72c3ddd07d892dcbfe4a09bcae49",
        "include": null,
        "has_details": false,
        "type": "uint8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_sensorStatus",
        "brief": "An 8-bit code for the sensor status.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_sensor.html",
        "id": "aaa0844343621ffbfcb5ad5b30225d10e",
        "include": null,
        "has_details": false,
        "type": "<a href=\"class_variable.html\" class=\"m-doc\">Variable</a>*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "variables",
        "brief": "An array for each sensor containing pointers to the variable objects tied to that sensor. The <a href=\"_mod_sensor_config_8h.html#a489012644f58dc86180ebb32d7891600\" class=\"m-doc\">MAX_<wbr />NUMBER_<wbr />VARS</a> cannot be determined on a per-sensor basis, because of the way memory is used on an Arduino. It must be defined once for the whole class.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": true,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Primary Object Classes",
        "group__base__classes.html"
      ],
      [
        "Sensor",
        "class_sensor.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "Sensor::<wbr />"
  }
}