{
  "version": "1.12.0",
  "compound": {
    "kind": "class",
    "id": "class_turner_cyclops",
    "name": "TurnerCyclops",
    "url_base": "class_turner_cyclops",
    "url": "class_turner_cyclops.html",
    "include": [
      "&lt;src/sensors/TurnerCyclops.h&gt;",
      "_turner_cyclops_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__cyclops.html\" class=\"m-doc\">Turner Cyclops-7F submersible fluorometer</a>.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_turner_cyclops.html",
        "id": "a50a90bb7cd5ba0996b89ec1f3f650cf5",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "TurnerCyclops",
        "brief": "Construct a new Turner Cyclops object - need the power pin, the ADS1X15 data channel, and the calibration info.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>ModularSensors only supports connecting the ADS1x15 to the primary hardware I2C instance defined in the Arduino core. Connecting the ADS to a secondary hardware or software I2C instance is <em>not</em> supported!</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "<p>The pin on the mcu controlling power to the Cyclops-7F Use -1 if it is continuously powered.</p><ul><li>The ADS1x15 requires an input voltage of 2.0-5.5V, but this library assumes the ADS is powered with 3.3V.</li><li>The Cyclops-7F itself requires a 3-15V power supply, which can be turned off between measurements.</li></ul>",
            "direction": ""
          },
          {
            "name": "adsChannel",
            "type": "uint8_t",
            "type_name": "uint8_t adsChannel",
            "default": null,
            "description": "The analog data channel <em>on the TI ADS1115</em> that the Cyclops is connected to (0-3).",
            "direction": ""
          },
          {
            "name": "conc_std",
            "type": "float",
            "type_name": "float conc_std",
            "default": null,
            "description": "<p>The concentration of the standard used for a 1-point sensor calibration. The concentration units should be the same as the final measuring units.</p><table class=\"m-table m-fullwidth m-flat\"><thead><tr><th>ID</th><th><a href=\"class_variable.html\" class=\"m-doc\">Variable</a></th><th>Units</th></tr></thead><tbody><tr><td>C</td><td><a href=\"class_turner_cyclops___chlorophyll.html\" class=\"m-doc\">TurnerCyclops_<wbr />Chlorophyll</a></td><td>micrograms per Liter (\u00b5g/L)</td></tr><tr><td>R</td><td><a href=\"class_turner_cyclops___rhodamine.html\" class=\"m-doc\">TurnerCyclops_<wbr />Rhodamine</a></td><td>parts per billion (ppb)</td></tr><tr><td>F</td><td><a href=\"class_turner_cyclops___fluorescein.html\" class=\"m-doc\">TurnerCyclops_<wbr />Fluorescein</a></td><td>parts per billion (ppb)</td></tr><tr><td>P</td><td><a href=\"class_turner_cyclops___phycocyanin.html\" class=\"m-doc\">TurnerCyclops_<wbr />Phycocyanin</a></td><td>parts per billion (ppb)</td></tr><tr><td>E</td><td><a href=\"class_turner_cyclops___phycoerythrin.html\" class=\"m-doc\">TurnerCyclops_<wbr />Phycoerythrin</a></td><td>parts per billion (ppb)</td></tr><tr><td>U</td><td><a href=\"class_turner_cyclops___c_d_o_m.html\" class=\"m-doc\">TurnerCyclops_<wbr />CDOM</a></td><td>parts per billion (ppb)</td></tr><tr><td>O</td><td><a href=\"class_turner_cyclops___crude_oil.html\" class=\"m-doc\">TurnerCyclops_<wbr />CrudeOil</a></td><td>parts per billion (ppb)</td></tr><tr><td>B</td><td><a href=\"class_turner_cyclops___brighteners.html\" class=\"m-doc\">TurnerCyclops_<wbr />Brighteners</a></td><td>parts per billion (ppb)</td></tr><tr><td>T</td><td><a href=\"class_turner_cyclops___turbidity.html\" class=\"m-doc\">TurnerCyclops_<wbr />Turbidity</a></td><td>nephelometric turbidity units (NTU)</td></tr><tr><td>A</td><td><a href=\"class_turner_cyclops___p_t_s_a.html\" class=\"m-doc\">TurnerCyclops_<wbr />PTSA</a></td><td>parts per billion (ppb)</td></tr><tr><td>G</td><td><a href=\"class_turner_cyclops___b_t_e_x.html\" class=\"m-doc\">TurnerCyclops_<wbr />BTEX</a></td><td>parts per million (ppm)</td></tr><tr><td>L</td><td><a href=\"class_turner_cyclops___tryptophan.html\" class=\"m-doc\">TurnerCyclops_<wbr />Tryptophan</a></td><td>parts per billion (ppb)</td></tr><tr><td>D</td><td><a href=\"class_turner_cyclops___red_chlorophyll.html\" class=\"m-doc\">TurnerCyclops_<wbr />RedChlorophyll</a></td><td>micrograms per Liter (\u00b5g/L)</td></tr></tbody></table>",
            "direction": ""
          },
          {
            "name": "volt_std",
            "type": "float",
            "type_name": "float volt_std",
            "default": null,
            "description": "The voltage (in volts) measured for the conc_std. This voltage should be the final voltage <em>after</em> accounting for any voltage dividers or gain settings.",
            "direction": ""
          },
          {
            "name": "volt_blank",
            "type": "float",
            "type_name": "float volt_blank",
            "default": null,
            "description": "The voltage (in volts) measured for a blank. This voltage should be the final voltage <em>after</em> accounting for any voltage dividers or gain settings.",
            "direction": ""
          },
          {
            "name": "i2cAddress",
            "type": "uint8_t",
            "type_name": "uint8_t i2cAddress",
            "default": "0x48",
            "description": "The I2C address of the ADS 1x15, default is 0x48 (ADDR = GND)",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_turner_cyclops.html",
        "id": "ab3e2f059d407114dc84d20f83f5a34a1",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~TurnerCyclops",
        "brief": "Destroy the Turner Cyclops object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_turner_cyclops.html",
        "id": "aebb7599ce9252c082d5149019a1198eb",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_turner_cyclops.html",
        "id": "af31befcbac1c464996a2d7300af99d30",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "TurnerCyclops",
        "class_turner_cyclops.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Turner Cyclops-7F",
        "group__sensor__cyclops.html"
      ],
      [
        "TurnerCyclops",
        "class_turner_cyclops.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "TurnerCyclops::<wbr />"
  }
}