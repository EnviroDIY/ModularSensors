{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_processor_stats",
    "name": "ProcessorStats",
    "url_base": "class_processor_stats",
    "url": "class_processor_stats.html",
    "include": [
      "&lt;src/sensors/ProcessorStats.h&gt;",
      "_processor_stats_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The main class to use the main processor (MCU) as a sensor.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_processor_stats.html",
        "id": "a6e220d3cb7e7bc63991533485f7ff949",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "ProcessorStats",
        "brief": "Construct a new Processor Stats object for a <strong>known, unmodified development board</strong> using the standard manufacturer core for that board.",
        "description": "<p>Boards that can be used with this constructor:</p><ul><li>EnviroDIY<ul><li>Mayfly<ul><li>the version must be one of &quot;v0.3&quot;, &quot;v0.4&quot;, &quot;v0.5&quot;, &quot;v0.5b&quot;, &quot;v1.0&quot;, or &quot;v1.1&quot;</li></ul></li><li>Stonefly<ul><li>the version must be &quot;v0.1&quot;</li></ul></li></ul></li><li>Adafruit<ul><li>Feather M0 variants (M0, M0 Express, M0 Adalogger, etc)</li><li>Feather M4 variants</li><li>Feather 328p variants<ul><li>WARNING: The processor isn&#x27;t powerful enough for this library. To use it, you would have to strip the library down.</li></ul></li><li>Feather 32U4 variants (Basic proto, RadioFruit, BlueFruit, etc)<ul><li>WARNING: The processor isn&#x27;t powerful enough for this library. To use it, you would have to strip the library down.</li></ul></li></ul></li><li>Sodaq<ul><li>Mbili</li><li>Ndogo</li><li>One<ul><li>the version must be &quot;v0.1&quot; or &quot;v0.2&quot;</li></ul></li><li>Autonomo<ul><li>the version must be &quot;v0.1&quot;</li></ul></li></ul></li></ul><aside class=\"m-note m-info\"><h4>Note</h4><p>The measurements to average will only be applied to the battery voltage measurement!</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "version",
            "type": "const char*",
            "type_name": "const char* version",
            "default": null,
            "description": "The version of the MCU, if applicable. This is used to fill in the correct battery connection information.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "af836a3df627ce66baf93ba3cde2219df",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "ProcessorStats",
        "brief": "Construct a new Processor Stats object for any processor type.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The measurements to average will only be applied to the battery voltage measurement!</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "boardName",
            "type": "const char*",
            "type_name": "const char* boardName",
            "default": null,
            "description": "The name of the board. For many boards, you can use the defined LOGGER_BOARD value. Whatever you type here will be printed out as part of the location for the processor. It has no other effect.",
            "direction": ""
          },
          {
            "name": "version",
            "type": "const char*",
            "type_name": "const char* version",
            "default": null,
            "description": "The version of the MCU, if applicable. Whatever you type here will be printed out as part of the location for the processor. It has no other effect.",
            "direction": ""
          },
          {
            "name": "batteryPin",
            "type": "int8_t",
            "type_name": "int8_t batteryPin",
            "default": null,
            "description": "The analog pin on the processor connected to the battery.",
            "direction": ""
          },
          {
            "name": "batteryMultiplier",
            "type": "float",
            "type_name": "float batteryMultiplier",
            "default": null,
            "description": "Any multiplier needed to convert raw battery readings from <code>analogRead()</code> into true battery values based on any resistors or voltage dividers",
            "direction": ""
          },
          {
            "name": "operatingVoltage",
            "type": "float",
            "type_name": "float operatingVoltage",
            "default": null,
            "description": "The processor&#x27;s operating voltage; most likely 3.3 or 5.",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "aef25f9c52cebcb481f3ce506e0dd7612",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~ProcessorStats",
        "brief": "Destroy the Processor Stats object.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_processor_stats.html",
        "id": "a3cf757c4e722ac51486b96ad3d707853",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Get the pin or connection location between the mcu and the sensor.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is NOT the position of the sensor in the environment, merely how it is attached to the mcu.</p></aside><p>This returns the processor name as read from the compiler variable.</p>",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "a83da3508a0c10ff902e041398c57874d",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "a63c249a8c7aebd4f38671c7a43518a1d",
        "include": null,
        "has_details": true,
        "type": "float",
        "name": "getBatteryVoltage",
        "brief": "A helper to get battery voltage as measured by a direct connection between the battery and a processor analog pin.",
        "description": "",
        "return_value": "The battery voltage in volts",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "ab0b19531e09f65c552138eb4df9b91a1",
        "include": null,
        "has_details": true,
        "type": "uint8_t",
        "name": "getLastResetCode",
        "brief": "Get the processor code for the last reset cause.",
        "description": "",
        "return_value": "The processor code for the last reset cause",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_processor_stats.html",
        "id": "a55e7cc7ebb005baed45c580e9cd6a0c7",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getLastResetCause",
        "brief": "Get the cause of the last reset as a string description.",
        "description": "",
        "return_value": "A string describing the last reset cause",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "ProcessorStats",
        "class_processor_stats.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Processor Metadata",
        "group__sensor__processor.html"
      ],
      [
        "ProcessorStats",
        "class_processor_stats.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "ProcessorStats::<wbr />"
  }
}