{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_atlas_parent",
    "name": "AtlasParent",
    "url_base": "class_atlas_parent",
    "url": "class_atlas_parent.html",
    "include": [
      "&lt;src/sensors/AtlasParent.h&gt;",
      "_atlas_parent_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "A parent class for Atlas EZO circuits and sensors.",
    "description": "<p>This contains the main I2C functionality for all Atlas EZO circuits.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [
      {
        "kind": "class",
        "url": "class_atlas_scientific_c_o2.html",
        "name": "AtlasScientificCO2",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__co2.html\" class=\"m-doc\">Atlas Scientific gaseous CO2 and temperature sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_scientific_d_o.html",
        "name": "AtlasScientificDO",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__do.html\" class=\"m-doc\">Atlas Scientific EZO dissolved oxygen circuit</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_scientific_e_c.html",
        "name": "AtlasScientificEC",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__cond.html\" class=\"m-doc\">Atlas Scientific conductivity circuit and sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_scientific_o_r_p.html",
        "name": "AtlasScientificORP",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__orp.html\" class=\"m-doc\">Atlas Scientific ORP (oxidation/reduction potential) sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_scientific_r_t_d.html",
        "name": "AtlasScientificRTD",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__rtd.html\" class=\"m-doc\">Atlas Scientific RTD temperature sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      },
      {
        "kind": "class",
        "url": "class_atlas_scientificp_h.html",
        "name": "AtlasScientificpH",
        "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the <a href=\"group__sensor__atlas__ph.html\" class=\"m-doc\">Atlas Scientific pH sensor</a>.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_virtual": false,
        "is_final": false
      }
    ],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_atlas_parent.html",
        "id": "a52f0b51ddf5bc2befc4d70912202c92a",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AtlasParent",
        "brief": "Construct a new Atlas Parent object using a secondary <em>hardware</em> I2C instance.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "theI2C",
            "type": "TwoWire*",
            "type_name": "TwoWire* theI2C",
            "default": null,
            "description": "A TwoWire instance for I2C communication. Due to the limitations of the Arduino core, only a hardware I2C instance can be used. For an AVR board, there is only one I2C instance possible and this form of the constructor should not be used. For a SAMD board, this can be used if a secondary I2C port is created on one of the extra SERCOMs.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the Atlas circuit. Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "i2cAddressHex",
            "type": "uint8_t",
            "type_name": "uint8_t i2cAddressHex",
            "default": null,
            "description": "The I2C address of the Atlas circuit",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;AtlasSensor&quot;",
            "description": "The name of the sensor, defaults to AtlasSensor.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The number of results returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor has power until it&#x27;s ready to talk (_warmUpTime_ms).",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor is activated until the readings are stable (_stabilizationTime_ms).",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor is told to take a single reading until that reading is expected to be complete (_measurementTime_ms)",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "a61fb312c108d57f582d9ade62faab98a",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AtlasParent",
        "brief": "Construct a new Atlas Parent object using the primary hardware I2C instance.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The pin on the mcu controlling power to the Atlas circuit. Use -1 if it is continuously powered.",
            "direction": ""
          },
          {
            "name": "i2cAddressHex",
            "type": "uint8_t",
            "type_name": "uint8_t i2cAddressHex",
            "default": null,
            "description": "The I2C address of the Atlas circuit",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "1",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 1.",
            "direction": ""
          },
          {
            "name": "sensorName",
            "type": "const char*",
            "type_name": "const char* sensorName",
            "default": "&quot;AtlasSensor&quot;",
            "description": "The name of the sensor, defaults to AtlasSensor.",
            "direction": ""
          },
          {
            "name": "totalReturnedValues",
            "type": "const uint8_t",
            "type_name": "const uint8_t totalReturnedValues",
            "default": "1",
            "description": "The number of results returned by the sensor. Defaults to 1.",
            "direction": ""
          },
          {
            "name": "warmUpTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t warmUpTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor has power until it&#x27;s ready to talk (_warmUpTime_ms).",
            "direction": ""
          },
          {
            "name": "stabilizationTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t stabilizationTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor is activated until the readings are stable (_stabilizationTime_ms).",
            "direction": ""
          },
          {
            "name": "measurementTime_ms",
            "type": "uint32_t",
            "type_name": "uint32_t measurementTime_ms",
            "default": "0",
            "description": "The time needed from the when a sensor is told to take a single reading until that reading is expected to be complete (_measurementTime_ms)",
            "direction": ""
          },
          {
            "name": "incCalcValues",
            "type": "uint8_t",
            "type_name": "uint8_t incCalcValues",
            "default": "0",
            "description": "The number of included calculated variables from the sensor, if any. These are used for values that we would always calculate for a sensor and depend only on the raw results of that single sensor; optional with a default value of 0.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "ab4339b34fca6378f61afb65e0b67fd04",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~AtlasParent",
        "brief": "Destroy the Atlas Parent object. Also destroy the software I2C instance if one was created.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_atlas_parent.html",
        "id": "a84dbc16fdca9da63a555c18f57e5ea48",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Return the I2C address of the EZO circuit.",
        "description": "",
        "return_value": "Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "a0c21e44a361a913a6dfa1e0f6135e0f3",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "setup",
        "brief": "Do any one-time preparations needed before the sensor will be able to take readings.",
        "description": "<p>This sets the <a href=\"class_sensor.html#a60cef6626d7145eda0709980f66df52b\" class=\"m-doc\">_<wbr />powerPin</a> mode, begins the Wire library (sets pin levels and modes for I2C), and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>. No sensor power is required.</p>",
        "return_value": "True if the setup was successful.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "a44a165b8aefcd2a1d84b93796e67ee5f",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "sleep",
        "brief": "Puts the sensor to sleep, if necessary.",
        "description": "<p>This also un-sets the <a href=\"class_sensor.html#a86541c88432508d6bc81a8fb41746e2e\" class=\"m-doc\">_<wbr />millisSensorActivated</a> timestamp (sets it to 0). This does NOT power down the sensor!</p>",
        "return_value": "True if the sleep function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "a0d67a549bacc3eb77f0a2c43bcf210bd",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "startSingleMeasurement",
        "brief": "Tell the sensor to start a single measurement, if needed.",
        "description": "<p>This also sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor to be warmed up or stable!</p></aside>",
        "return_value": "True if the start measurement function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "aa88c7503b7bc84a0a09344ebae11a9ea",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_atlas_parent.html",
        "id": "aa7c757940ccaa41120eaaac3a4bcc0ab",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "waitForProcessing",
        "brief": "Wait for a command to process.",
        "description": "<p>Most Atlas I2C commands have a 300ms processing time from the time the command is written until it is possible to request a response or result, except for the commands to take a calibration point or a reading which have a 600ms processing/response time.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This should ONLY be used as a wait when no response is expected except a status code - the response will be &quot;consumed&quot; and become unavailable.</p></aside>",
        "return_value": "True processing completed and a status code was returned within the wait period.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "timeout",
            "type": "uint32_t",
            "type_name": "uint32_t timeout",
            "default": "1000L",
            "description": "The maximum amount of time to wait in ms.",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [
      {
        "base_url": "class_atlas_parent.html",
        "id": "a33344d38850913415bd50aa9aad57b86",
        "include": null,
        "has_details": false,
        "type": "int8_t",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_i2cAddressHex",
        "brief": "The I2C address of the Atlas circuit.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      },
      {
        "base_url": "class_atlas_parent.html",
        "id": "ad1e40584af11df89adebfbd79440d991",
        "include": null,
        "has_details": false,
        "type": "TwoWire*",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": true,
        "is_private": false,
        "name": "_i2c",
        "brief": "An internal reference to the hardware Wire instance.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "AtlasParent",
        "class_atlas_parent.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Atlas Scientific EZO Circuits",
        "group__atlas__group.html"
      ],
      [
        "AtlasParent",
        "class_atlas_parent.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "AtlasParent::<wbr />"
  }
}