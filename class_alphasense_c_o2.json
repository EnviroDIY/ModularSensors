{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_alphasense_c_o2",
    "name": "AlphasenseCO2",
    "url_base": "class_alphasense_c_o2",
    "url": "class_alphasense_c_o2.html",
    "include": [
      "&lt;src/sensors/AlphasenseCO2.h&gt;",
      "_alphasense_c_o2_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"class_sensor.html\" class=\"m-doc\">Sensor</a> sub-class for the [Alphasense IRC-A1 CO2](<a href=\"group__sensor__alphasense__co2.html\" class=\"m-doc\">Alphasense IRC-A1 CO2</a>) sensor.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_sensor.html",
        "name": "Sensor",
        "brief": "The &quot;Sensor&quot; class is used for all sensor-level operations - waking, sleeping, and taking measurements.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_alphasense_c_o2.html",
        "id": "adf2a770ea209f6d2c685d9a5e2a87b71",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "AlphasenseCO2",
        "brief": "Construct a new Alphasense IRC-A1 CO2 object - need the power pin and the on the ADS1x15. Designed to read differential voltage between ads channels 2 and 3.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>ModularSensors only supports connecting the ADS1x15 to the primary hardware I2C instance defined in the Arduino core. Connecting the ADS to a secondary hardware or software I2C instance is <em>not</em> supported!</p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>The ADS is expected to be either continuously powered or have its power controlled by the same pin as the Alphasense CO2 sensor. This library does not support any other configuration.</p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "<p>The pin on the mcu controlling power to the Alphasense CO2 sensor. Use -1 if it is continuously powered.</p><ul><li>The Alphasense CO2 sensor requires 2-5 V DC; current draw 20-60 mA</li><li>The ADS1115 requires 2.0-5.5V but is assumed to be powered at 3.3V</li></ul>",
            "direction": ""
          },
          {
            "name": "adsDiffMux",
            "type": "<a href=\"group__sensor__alphasense__co2.html#ga11f404005c064835454699619db59981\" class=\"m-doc\">aco2_<wbr />adsDiffMux_<wbr />t</a>",
            "type_name": "<a href=\"group__sensor__alphasense__co2.html#ga11f404005c064835454699619db59981\" class=\"m-doc\">aco2_<wbr />adsDiffMux_<wbr />t</a> adsDiffMux",
            "default": "<a href=\"group__sensor__alphasense__co2.html#gga11f404005c064835454699619db59981a838e8ef2a0cbfcf82b408147a0617cab\" class=\"m-doc\">DIFF_<wbr />MUX_<wbr />2_<wbr />3</a>",
            "description": "Which two pins <em>on the TI ADS1115</em> that will measure differential voltage. See <a href=\"group__sensor__alphasense__co2.html#ga11f404005c064835454699619db59981\" class=\"m-doc\">aco2_<wbr />adsDiffMux_<wbr />t</a>.",
            "direction": ""
          },
          {
            "name": "i2cAddress",
            "type": "uint8_t",
            "type_name": "uint8_t i2cAddress",
            "default": "0x48",
            "description": "The I2C address of the ADS 1x15, default is 0x48 (ADDR = GND)",
            "direction": ""
          },
          {
            "name": "measurementsToAverage",
            "type": "uint8_t",
            "type_name": "uint8_t measurementsToAverage",
            "default": "7",
            "description": "The number of measurements to take and average before giving a &quot;final&quot; result from the sensor; optional with a default value of 7 [seconds], which is one period of the cycle.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_alphasense_c_o2.html",
        "id": "a4296bb32ef8f3ef7ff8f512796f7609e",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~AlphasenseCO2",
        "brief": "Destroy the <a href=\"class_alphasense_c_o2.html\" class=\"m-doc\">AlphasenseCO2</a> object - no action needed.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_alphasense_c_o2.html",
        "id": "a3afeac097cc54c95576e01a32291d529",
        "include": null,
        "has_details": true,
        "type": "String",
        "name": "getSensorLocation",
        "brief": "Report the I1C address of the ADS and the channel that the Alphasense CO2 sensor is attached to.",
        "description": "",
        "return_value": "<strong>String</strong> Text describing how the sensor is attached to the mcu.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_alphasense_c_o2.html",
        "id": "aa6e44ba7ee2f7a12b5cca976c572ff55",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "addSingleMeasurementResult",
        "brief": "Get the results from a single measurement.",
        "description": "<p>This asks the sensor for a new result, verifies that it passes sanity range checks, and then adds the value to the result array.</p><p>This also un-sets the <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> timestamp (sets <a href=\"class_sensor.html#a4853c30b71ad2efc09bd6f73530155e3\" class=\"m-doc\">_<wbr />millisMeasurementRequested</a> to 0) and updates the <a href=\"class_sensor.html#a1fde72c3ddd07d892dcbfe4a09bcae49\" class=\"m-doc\">_<wbr />sensorStatus</a>.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function does NOT include any waiting for the sensor complete a measurement.</p></aside>",
        "return_value": "True if the function completed successfully.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Sensor",
        "class_sensor.html"
      ],
      [
        "AlphasenseCO2",
        "class_alphasense_c_o2.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Alphasense IRC-A1 CO2",
        "group__sensor__alphasense__co2.html"
      ],
      [
        "AlphasenseCO2",
        "class_alphasense_c_o2.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "AlphasenseCO2::<wbr />"
  }
}