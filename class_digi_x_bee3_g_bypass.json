{
  "version": "1.14.0",
  "compound": {
    "kind": "class",
    "id": "class_digi_x_bee3_g_bypass",
    "name": "DigiXBee3GBypass",
    "url_base": "class_digi_x_bee3_g_bypass",
    "url": "class_digi_x_bee3_g_bypass.html",
    "include": [
      "&lt;src/modems/DigiXBee3GBypass.h&gt;",
      "_digi_x_bee3_g_bypass_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> subclass for <a href=\"group__modem__digi.html\" class=\"m-doc\">Digi Cellular XBee&#x27;s</a> based on u-blox SARA U201 chips and operated in <a href=\"group__modem__digi__3g__bypass.html\" class=\"m-doc\">bypass mode</a>.",
    "description": "<aside class=\"m-note m-danger\"><h4>Warning</h4><p>Digi strongly recommends against this, but it actually seems to be more stable in our tests. Your milage may vary.</p></aside>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "topics": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [
      {
        "kind": "class",
        "url": "class_digi_x_bee.html",
        "name": "DigiXBee",
        "brief": "The parent class for all <a href=\"group__modem__digi.html\" class=\"m-doc\">Digi XBee and XBee3</a> wifi and cellular modules.",
        "templates": null,
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_virtual": false
      }
    ],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a7f0e8c0e2cc340f53f2f72ce15339c95",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "DigiXBee3GBypass",
        "brief": "Construct a new Digi XBee 3G Bypass object.",
        "description": "<p>The constructor initializes all of the provided member variables, constructs a <a href=\"classlogger_modem.html\" class=\"m-doc\">loggerModem</a> parent class with the appropriate timing for the module, calls the constructor for a TinyGSM modem on the provided modemStream, and creates a TinyGSM Client linked to the modem.</p><p>Should be set to a negative number if the modem should be continuously powered or the power cannot be controlled by the MCU.    \nShould be set to a negative number if the modem status pin cannot be read.    This can be either the pin named <code>ON/SLEEP_N/DIO9</code> or <code>CTS_N/DIO7</code> pin in Digi&#x27;s hardware reference. \nShould be set to a negative number if the modem reset pin is not connected to the MCU.    This should be the pin called <code>RESET_N</code> in Digi&#x27;s hardware reference. \nShould be set to a negative number if there is no pin usable for deep sleep modes or it is not accessible to the MCU.    This should be the pin called <code>DTR_N/SLEEP_RQ/DIO8</code> in Digi&#x27;s hardware reference.</p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"class_digi_x_bee.html#ab0e646918d321b3b6db52a049a5a3a99\" class=\"m-doc\">DigiXBee::<wbr />DigiXBee</a></p></aside>",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "modemStream",
            "type": "Stream*",
            "type_name": "Stream* modemStream",
            "default": null,
            "description": "The Arduino stream instance for serial communication.",
            "direction": ""
          },
          {
            "name": "powerPin",
            "type": "int8_t",
            "type_name": "int8_t powerPin",
            "default": null,
            "description": "The digital pin number of the mcu pin controlling power to the modem (active <code>HIGH</code>).",
            "direction": ""
          },
          {
            "name": "statusPin",
            "type": "int8_t",
            "type_name": "int8_t statusPin",
            "default": null,
            "description": "The digital pin number of the mcu pin connected to the modem status output pin.",
            "direction": ""
          },
          {
            "name": "useCTSStatus",
            "type": "bool",
            "type_name": "bool useCTSStatus",
            "default": null,
            "description": "True to use the <code>CTS_N/DIO7</code> pin of the XBee as a status indicator rather than the true status (<code>ON/SLEEP_N/DIO9</code>) pin. This inverts the <a href=\"classlogger_modem.html#af44caee8dd6acf7c72cd1271441a41cb\" class=\"m-doc\">loggerModem::<wbr />_statusLevel</a>.",
            "direction": ""
          },
          {
            "name": "modemResetPin",
            "type": "int8_t",
            "type_name": "int8_t modemResetPin",
            "default": null,
            "description": "The digital pin number of the pin on the mcu attached the the hard or panic reset pin of the modem.",
            "direction": ""
          },
          {
            "name": "modemSleepRqPin",
            "type": "int8_t",
            "type_name": "int8_t modemSleepRqPin",
            "default": null,
            "description": "The digital pin number of a pin on the mcu used to request the modem enter its lowest possible power state.",
            "direction": ""
          },
          {
            "name": "apn",
            "type": "const char*",
            "type_name": "const char* apn",
            "default": null,
            "description": "The Access Point Name (APN) for the SIM card.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a031641b846bfcce4f187cb22345614de",
        "include": null,
        "has_details": false,
        "type": "",
        "name": "~DigiXBee3GBypass",
        "brief": "Destroy the Digi XBee 3G Bypass object - no action needed.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      }
    ],
    "public_funcs": [
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "ad93a1c7fc0e6458463f5e9ba4246472f",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemWake",
        "brief": "Wake up the modem.",
        "description": "<p>This sets pin modes, powers up the modem if necessary, sets time stamps, runs the specific modem&#x27;s wake function, tests for responsiveness to AT commands, and then re-runs the TinyGSM init() if necessary. If the modem fails to respond, this attempts a &quot;hard&quot; pin reset if possible.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#a93dc4dd4e9fce78c3a17e35e683092eb\" class=\"m-doc\">MS_<wbr />MODEM_<wbr />WAKE</a> macro.</p><p>Set-up pin modes. Because the modem calls wake BEFORE the first setup, we must set the pin modes in the wake function.</p><p>Run the specific <a href=\"class_digi_x_bee.html#acc21aea92029fdb27f56c7ea0d83fbab\" class=\"m-doc\">modemWakeFxn()</a>.</p><p>Check that the modem is responding to AT commands.</p><p>Hard reset is there&#x27;s no AT response.</p><p>Exit if we can&#x27;t hard reset.</p><p>Clean any junk out of the modem buffer.</p><p>Re-run the modem init, or setup if necessary. This will turn off echo, which often turns itself back on after a reset/power loss. This also checks the SIM card state.</p><p>If we run setup, take success value entirely from that.</p>",
        "return_value": "True if the modem is responsive and ready for action.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a172d4ceda6be0a28b4bbad5ea278b1c9",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "connectInternet",
        "brief": "Wait for the modem to successfully register on the cellular network and then request that it establish either EPS or GPRS data connection.",
        "description": "<p>Power up, if necessary</p><p>Check if the modem was awake, wake it if not</p><p>wait</p>",
        "return_value": "True if EPS or GPRS data connection has been established. False if the modem was unresponsive, unable to register with the cellular network, or unable to establish a EPS or GPRS connection.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "maxConnectionTime",
            "type": "uint32_t",
            "type_name": "uint32_t maxConnectionTime",
            "default": "50000L",
            "description": "The maximum length of time in milliseconds to wait for network registration and data sconnection. Defaults to 50,000ms (50s).",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a3a97d50b21a39d623c934e9d27fbb40f",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "disconnectInternet",
        "brief": "Detach from EPS or GPRS data connection and then deregister from the cellular network.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a205e94f4f57ba4d4f56d3bea0f323757",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createClient",
        "brief": "Create a new client object using the default socket number.",
        "description": "",
        "return_value": "A new client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a1427a4ce4bdfd8ba3d8b1b47f1654c90",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteClient",
        "brief": "Attempts to delete a created TinyGsmClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a6535408d17359c579b7a7f20cf729ec0",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": []
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "ace9ed565b9ab5bd94d5784291b3920f1",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "deleteSecureClient",
        "brief": "Attempts to delete a created TinyGsmSecureClient object. We need to do this to close memory leaks from the create client because we can&#x27;t delete the created client from a pointer to the parent because the Arduino core&#x27;s client class doesn&#x27;t have a virtual destructor.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "client",
            "type": "Client*",
            "type_name": "Client* client",
            "default": null,
            "description": "The client to delete",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "aca029f8f8386f27ee283218633ff3a60",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "sslAuthMode",
            "type": "SSLAuthMode",
            "type_name": "SSLAuthMode sslAuthMode",
            "default": null,
            "description": "The SSL authentication mode to use",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          },
          {
            "name": "CAcertName",
            "type": "const char*",
            "type_name": "const char* CAcertName",
            "default": "nullptr",
            "description": "The name of the CA certificate to use",
            "direction": ""
          },
          {
            "name": "clientCertName",
            "type": "const char*",
            "type_name": "const char* clientCertName",
            "default": "nullptr",
            "description": "The name of the client certificate to use",
            "direction": ""
          },
          {
            "name": "clientKeyName",
            "type": "const char*",
            "type_name": "const char* clientKeyName",
            "default": "nullptr",
            "description": "The name of the client key to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a14fba588996d26ef1f10ec0e368a3b2f",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "pskIdent",
            "type": "const char*",
            "type_name": "const char* pskIdent",
            "default": null,
            "description": "The pre-shared key identity",
            "direction": ""
          },
          {
            "name": "psKey",
            "type": "const char*",
            "type_name": "const char* psKey",
            "default": null,
            "description": "The pre-shared key",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a9b1ff8ecf6f97944a12aacfbe8bf4447",
        "include": null,
        "has_details": true,
        "type": "Client*",
        "name": "createSecureClient",
        "brief": "Create a new secure client object using the default socket number.",
        "description": "",
        "return_value": "A new secure client object",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "pskTableName",
            "type": "const char*",
            "type_name": "const char* pskTableName",
            "default": null,
            "description": "The pre-shared key table name - for modems that require PSK&#x27;s in a &quot;table&quot; format",
            "direction": ""
          },
          {
            "name": "sslVersion",
            "type": "SSLVersion",
            "type_name": "SSLVersion sslVersion",
            "default": "SSLVersion::TLS1_2",
            "description": "The SSL version to use",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a5f9983fa6cf836edc1c8efd4eaf055f2",
        "include": null,
        "has_details": true,
        "type": "uint32_t",
        "name": "getNISTTime",
        "brief": "Get the time from NIST via TIME protocol (rfc868).",
        "description": "<p>This would be much more efficient if done over UDP, but I&#x27;m doing it over TCP because I don&#x27;t have a UDP library for all the modems.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>The return is the number of seconds since Jan 1, 1970 IN UTC</p></aside><p>Check for and bail if not connected to the internet.</p><p>Try up to 12 times to get a timestamp from NIST.</p><p>Make TCP connection.</p><p>Wait up to 5 seconds for a response.</p>",
        "return_value": "The number of seconds since Jan 1, 1970 IN UTC",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a9eca13352e687e01eb5a93703ca014c4",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getModemSignalQuality",
        "brief": "Query the modem for the current signal quality and write the results to the supplied non-constant references.",
        "description": "",
        "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "rssi",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; rssi",
            "default": null,
            "description": "A reference to an int16_t which will be set with the received signal strength indicator",
            "direction": ""
          },
          {
            "name": "percent",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; percent",
            "default": null,
            "description": "A reference to an int16_t which will be set with the &quot;percent&quot; signal strength",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a437cc5ed5826c8ab6e91859ca4267701",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getModemBatteryStats",
        "brief": "Query the modem for battery information and write the values to the supplied non-constant references.",
        "description": "",
        "return_value": "True indicates that the communication with the modem was successful and the values referenced by the pointers should be valid.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "chargeState",
            "type": "int8_t&amp;",
            "type_name": "int8_t&amp; chargeState",
            "default": null,
            "description": "A reference to an uint8_t which will be set with the current charge state (significance of value varies)",
            "direction": ""
          },
          {
            "name": "percent",
            "type": "int8_t&amp;",
            "type_name": "int8_t&amp; percent",
            "default": null,
            "description": "A reference to an int8_t which will be set with the current charge percent - this may or may not be a valid value depending on the module and breakout.",
            "direction": ""
          },
          {
            "name": "milliVolts",
            "type": "int16_t&amp;",
            "type_name": "int16_t&amp; milliVolts",
            "default": null,
            "description": "A reference to an uint16_t which will be set with the current battery voltage in mV - this may or may not be a valid value depending on the module and breakout.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "acdbcb46cdacd87f84bab965ad7a0a309",
        "include": null,
        "has_details": true,
        "type": "float",
        "name": "getModemChipTemperature",
        "brief": "Get the current temperature provided by the modem module.",
        "description": "",
        "return_value": "The temperature in degrees Celsius",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a903c7cdb35ffa050909fab8b7482e06e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "modemHardReset",
        "brief": "Use the modem reset pin specified in the constructor to perform a &quot;hard&quot; or &quot;panic&quot; reset.",
        "description": "<p>This should only be used if the modem is clearly non-responsive.</p>",
        "return_value": "True if the reset succeeded and the modem should now be responsive. False if the modem remains non-responsive either because the reset failed to fix the communication issue or because a reset is not possible with the current pin/modem configuration.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a3f85c83efc43ceec1fe467eebf54dc0a",
        "include": null,
        "has_details": false,
        "type": "TinyGsm",
        "is_constexpr": false,
        "is_static": false,
        "is_protected": false,
        "is_private": false,
        "name": "gsmModem",
        "brief": "Public reference to the TinyGSM modem.",
        "description": "",
        "deprecated": null,
        "since": null,
        "has_template_details": false,
        "templates": null
      }
    ],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a0898aa0b0e74d1e359e666ec5db6005e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isInternetAvailable",
        "brief": "Check whether there is an active internet connection available.",
        "description": "",
        "return_value": "True if there is an active data connection to the internet.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "aeb65b7810bd786e6c91a556eae6b439f",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "extraModemSetup",
        "brief": "Perform the parts of the modem set up process that are unique to a specific module, as opposed to the parts of setup that are common to all modem modules.",
        "description": "<p>For XBees, this sets the appropriate operating mode (transparent or bypass), enables pin sleep, sets the DIO pins to the expected functions, and reboots the modem to ensure all settings are applied.</p><p>First, wait the required guard time before entering command mode.</p><p>Now, enter command mode to set all pin I/O functionality.</p><p>Enable pin sleep functionality on <code>DIO9</code>. NOTE: Only the <code>DTR_N/SLEEP_RQ/DIO8</code> pin (9 on the bee socket) can be used for this pin sleep/wake.</p><p>Enable status indication on <code>DIO9</code> - it will be HIGH when the XBee is awake. NOTE: Only the <code>ON/SLEEP_N/DIO9</code> pin (13 on the bee socket) can be used for direct status indication.</p><p>Enable CTS on <code>DIO7</code> - it will be <code>LOW</code> when it is clear to send data to the XBee. This can be used as proxy for status indication if that pin is not readable. NOTE: Only the <code>CTS_N/DIO7</code> pin (12 on the bee socket) can be used for CTS.</p><p>Enable association indication on <code>DIO5</code> - this is should be directly attached to an LED if possible.</p><ul><li>Solid light indicates no connection</li><li>Single blink indicates connection</li><li>double blink indicates connection but failed TCP link on last attempt</li></ul><p>NOTE: Only the <code>Associate/DIO5</code> pin (15 on the bee socket) can be used for this function.</p><p>Enable RSSI PWM output on <code>DIO10</code> - this should be directly attached to an LED if possible. A higher PWM duty cycle (and thus brighter LED) indicates better signal quality. NOTE: Only the <code>DIO10/PWM0</code> pin (6 on the bee socket) can be used for this function.</p><p>Enable pin sleep on the XBee.</p><p>Disassociate from the network for the lowest power deep sleep.</p><p>Disable remote manager and enable 2G fallback.</p><p>Make sure airplane mode is off - bypass and airplane mode are incompatible.</p><p>Enable bypass mode.</p><p>Write changes to flash.</p><p>Apply changes.</p><p>Allow 5s for the unit to reset.</p><p>Re-initialize the TinyGSM u-blox instance.</p>",
        "return_value": "True if the extra setup succeeded.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "class_digi_x_bee3_g_bypass.html",
        "id": "a0a83675a3565bf9c9a1cbaf59e70f0a4",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "isModemAwake",
        "brief": "Check if the modem was awake using all possible means.",
        "description": "<p>If possible, we always want to check if the modem was awake before attempting to wake it up. Most cellular modules are woken and put to sleep by identical pulses on a sleep or &quot;power&quot; pin. We don&#x27;t want to accidentally pulse an already on modem to off.</p><p>For most modules, this function is created by the <a href=\"_logger_modem_macros_8h.html#af020f54b6e4a3bcaaf834107d37d8e2e\" class=\"m-doc\">MS_<wbr />IS_<wbr />MODEM_<wbr />AWAKE</a> macro.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>It&#x27;s possible that the status pin is on, but the modem is actually mid-shutdown. In that case, we&#x27;ll mistakenly skip re-waking it. This only applies to modules with a pulse wake (ie, non-zero wake time). For all modules that do pulse on, where possible I&#x27;ve selected a pulse time that is sufficient to wake but not quite long enough to put it to sleep and am using AT commands to sleep. This <em>should</em> keep everything lined up.</p></aside><p>If the wake up is one where a pin is held (0 wake time) and * that pin is defined, then we&#x27;re going to check the level of the * held pin as the indication of whether attempts were made to * wake the modem before entering the setup function.</p><p>If there&#x27;s a status pin, use that to determine if the modem is * awake.</p><p>If we can&#x27;t determine status by pin level, try checking if the * modem responds to AT commands.</p>",
        "return_value": "True if the modem is already awake.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": true,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": true,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": true,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "loggerModem",
        "classlogger_modem.html"
      ],
      [
        "DigiXBee",
        "class_digi_x_bee.html"
      ],
      [
        "DigiXBee3GBypass",
        "class_digi_x_bee3_g_bypass.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "Digi XBee\u00ae Cellular 3G",
        "group__modem__digi__3g__bypass.html"
      ],
      [
        "DigiXBee3GBypass",
        "class_digi_x_bee3_g_bypass.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "DigiXBee3GBypass::<wbr />"
  }
}