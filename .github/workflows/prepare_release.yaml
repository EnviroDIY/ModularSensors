on:
  push:
    branches:
      - master
    # Sequence of patterns matched against refs/tags
    paths:
      - 'VERSION' # Push events when the VERSION file changes
  workflow_dispatch:

name: Prepare a new release and add release assets

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}

jobs:
  release:
    name: Prepare a new release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.5

      - name: Set environment variable for current library version
        run: |
          echo "::debug::Get the current version number"
          VER=$(cat VERSION)
          ZIP_FILE="ModularSensors_Dependencies_${VER}"
          echo "VERSION=$VER" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_FILE" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2.2.2

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      # Install *all* the libraries!
      - name: Install the libraries
        run: |
          chmod +x continuous_integration/install-deps-platformio.sh
          sh continuous_integration/install-deps-platformio.sh

      # Uninstall graphics libraries from Adafruit
      - name: Uninstall Adafruit GFX Library library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit GFX Library"
          pio lib -g uninstall adafruit/Adafruit GFX Library

      - name: Uninstall Adafruit NeoPixel library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit NeoPixel"
          pio lib -g uninstall adafruit/Adafruit NeoPixel

      - name: Uninstall Adafruit SSD1306 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit SSD1306"
          pio lib -g uninstall adafruit/Adafruit SSD1306

      - name: Uninstall Adafruit ADXL343 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit ADXL343"
          pio lib -g uninstall adafruit/Adafruit ADXL343

      - name: Uninstall Adafruit STMPE610 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit STMPE610"
          pio lib -g uninstall adafruit/Adafruit STMPE610

      - name: Uninstall Adafruit TouchScreen library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit TouchScreen"
          pio lib -g uninstall adafruit/Adafruit TouchScreen

      - name: Uninstall Adafruit ILI9341 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit ILI9341"
          pio lib -g uninstall adafruit/Adafruit ILI9341

      # zip up all the installed libraries
      # need to cd into the pio directory so we don't get extra junk directories
      - name: Zip libraries
        run: |
          echo "::debug::Listing global libraries"
          pio lib -g list
          echo "::debug::Zipping global libraries"
          cd /home/runner/.platformio/
          zip ${{ env.ZIP_NAME }}.zip -r lib
          mv ${{ env.ZIP_NAME }}.zip $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE

      # Remove some extras from the zip
      - name: Remove git files from the zip
        continue-on-error: true
        run: |
          echo "::debug::Deleting extra files to decrease size of zip"
          echo "::debug::Removing Git folders"
          zip -d -q ${{ env.ZIP_NAME }} "*/.gitattributes" "*/.gitignore" "*/.gitmodules" "*/.github/*" "*.sh"  "*/Doxyfile" "*/.travis.yml"
      - name: Remove other pdfs from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing other pdfs"
          zip -d -q libraries "*/doc/*.pdf"
      - name: Remove TinyGSM extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing TinyGSM extras"
          zip -d -q libraries "*/TinyGSM/extras/*"
      - name: Remove YosemitechModbus extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing YosemitechModbus extras"
          zip -d -q libraries "*/YosemitechModbus/doc/*"
      - name: Remove SDFat extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing SDFat extras"
          zip -d -q libraries "*/SdFat/extras/*"

      - name: Get notes
        id: generate_notes
        uses: anmarkoulis/commitizen-changelog-reader@master
        with:
          # NOTE:  Need to add the refs/tags to work with the generate notes action
          tag_name: ${{ format('refs/tags/{0}', env.VERSION) }}
          changelog: ChangeLog.md

      # Create a new release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          body: ${{join(fromJson(steps.generate_notes.outputs.notes).notes, '')}}

      # Upload the zipped dependencies to the release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{format('./{0}.zip', env.ZIP_NAME)}}
          asset_name: ${{format('{0}.zip', env.ZIP_NAME)}}
          asset_content_type: application/zip

      # Publish the new release to the pio package manager
      - name: Publish release to PIO
        id: publish-pio
        run: pio package publish
